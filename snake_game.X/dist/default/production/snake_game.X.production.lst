

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Fri Dec 17 15:40:18 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1,group=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    84                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    85                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    86                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    87  0000                     
    88                           ; Version 2.20
    89                           ; Generated 12/02/2020 GMT
    90                           ; 
    91                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    92                           ; All rights reserved.
    93                           ; 
    94                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    95                           ; 
    96                           ; Redistribution and use in source and binary forms, with or without modification, are
    97                           ; permitted provided that the following conditions are met:
    98                           ; 
    99                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   100                           ;        conditions and the following disclaimer.
   101                           ; 
   102                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   103                           ;        of conditions and the following disclaimer in the documentation and/or other
   104                           ;        materials provided with the distribution.
   105                           ; 
   106                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   107                           ;        software without specific prior written permission.
   108                           ; 
   109                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   110                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   111                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   112                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   113                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   114                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   115                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   116                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   117                           ; 
   118                           ; 
   119                           ; Code-generator required, PIC18F4520 Definitions
   120                           ; 
   121                           ; SFR Addresses
   122  0000                     
   123                           	psect	idataCOMRAM
   124  006047                     __pidataCOMRAM:
   125                           	callstack 0
   126                           
   127                           ;initializer for _points
   128  006047  30                 	db	48
   129  006048  30                 	db	48
   130  006049  30                 	db	48
   131                           
   132                           ;initializer for _random_seed
   133  00604A  8431               	dw	33841
   134                           
   135                           ;initializer for _direction
   136  00604C  52                 	db	82
   137                           
   138                           ;initializer for _moving
   139  00604D  52                 	db	82
   140                           
   141                           ;initializer for _snake_size
   142  00604E  01                 	db	1
   143                           
   144                           ;initializer for _status
   145  00604F  03                 	db	3
   146                           
   147                           	psect	idataBANK0
   148  006491                     __pidataBANK0:
   149                           	callstack 0
   150                           
   151                           ;initializer for _sw_song
   152  006491  73                 	db	115
   153  006492  74                 	db	116
   154  006493  61                 	db	97
   155  006494  72                 	db	114
   156  006495  20                 	db	32
   157  006496  77                 	db	119
   158  006497  61                 	db	97
   159  006498  72                 	db	114
   160  006499  73                 	db	115
   161  00649A  00                 	db	0
   162  00649B  00                 	db	0
   163  00649C  00                 	db	0
   164  00649D  00                 	db	0
   165  00649E  00                 	db	0
   166  00649F  00                 	db	0
   167  0064A0  AB                 	db	low _sw_song_size
   168  0064A1  7F                 	db	high _sw_song_size
   169  0064A2  15                 	db	low _sw_notes
   170  0064A3  7F                 	db	high _sw_notes
   171  0064A4  BD                 	db	low _sw_duration
   172  0064A5  7E                 	db	high _sw_duration
   173                           
   174                           ;initializer for _tetris_song
   175  0064A6  74                 	db	116
   176  0064A7  65                 	db	101
   177  0064A8  74                 	db	116
   178  0064A9  72                 	db	114
   179  0064AA  69                 	db	105
   180  0064AB  73                 	db	115
   181  0064AC  00                 	db	0
   182  0064AD  00                 	db	0
   183  0064AE  00                 	db	0
   184  0064AF  00                 	db	0
   185  0064B0  00                 	db	0
   186  0064B1  00                 	db	0
   187  0064B2  00                 	db	0
   188  0064B3  00                 	db	0
   189  0064B4  00                 	db	0
   190  0064B5  AC                 	db	low _tetris_song_size
   191  0064B6  7F                 	db	high _tetris_song_size
   192  0064B7  5A                 	db	low _tetris_notes
   193  0064B8  7E                 	db	high _tetris_notes
   194  0064B9  F7                 	db	low _tetris_duration
   195  0064BA  7D                 	db	high _tetris_duration
   196                           
   197                           ;initializer for _pacman_song
   198  0064BB  70                 	db	112
   199  0064BC  61                 	db	97
   200  0064BD  63                 	db	99
   201  0064BE  6D                 	db	109
   202  0064BF  61                 	db	97
   203  0064C0  6E                 	db	110
   204  0064C1  00                 	db	0
   205  0064C2  00                 	db	0
   206  0064C3  00                 	db	0
   207  0064C4  00                 	db	0
   208  0064C5  00                 	db	0
   209  0064C6  00                 	db	0
   210  0064C7  00                 	db	0
   211  0064C8  00                 	db	0
   212  0064C9  00                 	db	0
   213  0064CA  AD                 	db	low _pacman_song_size
   214  0064CB  7F                 	db	high _pacman_song_size
   215  0064CC  8C                 	db	low _pacman_notes
   216  0064CD  7F                 	db	high _pacman_notes
   217  0064CE  6D                 	db	low _pacman_duration
   218  0064CF  7F                 	db	high _pacman_duration
   219                           
   220                           	psect	mediumconst
   221  007DB0                     __pmediumconst:
   222                           	callstack 0
   223  007DB0  00                 	db	0
   224  007DB1                     _notes_freq:
   225                           	callstack 0
   226  007DB1  0000               	dw	0
   227  007DB3  0000               	dw	0
   228  007DB5  0000               	dw	0
   229  007DB7  0000               	dw	0
   230  007DB9  0000               	dw	0
   231  007DBB  0000               	dw	0
   232  007DBD  0000               	dw	0
   233  007DBF  0000               	dw	0
   234  007DC1  0000               	dw	0
   235  007DC3  0000               	dw	0
   236  007DC5  0000               	dw	0
   237  007DC7  0000               	dw	0
   238  007DC9  0000               	dw	0
   239  007DCB  0000               	dw	0
   240  007DCD  0000               	dw	0
   241  007DCF  0000               	dw	0
   242  007DD1  0000               	dw	0
   243  007DD3  0000               	dw	0
   244  007DD5  0000               	dw	0
   245  007DD7  0000               	dw	0
   246  007DD9  0000               	dw	0
   247  007DDB  0000               	dw	0
   248  007DDD  0000               	dw	0
   249  007DDF  0000               	dw	0
   250  007DE1  0000               	dw	0
   251  007DE3  0000               	dw	0
   252  007DE5  0000               	dw	0
   253  007DE7  0000               	dw	0
   254  007DE9  0000               	dw	0
   255  007DEB  0000               	dw	0
   256  007DED                     __end_of_notes_freq:
   257                           	callstack 0
   258  007DED                     _charKey:
   259                           	callstack 0
   260  007DED  55                 	db	85
   261  007DEE  4C                 	db	76
   262  007DEF  44                 	db	68
   263  007DF0  52                 	db	82
   264  007DF1  53                 	db	83
   265  007DF2  58                 	db	88
   266  007DF3  41                 	db	65
   267  007DF4  42                 	db	66
   268  007DF5  59                 	db	89
   269  007DF6  73                 	db	115
   270  007DF7                     __end_of_charKey:
   271                           	callstack 0
   272  007DF7                     _tetris_duration:
   273                           	callstack 0
   274  007DF7  28                 	db	40
   275  007DF8  14                 	db	20
   276  007DF9  14                 	db	20
   277  007DFA  28                 	db	40
   278  007DFB  14                 	db	20
   279  007DFC  14                 	db	20
   280  007DFD  28                 	db	40
   281  007DFE  14                 	db	20
   282  007DFF  14                 	db	20
   283  007E00  28                 	db	40
   284  007E01  14                 	db	20
   285  007E02  14                 	db	20
   286  007E03  3C                 	db	60
   287  007E04  14                 	db	20
   288  007E05  28                 	db	40
   289  007E06  28                 	db	40
   290  007E07  28                 	db	40
   291  007E08  28                 	db	40
   292  007E09  14                 	db	20
   293  007E0A  28                 	db	40
   294  007E0B  14                 	db	20
   295  007E0C  14                 	db	20
   296  007E0D  3C                 	db	60
   297  007E0E  14                 	db	20
   298  007E0F  28                 	db	40
   299  007E10  14                 	db	20
   300  007E11  14                 	db	20
   301  007E12  3C                 	db	60
   302  007E13  14                 	db	20
   303  007E14  28                 	db	40
   304  007E15  14                 	db	20
   305  007E16  14                 	db	20
   306  007E17  28                 	db	40
   307  007E18  14                 	db	20
   308  007E19  14                 	db	20
   309  007E1A  28                 	db	40
   310  007E1B  28                 	db	40
   311  007E1C  28                 	db	40
   312  007E1D  28                 	db	40
   313  007E1E  28                 	db	40
   314  007E1F  28                 	db	40
   315  007E20  28                 	db	40
   316  007E21  14                 	db	20
   317  007E22  14                 	db	20
   318  007E23  28                 	db	40
   319  007E24  14                 	db	20
   320  007E25  14                 	db	20
   321  007E26  28                 	db	40
   322  007E27  14                 	db	20
   323  007E28  14                 	db	20
   324  007E29  28                 	db	40
   325  007E2A  14                 	db	20
   326  007E2B  14                 	db	20
   327  007E2C  3C                 	db	60
   328  007E2D  14                 	db	20
   329  007E2E  28                 	db	40
   330  007E2F  28                 	db	40
   331  007E30  28                 	db	40
   332  007E31  28                 	db	40
   333  007E32  14                 	db	20
   334  007E33  28                 	db	40
   335  007E34  14                 	db	20
   336  007E35  14                 	db	20
   337  007E36  3C                 	db	60
   338  007E37  14                 	db	20
   339  007E38  28                 	db	40
   340  007E39  14                 	db	20
   341  007E3A  14                 	db	20
   342  007E3B  3C                 	db	60
   343  007E3C  14                 	db	20
   344  007E3D  28                 	db	40
   345  007E3E  14                 	db	20
   346  007E3F  14                 	db	20
   347  007E40  28                 	db	40
   348  007E41  14                 	db	20
   349  007E42  14                 	db	20
   350  007E43  28                 	db	40
   351  007E44  28                 	db	40
   352  007E45  28                 	db	40
   353  007E46  28                 	db	40
   354  007E47  28                 	db	40
   355  007E48  28                 	db	40
   356  007E49  50                 	db	80
   357  007E4A  50                 	db	80
   358  007E4B  50                 	db	80
   359  007E4C  50                 	db	80
   360  007E4D  50                 	db	80
   361  007E4E  50                 	db	80
   362  007E4F  50                 	db	80
   363  007E50  28                 	db	40
   364  007E51  14                 	db	20
   365  007E52  50                 	db	80
   366  007E53  50                 	db	80
   367  007E54  50                 	db	80
   368  007E55  50                 	db	80
   369  007E56  28                 	db	40
   370  007E57  28                 	db	40
   371  007E58  50                 	db	80
   372  007E59  50                 	db	80
   373  007E5A                     __end_of_tetris_duration:
   374                           	callstack 0
   375  007E5A                     _tetris_notes:
   376                           	callstack 0
   377  007E5A  0B                 	db	11
   378  007E5B  06                 	db	6
   379  007E5C  07                 	db	7
   380  007E5D  09                 	db	9
   381  007E5E  07                 	db	7
   382  007E5F  06                 	db	6
   383  007E60  04                 	db	4
   384  007E61  04                 	db	4
   385  007E62  07                 	db	7
   386  007E63  0B                 	db	11
   387  007E64  09                 	db	9
   388  007E65  07                 	db	7
   389  007E66  06                 	db	6
   390  007E67  07                 	db	7
   391  007E68  09                 	db	9
   392  007E69  0B                 	db	11
   393  007E6A  07                 	db	7
   394  007E6B  04                 	db	4
   395  007E6C  04                 	db	4
   396  007E6D  04                 	db	4
   397  007E6E  06                 	db	6
   398  007E6F  07                 	db	7
   399  007E70  09                 	db	9
   400  007E71  0C                 	db	12
   401  007E72  10                 	db	16
   402  007E73  0E                 	db	14
   403  007E74  0C                 	db	12
   404  007E75  0B                 	db	11
   405  007E76  07                 	db	7
   406  007E77  0B                 	db	11
   407  007E78  09                 	db	9
   408  007E79  07                 	db	7
   409  007E7A  06                 	db	6
   410  007E7B  06                 	db	6
   411  007E7C  07                 	db	7
   412  007E7D  09                 	db	9
   413  007E7E  0B                 	db	11
   414  007E7F  07                 	db	7
   415  007E80  04                 	db	4
   416  007E81  04                 	db	4
   417  007E82  1D                 	db	29
   418  007E83  0B                 	db	11
   419  007E84  06                 	db	6
   420  007E85  07                 	db	7
   421  007E86  09                 	db	9
   422  007E87  07                 	db	7
   423  007E88  06                 	db	6
   424  007E89  04                 	db	4
   425  007E8A  04                 	db	4
   426  007E8B  07                 	db	7
   427  007E8C  0B                 	db	11
   428  007E8D  09                 	db	9
   429  007E8E  07                 	db	7
   430  007E8F  06                 	db	6
   431  007E90  07                 	db	7
   432  007E91  09                 	db	9
   433  007E92  0B                 	db	11
   434  007E93  07                 	db	7
   435  007E94  04                 	db	4
   436  007E95  04                 	db	4
   437  007E96  04                 	db	4
   438  007E97  06                 	db	6
   439  007E98  07                 	db	7
   440  007E99  09                 	db	9
   441  007E9A  0C                 	db	12
   442  007E9B  10                 	db	16
   443  007E9C  0E                 	db	14
   444  007E9D  0C                 	db	12
   445  007E9E  0B                 	db	11
   446  007E9F  07                 	db	7
   447  007EA0  0B                 	db	11
   448  007EA1  09                 	db	9
   449  007EA2  07                 	db	7
   450  007EA3  06                 	db	6
   451  007EA4  06                 	db	6
   452  007EA5  07                 	db	7
   453  007EA6  09                 	db	9
   454  007EA7  0B                 	db	11
   455  007EA8  07                 	db	7
   456  007EA9  04                 	db	4
   457  007EAA  04                 	db	4
   458  007EAB  1D                 	db	29
   459  007EAC  0B                 	db	11
   460  007EAD  07                 	db	7
   461  007EAE  09                 	db	9
   462  007EAF  06                 	db	6
   463  007EB0  07                 	db	7
   464  007EB1  04                 	db	4
   465  007EB2  03                 	db	3
   466  007EB3  06                 	db	6
   467  007EB4  1D                 	db	29
   468  007EB5  0B                 	db	11
   469  007EB6  07                 	db	7
   470  007EB7  09                 	db	9
   471  007EB8  06                 	db	6
   472  007EB9  07                 	db	7
   473  007EBA  0B                 	db	11
   474  007EBB  10                 	db	16
   475  007EBC  0F                 	db	15
   476  007EBD                     __end_of_tetris_notes:
   477                           	callstack 0
   478  007EBD                     _sw_duration:
   479                           	callstack 0
   480  007EBD  18                 	db	24
   481  007EBE  18                 	db	24
   482  007EBF  18                 	db	24
   483  007EC0  60                 	db	96
   484  007EC1  60                 	db	96
   485  007EC2  18                 	db	24
   486  007EC3  18                 	db	24
   487  007EC4  18                 	db	24
   488  007EC5  60                 	db	96
   489  007EC6  30                 	db	48
   490  007EC7  18                 	db	24
   491  007EC8  18                 	db	24
   492  007EC9  18                 	db	24
   493  007ECA  60                 	db	96
   494  007ECB  30                 	db	48
   495  007ECC  18                 	db	24
   496  007ECD  18                 	db	24
   497  007ECE  18                 	db	24
   498  007ECF  60                 	db	96
   499  007ED0  18                 	db	24
   500  007ED1  18                 	db	24
   501  007ED2  18                 	db	24
   502  007ED3  60                 	db	96
   503  007ED4  60                 	db	96
   504  007ED5  18                 	db	24
   505  007ED6  18                 	db	24
   506  007ED7  18                 	db	24
   507  007ED8  60                 	db	96
   508  007ED9  30                 	db	48
   509  007EDA  18                 	db	24
   510  007EDB  18                 	db	24
   511  007EDC  18                 	db	24
   512  007EDD  60                 	db	96
   513  007EDE  30                 	db	48
   514  007EDF  18                 	db	24
   515  007EE0  18                 	db	24
   516  007EE1  18                 	db	24
   517  007EE2  60                 	db	96
   518  007EE3  24                 	db	36
   519  007EE4  0C                 	db	12
   520  007EE5  48                 	db	72
   521  007EE6  18                 	db	24
   522  007EE7  18                 	db	24
   523  007EE8  18                 	db	24
   524  007EE9  18                 	db	24
   525  007EEA  18                 	db	24
   526  007EEB  18                 	db	24
   527  007EEC  18                 	db	24
   528  007EED  18                 	db	24
   529  007EEE  30                 	db	48
   530  007EEF  18                 	db	24
   531  007EF0  30                 	db	48
   532  007EF1  24                 	db	36
   533  007EF2  0C                 	db	12
   534  007EF3  48                 	db	72
   535  007EF4  18                 	db	24
   536  007EF5  18                 	db	24
   537  007EF6  18                 	db	24
   538  007EF7  18                 	db	24
   539  007EF8  18                 	db	24
   540  007EF9  24                 	db	36
   541  007EFA  0C                 	db	12
   542  007EFB  60                 	db	96
   543  007EFC  18                 	db	24
   544  007EFD  18                 	db	24
   545  007EFE  48                 	db	72
   546  007EFF  18                 	db	24
   547  007F00  18                 	db	24
   548  007F01  18                 	db	24
   549  007F02  18                 	db	24
   550  007F03  18                 	db	24
   551  007F04  18                 	db	24
   552  007F05  18                 	db	24
   553  007F06  18                 	db	24
   554  007F07  30                 	db	48
   555  007F08  18                 	db	24
   556  007F09  30                 	db	48
   557  007F0A  24                 	db	36
   558  007F0B  0C                 	db	12
   559  007F0C  30                 	db	48
   560  007F0D  18                 	db	24
   561  007F0E  30                 	db	48
   562  007F0F  18                 	db	24
   563  007F10  30                 	db	48
   564  007F11  18                 	db	24
   565  007F12  30                 	db	48
   566  007F13  18                 	db	24
   567  007F14  C0                 	db	192
   568  007F15                     __end_of_sw_duration:
   569                           	callstack 0
   570  007F15                     _sw_notes:
   571                           	callstack 0
   572  007F15  05                 	db	5
   573  007F16  05                 	db	5
   574  007F17  05                 	db	5
   575  007F18  0C                 	db	12
   576  007F19  13                 	db	19
   577  007F1A  11                 	db	17
   578  007F1B  10                 	db	16
   579  007F1C  0E                 	db	14
   580  007F1D  18                 	db	24
   581  007F1E  13                 	db	19
   582  007F1F  11                 	db	17
   583  007F20  10                 	db	16
   584  007F21  0E                 	db	14
   585  007F22  18                 	db	24
   586  007F23  13                 	db	19
   587  007F24  11                 	db	17
   588  007F25  10                 	db	16
   589  007F26  11                 	db	17
   590  007F27  0E                 	db	14
   591  007F28  07                 	db	7
   592  007F29  07                 	db	7
   593  007F2A  07                 	db	7
   594  007F2B  0C                 	db	12
   595  007F2C  13                 	db	19
   596  007F2D  11                 	db	17
   597  007F2E  10                 	db	16
   598  007F2F  0E                 	db	14
   599  007F30  18                 	db	24
   600  007F31  13                 	db	19
   601  007F32  11                 	db	17
   602  007F33  10                 	db	16
   603  007F34  0E                 	db	14
   604  007F35  18                 	db	24
   605  007F36  13                 	db	19
   606  007F37  11                 	db	17
   607  007F38  10                 	db	16
   608  007F39  11                 	db	17
   609  007F3A  0E                 	db	14
   610  007F3B  07                 	db	7
   611  007F3C  07                 	db	7
   612  007F3D  09                 	db	9
   613  007F3E  09                 	db	9
   614  007F3F  11                 	db	17
   615  007F40  10                 	db	16
   616  007F41  0E                 	db	14
   617  007F42  0C                 	db	12
   618  007F43  0C                 	db	12
   619  007F44  0E                 	db	14
   620  007F45  10                 	db	16
   621  007F46  0E                 	db	14
   622  007F47  09                 	db	9
   623  007F48  0B                 	db	11
   624  007F49  07                 	db	7
   625  007F4A  07                 	db	7
   626  007F4B  09                 	db	9
   627  007F4C  09                 	db	9
   628  007F4D  11                 	db	17
   629  007F4E  10                 	db	16
   630  007F4F  0E                 	db	14
   631  007F50  0C                 	db	12
   632  007F51  13                 	db	19
   633  007F52  0E                 	db	14
   634  007F53  0E                 	db	14
   635  007F54  1D                 	db	29
   636  007F55  07                 	db	7
   637  007F56  09                 	db	9
   638  007F57  09                 	db	9
   639  007F58  11                 	db	17
   640  007F59  10                 	db	16
   641  007F5A  0E                 	db	14
   642  007F5B  0C                 	db	12
   643  007F5C  0C                 	db	12
   644  007F5D  0E                 	db	14
   645  007F5E  10                 	db	16
   646  007F5F  0E                 	db	14
   647  007F60  09                 	db	9
   648  007F61  0B                 	db	11
   649  007F62  13                 	db	19
   650  007F63  13                 	db	19
   651  007F64  18                 	db	24
   652  007F65  16                 	db	22
   653  007F66  14                 	db	20
   654  007F67  13                 	db	19
   655  007F68  11                 	db	17
   656  007F69  0F                 	db	15
   657  007F6A  0E                 	db	14
   658  007F6B  0C                 	db	12
   659  007F6C  13                 	db	19
   660  007F6D                     __end_of_sw_notes:
   661                           	callstack 0
   662  007F6D                     _pacman_duration:
   663                           	callstack 0
   664  007F6D  0F                 	db	15
   665  007F6E  0F                 	db	15
   666  007F6F  0F                 	db	15
   667  007F70  0F                 	db	15
   668  007F71  08                 	db	8
   669  007F72  17                 	db	23
   670  007F73  1E                 	db	30
   671  007F74  0F                 	db	15
   672  007F75  0F                 	db	15
   673  007F76  0F                 	db	15
   674  007F77  0F                 	db	15
   675  007F78  08                 	db	8
   676  007F79  17                 	db	23
   677  007F7A  1E                 	db	30
   678  007F7B  0F                 	db	15
   679  007F7C  0F                 	db	15
   680  007F7D  0F                 	db	15
   681  007F7E  0F                 	db	15
   682  007F7F  08                 	db	8
   683  007F80  17                 	db	23
   684  007F81  1E                 	db	30
   685  007F82  08                 	db	8
   686  007F83  08                 	db	8
   687  007F84  08                 	db	8
   688  007F85  08                 	db	8
   689  007F86  08                 	db	8
   690  007F87  08                 	db	8
   691  007F88  08                 	db	8
   692  007F89  08                 	db	8
   693  007F8A  0F                 	db	15
   694  007F8B  1E                 	db	30
   695  007F8C                     __end_of_pacman_duration:
   696                           	callstack 0
   697  007F8C                     _pacman_notes:
   698                           	callstack 0
   699  007F8C  06                 	db	6
   700  007F8D  12                 	db	18
   701  007F8E  0D                 	db	13
   702  007F8F  0A                 	db	10
   703  007F90  12                 	db	18
   704  007F91  0D                 	db	13
   705  007F92  0A                 	db	10
   706  007F93  07                 	db	7
   707  007F94  13                 	db	19
   708  007F95  1A                 	db	26
   709  007F96  17                 	db	23
   710  007F97  13                 	db	19
   711  007F98  1A                 	db	26
   712  007F99  17                 	db	23
   713  007F9A  06                 	db	6
   714  007F9B  12                 	db	18
   715  007F9C  0D                 	db	13
   716  007F9D  0A                 	db	10
   717  007F9E  12                 	db	18
   718  007F9F  0D                 	db	13
   719  007FA0  0A                 	db	10
   720  007FA1  0A                 	db	10
   721  007FA2  0B                 	db	11
   722  007FA3  0C                 	db	12
   723  007FA4  0C                 	db	12
   724  007FA5  0D                 	db	13
   725  007FA6  0E                 	db	14
   726  007FA7  0E                 	db	14
   727  007FA8  0F                 	db	15
   728  007FA9  10                 	db	16
   729  007FAA  12                 	db	18
   730  007FAB                     __end_of_pacman_notes:
   731                           	callstack 0
   732  007FAB                     _sw_song_size:
   733                           	callstack 0
   734  007FAB  58                 	db	88
   735  007FAC                     __end_of_sw_song_size:
   736                           	callstack 0
   737  007FAC                     _tetris_song_size:
   738                           	callstack 0
   739  007FAC  63                 	db	99
   740  007FAD                     __end_of_tetris_song_size:
   741                           	callstack 0
   742  007FAD                     _pacman_song_size:
   743                           	callstack 0
   744  007FAD  1F                 	db	31
   745  007FAE                     __end_of_pacman_song_size:
   746                           	callstack 0
   747  0000                     _T2CON	set	4042
   748  0000                     _CCP2CON	set	4026
   749  0000                     _CCPR2L	set	4027
   750  0000                     _PR2	set	4043
   751  0000                     _T0CON	set	4053
   752  0000                     _TMR0L	set	4054
   753  0000                     _TMR0H	set	4055
   754  0000                     _INTCON	set	4082
   755  0000                     _SPBRG	set	4015
   756  0000                     _SPBRGH	set	4016
   757  0000                     _BAUDCON	set	4024
   758  0000                     _TXSTA	set	4012
   759  0000                     _RCREG	set	4014
   760  0000                     _RCSTA	set	4011
   761  0000                     _TXREG	set	4013
   762  0000                     _PIR1	set	3998
   763  0000                     _ADCON1	set	4033
   764  0000                     _TRISE	set	3990
   765  0000                     _TRISD	set	3989
   766  0000                     _TRISC	set	3988
   767  0000                     _TRISB	set	3987
   768  0000                     _TRISA	set	3986
   769  0000                     _PORTE	set	3972
   770  0000                     _PORTD	set	3971
   771  0000                     _PORTC	set	3970
   772  0000                     _PORTB	set	3969
   773  0000                     _PORTA	set	3968
   774  007FAE                     STR_2:
   775  007FAE  43                 	db	67	;'C'
   776  007FAF  6F                 	db	111	;'o'
   777  007FB0  6E                 	db	110	;'n'
   778  007FB1  74                 	db	116	;'t'
   779  007FB2  69                 	db	105	;'i'
   780  007FB3  6E                 	db	110	;'n'
   781  007FB4  75                 	db	117	;'u'
   782  007FB5  61                 	db	97	;'a'
   783  007FB6  72                 	db	114	;'r'
   784  007FB7  20                 	db	32
   785  007FB8  4A                 	db	74	;'J'
   786  007FB9  6F                 	db	111	;'o'
   787  007FBA  67                 	db	103	;'g'
   788  007FBB  6F                 	db	111	;'o'
   789  007FBC  00                 	db	0
   790  007FBD                     STR_8:
   791  007FBD  56                 	db	86	;'V'
   792  007FBE  6F                 	db	111	;'o'
   793  007FBF  63                 	db	99	;'c'
   794  007FC0  65                 	db	101	;'e'
   795  007FC1  20                 	db	32
   796  007FC2  70                 	db	112	;'p'
   797  007FC3  65                 	db	101	;'e'
   798  007FC4  72                 	db	114	;'r'
   799  007FC5  64                 	db	100	;'d'
   800  007FC6  65                 	db	101	;'e'
   801  007FC7  75                 	db	117	;'u'
   802  007FC8  00                 	db	0
   803  007FC9                     STR_1:
   804  007FC9  4E                 	db	78	;'N'
   805  007FCA  6F                 	db	111	;'o'
   806  007FCB  76                 	db	118	;'v'
   807  007FCC  6F                 	db	111	;'o'
   808  007FCD  20                 	db	32
   809  007FCE  4A                 	db	74	;'J'
   810  007FCF  6F                 	db	111	;'o'
   811  007FD0  67                 	db	103	;'g'
   812  007FD1  6F                 	db	111	;'o'
   813  007FD2  00                 	db	0
   814  007FD3                     STR_9:
   815  007FD3  50                 	db	80	;'P'
   816  007FD4  6F                 	db	111	;'o'
   817  007FD5  6E                 	db	110	;'n'
   818  007FD6  74                 	db	116	;'t'
   819  007FD7  6F                 	db	111	;'o'
   820  007FD8  73                 	db	115	;'s'
   821  007FD9  3A                 	db	58	;':'
   822  007FDA  20                 	db	32
   823  007FDB  00                 	db	0
   824  007FDC                     STR_7:
   825  007FDC  50                 	db	80	;'P'
   826  007FDD  6F                 	db	111	;'o'
   827  007FDE  6E                 	db	110	;'n'
   828  007FDF  74                 	db	116	;'t'
   829  007FE0  6F                 	db	111	;'o'
   830  007FE1  73                 	db	115	;'s'
   831  007FE2  3A                 	db	58	;':'
   832  007FE3  00                 	db	0
   833  007FE4                     STR_5:
   834  007FE4  73                 	db	115	;'s'
   835  007FE5  65                 	db	101	;'e'
   836  007FE6  72                 	db	114	;'r'
   837  007FE7  69                 	db	105	;'i'
   838  007FE8  61                 	db	97	;'a'
   839  007FE9  6C                 	db	108	;'l'
   840  007FEA  00                 	db	0
   841  007FEB                     STR_6:
   842  007FEB  62                 	db	98	;'b'
   843  007FEC  75                 	db	117	;'u'
   844  007FED  7A                 	db	122	;'z'
   845  007FEE  7A                 	db	122	;'z'
   846  007FEF  65                 	db	101	;'e'
   847  007FF0  72                 	db	114	;'r'
   848  007FF1  00                 	db	0
   849  007FF2                     STR_4:
   850  007FF2  53                 	db	83	;'S'
   851  007FF3  6F                 	db	111	;'o'
   852  007FF4  6D                 	db	109	;'m'
   853  007FF5  3A                 	db	58	;':'
   854  007FF6  20                 	db	32
   855  007FF7  00                 	db	0
   856  007FF8                     STR_3:
   857  007FF8  4D                 	db	77	;'M'
   858  007FF9  75                 	db	117	;'u'
   859  007FFA  73                 	db	115	;'s'
   860  007FFB  3A                 	db	58	;':'
   861  007FFC  20                 	db	32
   862  007FFD  00                 	db	0
   863  007FFE  00                 	db	0	; dummy byte at the end
   864  0000                     
   865                           ; #config settings
   866                           
   867                           	psect	cinit
   868  006922                     __pcinit:
   869                           	callstack 0
   870  006922                     start_initialization:
   871                           	callstack 0
   872  006922                     __initialization:
   873                           	callstack 0
   874                           
   875                           ; Initialize objects allocated to BANK0 (63 bytes)
   876                           ; load TBLPTR registers with __pidataBANK0
   877  006922  0E91               	movlw	low __pidataBANK0
   878  006924  6EF6               	movwf	tblptrl,c
   879  006926  0E64               	movlw	high __pidataBANK0
   880  006928  6EF7               	movwf	tblptrh,c
   881  00692A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   882  00692C  6EF8               	movwf	tblptru,c
   883  00692E  EE00  F0BF         	lfsr	0,__pdataBANK0
   884  006932  EE10 F03F          	lfsr	1,63
   885  006936                     copy_data0:
   886  006936  0009               	tblrd		*+
   887  006938  CFF5 FFEE          	movff	tablat,postinc0
   888  00693C  50E5               	movf	postdec1,w,c
   889  00693E  50E1               	movf	fsr1l,w,c
   890  006940  E1FA               	bnz	copy_data0
   891                           
   892                           ; Initialize objects allocated to COMRAM (9 bytes)
   893                           ; load TBLPTR registers with __pidataCOMRAM
   894  006942  0E47               	movlw	low __pidataCOMRAM
   895  006944  6EF6               	movwf	tblptrl,c
   896  006946  0E60               	movlw	high __pidataCOMRAM
   897  006948  6EF7               	movwf	tblptrh,c
   898  00694A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   899  00694C  6EF8               	movwf	tblptru,c
   900  00694E  EE00  F06F         	lfsr	0,__pdataCOMRAM
   901  006952  EE10 F009          	lfsr	1,9
   902  006956                     copy_data1:
   903  006956  0009               	tblrd		*+
   904  006958  CFF5 FFEE          	movff	tablat,postinc0
   905  00695C  50E5               	movf	postdec1,w,c
   906  00695E  50E1               	movf	fsr1l,w,c
   907  006960  E1FA               	bnz	copy_data1
   908                           
   909                           ; Clear objects allocated to BANK1 (48 bytes)
   910  006962  EE01  F000         	lfsr	0,__pbssBANK1
   911  006966  0E30               	movlw	48
   912  006968                     clear_0:
   913  006968  6AEE               	clrf	postinc0,c
   914  00696A  06E8               	decf	wreg,f,c
   915  00696C  E1FD               	bnz	clear_0
   916                           
   917                           ; Clear objects allocated to BANK0 (63 bytes)
   918  00696E  EE00  F080         	lfsr	0,__pbssBANK0
   919  006972  0E3F               	movlw	63
   920  006974                     clear_1:
   921  006974  6AEE               	clrf	postinc0,c
   922  006976  06E8               	decf	wreg,f,c
   923  006978  E1FD               	bnz	clear_1
   924                           
   925                           ; Clear objects allocated to COMRAM (82 bytes)
   926  00697A  EE00  F001         	lfsr	0,__pbssCOMRAM
   927  00697E  0E52               	movlw	82
   928  006980                     clear_2:
   929  006980  6AEE               	clrf	postinc0,c
   930  006982  06E8               	decf	wreg,f,c
   931  006984  E1FD               	bnz	clear_2
   932  006986                     end_of_initialization:
   933                           	callstack 0
   934  006986                     __end_of__initialization:
   935                           	callstack 0
   936  006986  0E00               	movlw	low (__Lmediumconst shr (0+16))
   937  006988  6EF8               	movwf	tblptru,c
   938  00698A  0100               	movlb	0
   939  00698C  EFF9  F035         	goto	_main	;jump to C main() function
   940                           
   941                           	psect	bssCOMRAM
   942  000001                     __pbssCOMRAM:
   943                           	callstack 0
   944  000001                     _snake:
   945                           	callstack 0
   946  000001                     	ds	42
   947  00002B                     _food:
   948                           	callstack 0
   949  00002B                     	ds	2
   950  00002D                     kpDebounce@oldRead:
   951                           	callstack 0
   952  00002D                     	ds	2
   953  00002F                     kpDebounce@newRead:
   954                           	callstack 0
   955  00002F                     	ds	2
   956  000031                     _keys:
   957                           	callstack 0
   958  000031                     	ds	2
   959  000033                     readSerialController@last_key:
   960                           	callstack 0
   961  000033                     	ds	1
   962  000034                     _count:
   963                           	callstack 0
   964  000034                     	ds	1
   965  000035                     _mixer_output:
   966                           	callstack 0
   967  000035                     	ds	1
   968  000036                     _song_idx:
   969                           	callstack 0
   970  000036                     	ds	1
   971  000037                     _playing_note:
   972                           	callstack 0
   973  000037                     	ds	1
   974  000038                     _pause_time:
   975                           	callstack 0
   976  000038                     	ds	1
   977  000039                     _note_time:
   978                           	callstack 0
   979  000039                     	ds	1
   980  00003A                     _current_note:
   981                           	callstack 0
   982  00003A                     	ds	1
   983  00003B                     _menu_opt:
   984                           	callstack 0
   985  00003B                     	ds	1
   986  00003C                     kpDebounce@tempo:
   987                           	callstack 0
   988  00003C                     	ds	1
   989  00003D                     _last_key:
   990                           	callstack 0
   991  00003D                     	ds	1
   992  00003E                     _song:
   993                           	callstack 0
   994  00003E                     	ds	21
   995                           
   996                           	psect	dataCOMRAM
   997  00006F                     __pdataCOMRAM:
   998                           	callstack 0
   999  00006F                     _points:
  1000                           	callstack 0
  1001  00006F                     	ds	3
  1002  000072                     _random_seed:
  1003                           	callstack 0
  1004  000072                     	ds	2
  1005  000074                     _direction:
  1006                           	callstack 0
  1007  000074                     	ds	1
  1008  000075                     _moving:
  1009                           	callstack 0
  1010  000075                     	ds	1
  1011  000076                     _snake_size:
  1012                           	callstack 0
  1013  000076                     	ds	1
  1014  000077                     _status:
  1015                           	callstack 0
  1016  000077                     	ds	1
  1017                           
  1018                           	psect	bssBANK0
  1019  000080                     __pbssBANK0:
  1020                           	callstack 0
  1021  000080                     _playlist:
  1022                           	callstack 0
  1023  000080                     	ds	63
  1024                           
  1025                           	psect	dataBANK0
  1026  0000BF                     __pdataBANK0:
  1027                           	callstack 0
  1028  0000BF                     _sw_song:
  1029                           	callstack 0
  1030  0000BF                     	ds	21
  1031  0000D4                     _tetris_song:
  1032                           	callstack 0
  1033  0000D4                     	ds	21
  1034  0000E9                     _pacman_song:
  1035                           	callstack 0
  1036  0000E9                     	ds	21
  1037                           
  1038                           	psect	bssBANK1
  1039  000100                     __pbssBANK1:
  1040                           	callstack 0
  1041  000100                     _screen:
  1042                           	callstack 0
  1043  000100                     	ds	48
  1044                           
  1045                           	psect	cstackCOMRAM
  1046  000053                     __pcstackCOMRAM:
  1047                           	callstack 0
  1048  000053                     ??_kpReadKey:
  1049  000053                     ??_checkCollision:
  1050  000053                     ?_mixerGetSongName:
  1051                           	callstack 0
  1052  000053                     ?_digitalRead:
  1053                           	callstack 0
  1054  000053                     ?___wmul:
  1055                           	callstack 0
  1056  000053                     ?___awmod:
  1057                           	callstack 0
  1058  000053                     ?___lwdiv:
  1059                           	callstack 0
  1060  000053                     ?___aldiv:
  1061                           	callstack 0
  1062  000053                     serialSend@c:
  1063                           	callstack 0
  1064  000053                     serialRead@resp:
  1065                           	callstack 0
  1066  000053                     mixerSetOutput@out:
  1067                           	callstack 0
  1068  000053                     digitalWrite@pin:
  1069                           	callstack 0
  1070  000053                     digitalRead@pin:
  1071                           	callstack 0
  1072  000053                     pinMode@pin:
  1073                           	callstack 0
  1074  000053                     delayMicro@a:
  1075                           	callstack 0
  1076  000053                     delayMili@a:
  1077                           	callstack 0
  1078  000053                     timerReset@tempo:
  1079                           	callstack 0
  1080  000053                     resetPoints@i:
  1081                           	callstack 0
  1082  000053                     ___wmul@multiplier:
  1083                           	callstack 0
  1084  000053                     ___awmod@dividend:
  1085                           	callstack 0
  1086  000053                     ___lwdiv@dividend:
  1087                           	callstack 0
  1088  000053                     ___aldiv@dividend:
  1089                           	callstack 0
  1090                           
  1091                           ; 4 bytes @ 0x0
  1092  000053                     	ds	1
  1093  000054                     readSerialController@key:
  1094                           	callstack 0
  1095  000054                     addPoint@i:
  1096                           	callstack 0
  1097                           
  1098                           ; 2 bytes @ 0x1
  1099  000054                     	ds	1
  1100  000055                     ??_digitalRead:
  1101  000055                     ??_delayMili:
  1102  000055                     digitalWrite@value:
  1103                           	callstack 0
  1104  000055                     pinMode@type:
  1105                           	callstack 0
  1106  000055                     timerReset@ciclos:
  1107                           	callstack 0
  1108  000055                     ___wmul@multiplicand:
  1109                           	callstack 0
  1110  000055                     ___awmod@divisor:
  1111                           	callstack 0
  1112  000055                     ___lwdiv@divisor:
  1113                           	callstack 0
  1114                           
  1115                           ; 2 bytes @ 0x2
  1116  000055                     	ds	1
  1117  000056                     kpReadKey@i:
  1118                           	callstack 0
  1119  000056                     delayMili@i:
  1120                           	callstack 0
  1121  000056                     checkCollision@i:
  1122                           	callstack 0
  1123                           
  1124                           ; 2 bytes @ 0x3
  1125  000056                     	ds	1
  1126  000057                     ??_digitalWrite:
  1127  000057                     ??_pinMode:
  1128  000057                     ___awmod@counter:
  1129                           	callstack 0
  1130  000057                     ___wmul@product:
  1131                           	callstack 0
  1132  000057                     ___lwdiv@quotient:
  1133                           	callstack 0
  1134  000057                     ___aldiv@divisor:
  1135                           	callstack 0
  1136                           
  1137                           ; 4 bytes @ 0x4
  1138  000057                     	ds	1
  1139  000058                     kpReadKeyDown@key:
  1140                           	callstack 0
  1141  000058                     ___awmod@sign:
  1142                           	callstack 0
  1143                           
  1144                           ; 1 bytes @ 0x5
  1145  000058                     	ds	1
  1146  000059                     ??_updateSnake:
  1147  000059                     ?_random:
  1148                           	callstack 0
  1149  000059                     ___lwdiv@counter:
  1150                           	callstack 0
  1151  000059                     soWrite@value:
  1152                           	callstack 0
  1153                           
  1154                           ; 2 bytes @ 0x6
  1155  000059                     	ds	1
  1156  00005A                     ??_pwmSet:
  1157                           
  1158                           ; 1 bytes @ 0x7
  1159  00005A                     	ds	1
  1160  00005B                     ??_random:
  1161  00005B                     soWrite@i:
  1162                           	callstack 0
  1163  00005B                     updateSnake@i:
  1164                           	callstack 0
  1165  00005B                     ___aldiv@counter:
  1166                           	callstack 0
  1167                           
  1168                           ; 1 bytes @ 0x8
  1169  00005B                     	ds	1
  1170  00005C                     ??_kpDebounce:
  1171  00005C                     pwmSet@porcento:
  1172                           	callstack 0
  1173  00005C                     ___aldiv@sign:
  1174                           	callstack 0
  1175  00005C                     pushNibble@rs:
  1176                           	callstack 0
  1177  00005C                     pushByte@rs:
  1178                           	callstack 0
  1179                           
  1180                           ; 2 bytes @ 0x9
  1181  00005C                     	ds	1
  1182  00005D                     ?___lwmod:
  1183                           	callstack 0
  1184  00005D                     pwmSet@val:
  1185                           	callstack 0
  1186  00005D                     ___lwmod@dividend:
  1187                           	callstack 0
  1188  00005D                     ___aldiv@quotient:
  1189                           	callstack 0
  1190                           
  1191                           ; 4 bytes @ 0xA
  1192  00005D                     	ds	1
  1193  00005E                     ??_pushByte:
  1194  00005E                     pushNibble@value:
  1195                           	callstack 0
  1196                           
  1197                           ; 1 bytes @ 0xB
  1198  00005E                     	ds	1
  1199  00005F                     pushByte@value:
  1200                           	callstack 0
  1201  00005F                     kpDebounce@i:
  1202                           	callstack 0
  1203  00005F                     ___lwmod@divisor:
  1204                           	callstack 0
  1205                           
  1206                           ; 2 bytes @ 0xC
  1207  00005F                     	ds	1
  1208  000060                     lcdCommand@value:
  1209                           	callstack 0
  1210  000060                     lcdChar@value:
  1211                           	callstack 0
  1212                           
  1213                           ; 1 bytes @ 0xD
  1214  000060                     	ds	1
  1215  000061                     setPixel@y:
  1216                           	callstack 0
  1217  000061                     ___lwmod@counter:
  1218                           	callstack 0
  1219  000061                     lcdPosition@line:
  1220                           	callstack 0
  1221  000061                     lcdString@msg:
  1222                           	callstack 0
  1223  000061                     pwmFrequency@freq:
  1224                           	callstack 0
  1225                           
  1226                           ; 2 bytes @ 0xE
  1227  000061                     	ds	1
  1228  000062                     setPixel@val:
  1229                           	callstack 0
  1230                           
  1231                           ; 1 bytes @ 0xF
  1232  000062                     	ds	1
  1233  000063                     ??_lcdString:
  1234  000063                     ??_setPixel:
  1235  000063                     ??_readInput:
  1236  000063                     startNote@note:
  1237                           	callstack 0
  1238  000063                     lcdPosition@col:
  1239                           	callstack 0
  1240                           
  1241                           ; 2 bytes @ 0x10
  1242  000063                     	ds	1
  1243  000064                     ??_mixerUpdate:
  1244                           
  1245                           ; 1 bytes @ 0x11
  1246  000064                     	ds	1
  1247  000065                     lcdString@i:
  1248                           	callstack 0
  1249  000065                     _readInput$569:
  1250                           	callstack 0
  1251                           
  1252                           ; 2 bytes @ 0x12
  1253  000065                     	ds	1
  1254  000066                     setPixel@x_:
  1255                           	callstack 0
  1256                           
  1257                           ; 1 bytes @ 0x13
  1258  000066                     	ds	1
  1259  000067                     ??_displayMenuOption:
  1260  000067                     setPixel@i:
  1261                           	callstack 0
  1262  000067                     gameOver@i_559:
  1263                           	callstack 0
  1264  000067                     _readInput$570:
  1265                           	callstack 0
  1266                           
  1267                           ; 2 bytes @ 0x14
  1268  000067                     	ds	2
  1269  000069                     displayMenuOption@opt:
  1270                           	callstack 0
  1271  000069                     setPixel@x:
  1272                           	callstack 0
  1273  000069                     gameOver@i:
  1274                           	callstack 0
  1275  000069                     _readInput$571:
  1276                           	callstack 0
  1277                           
  1278                           ; 2 bytes @ 0x16
  1279  000069                     	ds	1
  1280  00006A                     ?_displayMenu:
  1281                           	callstack 0
  1282  00006A                     cleanScreean@x:
  1283                           	callstack 0
  1284                           
  1285                           ; 1 bytes @ 0x17
  1286  00006A                     	ds	1
  1287  00006B                     cleanScreean@y:
  1288                           	callstack 0
  1289  00006B                     _readInput$572:
  1290                           	callstack 0
  1291                           
  1292                           ; 2 bytes @ 0x18
  1293  00006B                     	ds	1
  1294  00006C                     ??_menuUpdate:
  1295  00006C                     rendererInit@i:
  1296                           	callstack 0
  1297                           
  1298                           ; 1 bytes @ 0x19
  1299  00006C                     	ds	1
  1300  00006D                     readInput@key:
  1301                           	callstack 0
  1302                           
  1303                           ; 1 bytes @ 0x1A
  1304  00006D                     	ds	1
  1305  00006E                     menuUpdate@key:
  1306                           	callstack 0
  1307                           
  1308                           ; 1 bytes @ 0x1B
  1309  00006E                     	ds	1
  1310  00006F                     
  1311                           ; 1 bytes @ 0x1C
  1312 ;;
  1313 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1314 ;;
  1315 ;; *************** function _main *****************
  1316 ;; Defined at:
  1317 ;;		line 88 in file "main.c"
  1318 ;; Parameters:    Size  Location     Type
  1319 ;;		None
  1320 ;; Auto vars:     Size  Location     Type
  1321 ;;		None
  1322 ;; Return value:  Size  Location     Type
  1323 ;;                  1    wreg      void 
  1324 ;; Registers used:
  1325 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1326 ;; Tracked objects:
  1327 ;;		On entry : 0/0
  1328 ;;		On exit  : 0/0
  1329 ;;		Unchanged: 0/0
  1330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1331 ;;      Params:         0       0       0       0       0       0       0
  1332 ;;      Locals:         0       0       0       0       0       0       0
  1333 ;;      Temps:          0       0       0       0       0       0       0
  1334 ;;      Totals:         0       0       0       0       0       0       0
  1335 ;;Total ram usage:        0 bytes
  1336 ;; Hardware stack levels required when called:    9
  1337 ;; This function calls:
  1338 ;;		_displayMenu
  1339 ;;		_gameInit
  1340 ;;		_gameStart
  1341 ;;		_gameUpdate
  1342 ;;		_menuUpdate
  1343 ;;		_newGame
  1344 ;; This function is called by:
  1345 ;;		Startup code after reset
  1346 ;; This function uses a non-reentrant model
  1347 ;;
  1348                           
  1349                           	psect	text0
  1350  006BF2                     __ptext0:
  1351                           	callstack 0
  1352  006BF2                     _main:
  1353                           	callstack 22
  1354  006BF2                     
  1355                           ;main.c: 89:     gameInit();
  1356  006BF2  EC43  F030         	call	_gameInit	;wreg free
  1357  006BF6                     l3346:
  1358                           
  1359                           ;main.c: 92:         if (status == STATUS_MENU) {
  1360  006BF6  5077               	movf	_status^0,w,c
  1361  006BF8  A4D8               	btfss	status,2,c
  1362  006BFA  EF01  F036         	goto	u2861
  1363  006BFE  EF03  F036         	goto	u2860
  1364  006C02                     u2861:
  1365  006C02  EF08  F036         	goto	l3350
  1366  006C06                     u2860:
  1367  006C06                     
  1368                           ;main.c: 93:             status = menuUpdate();
  1369  006C06  ECFA  F038         	call	_menuUpdate	;wreg free
  1370  006C0A  6E77               	movwf	_status^0,c
  1371                           
  1372                           ;main.c: 94:         } else if (status == STATUS_PLAYING) {
  1373  006C0C  EFFB  F035         	goto	l3346
  1374  006C10                     l3350:
  1375  006C10  0E02               	movlw	2
  1376  006C12  1877               	xorwf	_status^0,w,c
  1377  006C14  A4D8               	btfss	status,2,c
  1378  006C16  EF0F  F036         	goto	u2871
  1379  006C1A  EF11  F036         	goto	u2870
  1380  006C1E                     u2871:
  1381  006C1E  EF16  F036         	goto	l3354
  1382  006C22                     u2870:
  1383  006C22                     
  1384                           ;main.c: 95:             status = gameUpdate();
  1385  006C22  EC2E  F03B         	call	_gameUpdate	;wreg free
  1386  006C26  6E77               	movwf	_status^0,c
  1387                           
  1388                           ;main.c: 96:         } else if (status == STATUS_START) {
  1389  006C28  EFFB  F035         	goto	l3346
  1390  006C2C                     l3354:
  1391  006C2C  0477               	decf	_status^0,w,c
  1392  006C2E  A4D8               	btfss	status,2,c
  1393  006C30  EF1C  F036         	goto	u2881
  1394  006C34  EF1E  F036         	goto	u2880
  1395  006C38                     u2881:
  1396  006C38  EF24  F036         	goto	l3360
  1397  006C3C                     u2880:
  1398  006C3C                     
  1399                           ;main.c: 97:             gameStart();
  1400  006C3C  EC28  F030         	call	_gameStart	;wreg free
  1401  006C40                     
  1402                           ;main.c: 98:             status = STATUS_PLAYING;
  1403  006C40  0E02               	movlw	2
  1404  006C42  6E77               	movwf	_status^0,c
  1405                           
  1406                           ;main.c: 99:         } else if (status == STATUS_PAUSE) {
  1407  006C44  EFFB  F035         	goto	l3346
  1408  006C48                     l3360:
  1409  006C48  0E03               	movlw	3
  1410  006C4A  1877               	xorwf	_status^0,w,c
  1411  006C4C  A4D8               	btfss	status,2,c
  1412  006C4E  EF2B  F036         	goto	u2891
  1413  006C52  EF2D  F036         	goto	u2890
  1414  006C56                     u2891:
  1415  006C56  EF37  F036         	goto	l3366
  1416  006C5A                     u2890:
  1417  006C5A                     l3362:
  1418                           
  1419                           ;main.c: 100:             displayMenu(0);
  1420  006C5A  0E00               	movlw	0
  1421  006C5C  6E6B               	movwf	(?_displayMenu+1)^0,c
  1422  006C5E  0E00               	movlw	0
  1423  006C60  6E6A               	movwf	?_displayMenu^0,c
  1424  006C62  EC89  F032         	call	_displayMenu	;wreg free
  1425  006C66                     
  1426                           ;main.c: 101:             status = STATUS_MENU;
  1427  006C66  0E00               	movlw	0
  1428  006C68  6E77               	movwf	_status^0,c
  1429                           
  1430                           ;main.c: 102:         } else if (status == STATUS_GAME_OVER) {
  1431  006C6A  EFFB  F035         	goto	l3346
  1432  006C6E                     l3366:
  1433  006C6E  0E04               	movlw	4
  1434  006C70  1877               	xorwf	_status^0,w,c
  1435  006C72  A4D8               	btfss	status,2,c
  1436  006C74  EF3E  F036         	goto	u2901
  1437  006C78  EF40  F036         	goto	u2900
  1438  006C7C                     u2901:
  1439  006C7C  EF44  F036         	goto	l250
  1440  006C80                     u2900:
  1441  006C80                     
  1442                           ;main.c: 103:             newGame();
  1443  006C80  ECCE  F032         	call	_newGame	;wreg free
  1444  006C84  EF2D  F036         	goto	l3362
  1445  006C88                     l250:
  1446  006C88  EFFB  F035         	goto	l3346
  1447  006C8C  EF00  F000         	goto	start
  1448  006C90                     __end_of_main:
  1449                           	callstack 0
  1450                           
  1451 ;; *************** function _menuUpdate *****************
  1452 ;; Defined at:
  1453 ;;		line 42 in file "main.c"
  1454 ;; Parameters:    Size  Location     Type
  1455 ;;		None
  1456 ;; Auto vars:     Size  Location     Type
  1457 ;;  key             1   27[COMRAM] unsigned char 
  1458 ;; Return value:  Size  Location     Type
  1459 ;;                  1    wreg      unsigned char 
  1460 ;; Registers used:
  1461 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1462 ;; Tracked objects:
  1463 ;;		On entry : 0/0
  1464 ;;		On exit  : 0/0
  1465 ;;		Unchanged: 0/0
  1466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1467 ;;      Params:         0       0       0       0       0       0       0
  1468 ;;      Locals:         1       0       0       0       0       0       0
  1469 ;;      Temps:          2       0       0       0       0       0       0
  1470 ;;      Totals:         3       0       0       0       0       0       0
  1471 ;;Total ram usage:        3 bytes
  1472 ;; Hardware stack levels used:    1
  1473 ;; Hardware stack levels required when called:    8
  1474 ;; This function calls:
  1475 ;;		_displayMenu
  1476 ;;		_kpDebounce
  1477 ;;		_kpReadKey
  1478 ;;		_kpReadKeyDown
  1479 ;;		_mixerGetOutput
  1480 ;;		_mixerNextSong
  1481 ;;		_mixerSetOutput
  1482 ;;		_newGame
  1483 ;; This function is called by:
  1484 ;;		_main
  1485 ;; This function uses a non-reentrant model
  1486 ;;
  1487                           
  1488                           	psect	text1
  1489  0071F4                     __ptext1:
  1490                           	callstack 0
  1491  0071F4                     _menuUpdate:
  1492                           	callstack 22
  1493  0071F4                     
  1494                           ;main.c: 43:     char key;;main.c: 45:     kpDebounce();
  1495  0071F4  ECF7  F039         	call	_kpDebounce	;wreg free
  1496  0071F8                     
  1497                           ;main.c: 46:     if (kpReadKey() != key) {
  1498  0071F8  EC3B  F035         	call	_kpReadKey	;wreg free
  1499  0071FC  186E               	xorwf	menuUpdate@key^0,w,c
  1500  0071FE  B4D8               	btfsc	status,2,c
  1501  007200  EF04  F039         	goto	u2721
  1502  007204  EF06  F039         	goto	u2720
  1503  007208                     u2721:
  1504  007208  EF23  F039         	goto	l3226
  1505  00720C                     u2720:
  1506  00720C                     
  1507                           ;main.c: 47:         key = kpReadKeyDown();
  1508  00720C  ECDB  F030         	call	_kpReadKeyDown	;wreg free
  1509  007210  6E6E               	movwf	menuUpdate@key^0,c
  1510                           
  1511                           ;main.c: 49:         switch (key) {
  1512  007212  EF57  F039         	goto	l3248
  1513  007216                     l3198:
  1514                           
  1515                           ;main.c: 51:                 menu_opt++;
  1516  007216  2A3B               	incf	_menu_opt^0,f,c
  1517  007218                     l3200:
  1518                           
  1519                           ;main.c: 52:                 menu_opt %= 4;
  1520  007218  0E03               	movlw	3
  1521  00721A  163B               	andwf	_menu_opt^0,f,c
  1522  00721C                     l3202:
  1523                           
  1524                           ;main.c: 53:                 displayMenu(menu_opt);
  1525  00721C  C03B  F06A         	movff	_menu_opt,?_displayMenu
  1526  007220  6A6B               	clrf	(?_displayMenu+1)^0,c
  1527  007222  EC89  F032         	call	_displayMenu	;wreg free
  1528                           
  1529                           ;main.c: 54:                 break;
  1530  007226  EF23  F039         	goto	l3226
  1531  00722A                     l3204:
  1532                           
  1533                           ;main.c: 56:                 menu_opt--;
  1534  00722A  063B               	decf	_menu_opt^0,f,c
  1535  00722C                     
  1536                           ;main.c: 57:                 menu_opt += 4;
  1537  00722C  0E04               	movlw	4
  1538  00722E  263B               	addwf	_menu_opt^0,f,c
  1539  007230  EF0C  F039         	goto	l3200
  1540  007234                     l3212:
  1541                           
  1542                           ;main.c: 64:                         newGame();
  1543  007234  ECCE  F032         	call	_newGame	;wreg free
  1544  007238                     l3214:
  1545                           
  1546                           ;main.c: 65:                         return STATUS_START;
  1547  007238  0E01               	movlw	1
  1548  00723A  EF70  F039         	goto	l235
  1549  00723E                     l3222:
  1550                           
  1551                           ;main.c: 69:                         mixerNextSong();
  1552  00723E  EC0B  F032         	call	_mixerNextSong	;wreg free
  1553  007242  EF0E  F039         	goto	l3202
  1554  007246                     l3226:
  1555                           
  1556                           ;main.c: 71:                         return STATUS_MENU;
  1557  007246  0E00               	movlw	0
  1558  007248  EF70  F039         	goto	l235
  1559  00724C                     l3230:
  1560                           
  1561                           ;main.c: 73:                         if (mixerGetOutput() == MIXER_OUTPUT_SERIAL) {
  1562  00724C  EC16  F030         	call	_mixerGetOutput	;wreg free
  1563  007250  0900               	iorlw	0
  1564  007252  A4D8               	btfss	status,2,c
  1565  007254  EF2E  F039         	goto	u2731
  1566  007258  EF30  F039         	goto	u2730
  1567  00725C                     u2731:
  1568  00725C  EF35  F039         	goto	l3234
  1569  007260                     u2730:
  1570  007260                     
  1571                           ;main.c: 74:                             mixerSetOutput(MIXER_OUTPUT_BUZZER);
  1572  007260  0E01               	movlw	1
  1573  007262  EC1F  F030         	call	_mixerSetOutput
  1574                           
  1575                           ;main.c: 75:                         } else {
  1576  007266  EF0E  F039         	goto	l3202
  1577  00726A                     l3234:
  1578                           
  1579                           ;main.c: 76:                             mixerSetOutput(MIXER_OUTPUT_SERIAL);
  1580  00726A  0E00               	movlw	0
  1581  00726C  EC1F  F030         	call	_mixerSetOutput
  1582  007270  EF0E  F039         	goto	l3202
  1583  007274                     l3244:
  1584  007274  503B               	movf	_menu_opt^0,w,c
  1585  007276  6E6C               	movwf	??_menuUpdate^0,c
  1586  007278  6A6D               	clrf	(??_menuUpdate+1)^0,c
  1587                           
  1588                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1589                           ; Switch size 1, requested type "simple"
  1590                           ; Number of cases is 1, Range of values is 0 to 0
  1591                           ; switch strategies available:
  1592                           ; Name         Instructions Cycles
  1593                           ; simple_byte            4     3 (average)
  1594                           ;	Chosen strategy is simple_byte
  1595  00727A  506D               	movf	(??_menuUpdate+1)^0,w,c
  1596  00727C  0A00               	xorlw	0	; case 0
  1597  00727E  B4D8               	btfsc	status,2,c
  1598  007280  EF44  F039         	goto	l3408
  1599  007284  EF23  F039         	goto	l3226
  1600  007288                     l3408:
  1601                           
  1602                           ; Switch size 1, requested type "simple"
  1603                           ; Number of cases is 4, Range of values is 0 to 3
  1604                           ; switch strategies available:
  1605                           ; Name         Instructions Cycles
  1606                           ; simple_byte           13     7 (average)
  1607                           ;	Chosen strategy is simple_byte
  1608  007288  506C               	movf	??_menuUpdate^0,w,c
  1609  00728A  0A00               	xorlw	0	; case 0
  1610  00728C  B4D8               	btfsc	status,2,c
  1611  00728E  EF1A  F039         	goto	l3212
  1612  007292  0A01               	xorlw	1	; case 1
  1613  007294  B4D8               	btfsc	status,2,c
  1614  007296  EF1C  F039         	goto	l3214
  1615  00729A  0A03               	xorlw	3	; case 2
  1616  00729C  B4D8               	btfsc	status,2,c
  1617  00729E  EF1F  F039         	goto	l3222
  1618  0072A2  0A01               	xorlw	1	; case 3
  1619  0072A4  B4D8               	btfsc	status,2,c
  1620  0072A6  EF26  F039         	goto	l3230
  1621  0072AA  EF23  F039         	goto	l3226
  1622  0072AE                     l3248:
  1623  0072AE  506E               	movf	menuUpdate@key^0,w,c
  1624  0072B0  6E6C               	movwf	??_menuUpdate^0,c
  1625  0072B2  6A6D               	clrf	(??_menuUpdate+1)^0,c
  1626                           
  1627                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1628                           ; Switch size 1, requested type "simple"
  1629                           ; Number of cases is 1, Range of values is 0 to 0
  1630                           ; switch strategies available:
  1631                           ; Name         Instructions Cycles
  1632                           ; simple_byte            4     3 (average)
  1633                           ;	Chosen strategy is simple_byte
  1634  0072B4  506D               	movf	(??_menuUpdate+1)^0,w,c
  1635  0072B6  0A00               	xorlw	0	; case 0
  1636  0072B8  B4D8               	btfsc	status,2,c
  1637  0072BA  EF61  F039         	goto	l3410
  1638  0072BE  EF23  F039         	goto	l3226
  1639  0072C2                     l3410:
  1640                           
  1641                           ; Switch size 1, requested type "simple"
  1642                           ; Number of cases is 3, Range of values is 68 to 85
  1643                           ; switch strategies available:
  1644                           ; Name         Instructions Cycles
  1645                           ; simple_byte           10     6 (average)
  1646                           ;	Chosen strategy is simple_byte
  1647  0072C2  506C               	movf	??_menuUpdate^0,w,c
  1648  0072C4  0A44               	xorlw	68	; case 68
  1649  0072C6  B4D8               	btfsc	status,2,c
  1650  0072C8  EF0B  F039         	goto	l3198
  1651  0072CC  0A17               	xorlw	23	; case 83
  1652  0072CE  B4D8               	btfsc	status,2,c
  1653  0072D0  EF3A  F039         	goto	l3244
  1654  0072D4  0A06               	xorlw	6	; case 85
  1655  0072D6  B4D8               	btfsc	status,2,c
  1656  0072D8  EF15  F039         	goto	l3204
  1657  0072DC  EF23  F039         	goto	l3226
  1658  0072E0                     l235:
  1659  0072E0  0012               	return		;funcret
  1660  0072E2                     __end_of_menuUpdate:
  1661                           	callstack 0
  1662                           
  1663 ;; *************** function _mixerSetOutput *****************
  1664 ;; Defined at:
  1665 ;;		line 33 in file "mixer.c"
  1666 ;; Parameters:    Size  Location     Type
  1667 ;;  out             1    wreg     unsigned char 
  1668 ;; Auto vars:     Size  Location     Type
  1669 ;;  out             1    0[COMRAM] unsigned char 
  1670 ;; Return value:  Size  Location     Type
  1671 ;;                  1    wreg      void 
  1672 ;; Registers used:
  1673 ;;		wreg
  1674 ;; Tracked objects:
  1675 ;;		On entry : 0/0
  1676 ;;		On exit  : 0/0
  1677 ;;		Unchanged: 0/0
  1678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1679 ;;      Params:         0       0       0       0       0       0       0
  1680 ;;      Locals:         1       0       0       0       0       0       0
  1681 ;;      Temps:          0       0       0       0       0       0       0
  1682 ;;      Totals:         1       0       0       0       0       0       0
  1683 ;;Total ram usage:        1 bytes
  1684 ;; Hardware stack levels used:    1
  1685 ;; This function calls:
  1686 ;;		Nothing
  1687 ;; This function is called by:
  1688 ;;		_menuUpdate
  1689 ;; This function uses a non-reentrant model
  1690 ;;
  1691                           
  1692                           	psect	text2
  1693  00603E                     __ptext2:
  1694                           	callstack 0
  1695  00603E                     _mixerSetOutput:
  1696                           	callstack 29
  1697                           
  1698                           ;incstack = 0
  1699                           ;mixerSetOutput@out stored from wreg
  1700  00603E  6E53               	movwf	mixerSetOutput@out^0,c
  1701  006040                     
  1702                           ;mixer.c: 34:     mixer_output = out;
  1703  006040  C053  F035         	movff	mixerSetOutput@out,_mixer_output
  1704  006044  0012               	return		;funcret
  1705  006046                     __end_of_mixerSetOutput:
  1706                           	callstack 0
  1707                           
  1708 ;; *************** function _mixerNextSong *****************
  1709 ;; Defined at:
  1710 ;;		line 87 in file "mixer.c"
  1711 ;; Parameters:    Size  Location     Type
  1712 ;;		None
  1713 ;; Auto vars:     Size  Location     Type
  1714 ;;		None
  1715 ;; Return value:  Size  Location     Type
  1716 ;;                  1    wreg      void 
  1717 ;; Registers used:
  1718 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1719 ;; Tracked objects:
  1720 ;;		On entry : 0/0
  1721 ;;		On exit  : 0/0
  1722 ;;		Unchanged: 0/0
  1723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1724 ;;      Params:         0       0       0       0       0       0       0
  1725 ;;      Locals:         0       0       0       0       0       0       0
  1726 ;;      Temps:          0       0       0       0       0       0       0
  1727 ;;      Totals:         0       0       0       0       0       0       0
  1728 ;;Total ram usage:        0 bytes
  1729 ;; Hardware stack levels used:    1
  1730 ;; Hardware stack levels required when called:    1
  1731 ;; This function calls:
  1732 ;;		___awmod
  1733 ;; This function is called by:
  1734 ;;		_menuUpdate
  1735 ;; This function uses a non-reentrant model
  1736 ;;
  1737                           
  1738                           	psect	text3
  1739  006416                     __ptext3:
  1740                           	callstack 0
  1741  006416                     _mixerNextSong:
  1742                           	callstack 28
  1743  006416                     
  1744                           ;mixer.c: 88:     song_idx = (song_idx + 1)%3;
  1745  006416  0E01               	movlw	1
  1746  006418  2436               	addwf	_song_idx^0,w,c
  1747  00641A  6E53               	movwf	___awmod@dividend^0,c
  1748  00641C  6A54               	clrf	(___awmod@dividend+1)^0,c
  1749  00641E  0E00               	movlw	0
  1750  006420  2254               	addwfc	(___awmod@dividend+1)^0,f,c
  1751  006422  0E00               	movlw	0
  1752  006424  6E56               	movwf	(___awmod@divisor+1)^0,c
  1753  006426  0E03               	movlw	3
  1754  006428  6E55               	movwf	___awmod@divisor^0,c
  1755  00642A  EC48  F036         	call	___awmod	;wreg free
  1756  00642E  5053               	movf	?___awmod^0,w,c
  1757  006430  6E36               	movwf	_song_idx^0,c
  1758  006432                     
  1759                           ;mixer.c: 89:     song = playlist[song_idx];
  1760  006432  5036               	movf	_song_idx^0,w,c
  1761  006434  0D15               	mullw	21
  1762  006436  0E80               	movlw	low _playlist
  1763  006438  24F3               	addwf	243,w,c
  1764  00643A  6ED9               	movwf	fsr2l,c
  1765  00643C  0E00               	movlw	high _playlist
  1766  00643E  20F4               	addwfc	prodh,w,c
  1767  006440  6EDA               	movwf	fsr2h,c
  1768  006442  EE10  F03E         	lfsr	1,_song
  1769  006446  0E14               	movlw	20
  1770  006448                     u2511:
  1771  006448  CFDB FFE3          	movff	plusw2,plusw1
  1772  00644C  06E8               	decf	wreg,f,c
  1773  00644E  E2FC               	bc	u2511
  1774  006450  0012               	return		;funcret
  1775  006452                     __end_of_mixerNextSong:
  1776                           	callstack 0
  1777                           
  1778 ;; *************** function _displayMenu *****************
  1779 ;; Defined at:
  1780 ;;		line 33 in file "main.c"
  1781 ;; Parameters:    Size  Location     Type
  1782 ;;		None
  1783 ;; Auto vars:     Size  Location     Type
  1784 ;;		None
  1785 ;; Return value:  Size  Location     Type
  1786 ;;                  1    wreg      void 
  1787 ;; Registers used:
  1788 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1789 ;; Tracked objects:
  1790 ;;		On entry : 0/0
  1791 ;;		On exit  : 0/0
  1792 ;;		Unchanged: 0/0
  1793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1794 ;;      Params:         2       0       0       0       0       0       0
  1795 ;;      Locals:         0       0       0       0       0       0       0
  1796 ;;      Temps:          0       0       0       0       0       0       0
  1797 ;;      Totals:         2       0       0       0       0       0       0
  1798 ;;Total ram usage:        2 bytes
  1799 ;; Hardware stack levels used:    1
  1800 ;; Hardware stack levels required when called:    7
  1801 ;; This function calls:
  1802 ;;		_displayMenuOption
  1803 ;;		_lcdChar
  1804 ;;		_lcdCommand
  1805 ;;		_lcdPosition
  1806 ;; This function is called by:
  1807 ;;		_menuUpdate
  1808 ;;		_main
  1809 ;; This function uses a non-reentrant model
  1810 ;;
  1811                           
  1812                           	psect	text4
  1813  006512                     __ptext4:
  1814                           	callstack 0
  1815  006512                     _displayMenu:
  1816                           	callstack 22
  1817  006512                     
  1818                           ;main.c: 34:     lcdCommand(0x01);
  1819  006512  0E01               	movlw	1
  1820  006514  EC82  F030         	call	_lcdCommand
  1821                           
  1822                           ;main.c: 35:     lcdPosition(0,0);
  1823  006518  0E00               	movlw	0
  1824  00651A  6E62               	movwf	(lcdPosition@line+1)^0,c
  1825  00651C  0E00               	movlw	0
  1826  00651E  6E61               	movwf	lcdPosition@line^0,c
  1827  006520  0E00               	movlw	0
  1828  006522  6E64               	movwf	(lcdPosition@col+1)^0,c
  1829  006524  0E00               	movlw	0
  1830  006526  6E63               	movwf	lcdPosition@col^0,c
  1831  006528  ECD0  F031         	call	_lcdPosition	;wreg free
  1832                           
  1833                           ;main.c: 36:     lcdChar('>');
  1834  00652C  0E3E               	movlw	62
  1835  00652E  EC73  F030         	call	_lcdChar
  1836  006532                     
  1837                           ;main.c: 37:     displayMenuOption(menu_opt);
  1838  006532  503B               	movf	_menu_opt^0,w,c
  1839  006534  EC57  F037         	call	_displayMenuOption
  1840  006538                     
  1841                           ;main.c: 38:     lcdPosition(1, 0);
  1842  006538  0E00               	movlw	0
  1843  00653A  6E62               	movwf	(lcdPosition@line+1)^0,c
  1844  00653C  0E01               	movlw	1
  1845  00653E  6E61               	movwf	lcdPosition@line^0,c
  1846  006540  0E00               	movlw	0
  1847  006542  6E64               	movwf	(lcdPosition@col+1)^0,c
  1848  006544  0E00               	movlw	0
  1849  006546  6E63               	movwf	lcdPosition@col^0,c
  1850  006548  ECD0  F031         	call	_lcdPosition	;wreg free
  1851                           
  1852                           ;main.c: 39:     displayMenuOption((menu_opt + 1)%4);
  1853  00654C  283B               	incf	_menu_opt^0,w,c
  1854  00654E  0B03               	andlw	3
  1855  006550  EC57  F037         	call	_displayMenuOption
  1856  006554  0012               	return		;funcret
  1857  006556                     __end_of_displayMenu:
  1858                           	callstack 0
  1859                           
  1860 ;; *************** function _displayMenuOption *****************
  1861 ;; Defined at:
  1862 ;;		line 10 in file "main.c"
  1863 ;; Parameters:    Size  Location     Type
  1864 ;;  opt             1    wreg     unsigned char 
  1865 ;; Auto vars:     Size  Location     Type
  1866 ;;  opt             1   22[COMRAM] unsigned char 
  1867 ;; Return value:  Size  Location     Type
  1868 ;;                  1    wreg      void 
  1869 ;; Registers used:
  1870 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1871 ;; Tracked objects:
  1872 ;;		On entry : 0/0
  1873 ;;		On exit  : 0/0
  1874 ;;		Unchanged: 0/0
  1875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1876 ;;      Params:         0       0       0       0       0       0       0
  1877 ;;      Locals:         1       0       0       0       0       0       0
  1878 ;;      Temps:          2       0       0       0       0       0       0
  1879 ;;      Totals:         3       0       0       0       0       0       0
  1880 ;;Total ram usage:        3 bytes
  1881 ;; Hardware stack levels used:    1
  1882 ;; Hardware stack levels required when called:    6
  1883 ;; This function calls:
  1884 ;;		_lcdString
  1885 ;;		_mixerGetOutput
  1886 ;;		_mixerGetSongName
  1887 ;; This function is called by:
  1888 ;;		_displayMenu
  1889 ;; This function uses a non-reentrant model
  1890 ;;
  1891                           
  1892                           	psect	text5
  1893  006EAE                     __ptext5:
  1894                           	callstack 0
  1895  006EAE                     _displayMenuOption:
  1896                           	callstack 22
  1897                           
  1898                           ;incstack = 0
  1899                           ;displayMenuOption@opt stored from wreg
  1900  006EAE  6E69               	movwf	displayMenuOption@opt^0,c
  1901  006EB0                     
  1902                           ;main.c: 11:     switch (opt) {
  1903  006EB0  EF9A  F037         	goto	l2820
  1904  006EB4                     l2804:
  1905                           
  1906                           ;main.c: 13:             lcdString("Novo Jogo");
  1907  006EB4  0EC9               	movlw	low STR_1
  1908  006EB6  6E61               	movwf	lcdString@msg^0,c
  1909  006EB8  0E7F               	movlw	high STR_1
  1910  006EBA  6E62               	movwf	(lcdString@msg+1)^0,c
  1911  006EBC  EC77  F035         	call	_lcdString	;wreg free
  1912                           
  1913                           ;main.c: 14:             break;
  1914  006EC0  EFB7  F037         	goto	l221
  1915  006EC4                     l2806:
  1916                           
  1917                           ;main.c: 16:             lcdString("Continuar Jogo");
  1918  006EC4  0EAE               	movlw	low STR_2
  1919  006EC6  6E61               	movwf	lcdString@msg^0,c
  1920  006EC8  0E7F               	movlw	high STR_2
  1921  006ECA  6E62               	movwf	(lcdString@msg+1)^0,c
  1922  006ECC  EC77  F035         	call	_lcdString	;wreg free
  1923                           
  1924                           ;main.c: 17:             break;
  1925  006ED0  EFB7  F037         	goto	l221
  1926  006ED4                     l2808:
  1927                           
  1928                           ;main.c: 19:             lcdString("Mus: ");
  1929  006ED4  0EF8               	movlw	low STR_3
  1930  006ED6  6E61               	movwf	lcdString@msg^0,c
  1931  006ED8  0E7F               	movlw	high STR_3
  1932  006EDA  6E62               	movwf	(lcdString@msg+1)^0,c
  1933  006EDC  EC77  F035         	call	_lcdString	;wreg free
  1934                           
  1935                           ;main.c: 20:             lcdString(mixerGetSongName());
  1936  006EE0  EC2D  F030         	call	_mixerGetSongName	;wreg free
  1937  006EE4  C053  F061         	movff	?_mixerGetSongName,lcdString@msg
  1938  006EE8  C054  F062         	movff	?_mixerGetSongName+1,lcdString@msg+1
  1939  006EEC  EC77  F035         	call	_lcdString	;wreg free
  1940                           
  1941                           ;main.c: 21:             break;
  1942  006EF0  EFB7  F037         	goto	l221
  1943  006EF4                     l2810:
  1944                           
  1945                           ;main.c: 23:             lcdString("Som: ");
  1946  006EF4  0EF2               	movlw	low STR_4
  1947  006EF6  6E61               	movwf	lcdString@msg^0,c
  1948  006EF8  0E7F               	movlw	high STR_4
  1949  006EFA  6E62               	movwf	(lcdString@msg+1)^0,c
  1950  006EFC  EC77  F035         	call	_lcdString	;wreg free
  1951  006F00                     
  1952                           ;main.c: 24:             if (mixerGetOutput() == MIXER_OUTPUT_SERIAL) {
  1953  006F00  EC16  F030         	call	_mixerGetOutput	;wreg free
  1954  006F04  0900               	iorlw	0
  1955  006F06  A4D8               	btfss	status,2,c
  1956  006F08  EF88  F037         	goto	u2321
  1957  006F0C  EF8A  F037         	goto	u2320
  1958  006F10                     u2321:
  1959  006F10  EF92  F037         	goto	l2816
  1960  006F14                     u2320:
  1961  006F14                     
  1962                           ;main.c: 25:                 lcdString("serial");
  1963  006F14  0EE4               	movlw	low STR_5
  1964  006F16  6E61               	movwf	lcdString@msg^0,c
  1965  006F18  0E7F               	movlw	high STR_5
  1966  006F1A  6E62               	movwf	(lcdString@msg+1)^0,c
  1967  006F1C  EC77  F035         	call	_lcdString	;wreg free
  1968                           
  1969                           ;main.c: 26:             } else {
  1970  006F20  EFB7  F037         	goto	l221
  1971  006F24                     l2816:
  1972                           
  1973                           ;main.c: 27:                 lcdString("buzzer");
  1974  006F24  0EEB               	movlw	low STR_6
  1975  006F26  6E61               	movwf	lcdString@msg^0,c
  1976  006F28  0E7F               	movlw	high STR_6
  1977  006F2A  6E62               	movwf	(lcdString@msg+1)^0,c
  1978  006F2C  EC77  F035         	call	_lcdString	;wreg free
  1979  006F30  EFB7  F037         	goto	l221
  1980  006F34                     l2820:
  1981  006F34  5069               	movf	displayMenuOption@opt^0,w,c
  1982  006F36  6E67               	movwf	??_displayMenuOption^0,c
  1983  006F38  6A68               	clrf	(??_displayMenuOption+1)^0,c
  1984                           
  1985                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1986                           ; Switch size 1, requested type "simple"
  1987                           ; Number of cases is 1, Range of values is 0 to 0
  1988                           ; switch strategies available:
  1989                           ; Name         Instructions Cycles
  1990                           ; simple_byte            4     3 (average)
  1991                           ;	Chosen strategy is simple_byte
  1992  006F3A  5068               	movf	(??_displayMenuOption+1)^0,w,c
  1993  006F3C  0A00               	xorlw	0	; case 0
  1994  006F3E  B4D8               	btfsc	status,2,c
  1995  006F40  EFA4  F037         	goto	l3412
  1996  006F44  EFB7  F037         	goto	l221
  1997  006F48                     l3412:
  1998                           
  1999                           ; Switch size 1, requested type "simple"
  2000                           ; Number of cases is 4, Range of values is 0 to 3
  2001                           ; switch strategies available:
  2002                           ; Name         Instructions Cycles
  2003                           ; simple_byte           13     7 (average)
  2004                           ;	Chosen strategy is simple_byte
  2005  006F48  5067               	movf	??_displayMenuOption^0,w,c
  2006  006F4A  0A00               	xorlw	0	; case 0
  2007  006F4C  B4D8               	btfsc	status,2,c
  2008  006F4E  EF5A  F037         	goto	l2804
  2009  006F52  0A01               	xorlw	1	; case 1
  2010  006F54  B4D8               	btfsc	status,2,c
  2011  006F56  EF62  F037         	goto	l2806
  2012  006F5A  0A03               	xorlw	3	; case 2
  2013  006F5C  B4D8               	btfsc	status,2,c
  2014  006F5E  EF6A  F037         	goto	l2808
  2015  006F62  0A01               	xorlw	1	; case 3
  2016  006F64  B4D8               	btfsc	status,2,c
  2017  006F66  EF7A  F037         	goto	l2810
  2018  006F6A  EFB7  F037         	goto	l221
  2019  006F6E                     l221:
  2020  006F6E  0012               	return		;funcret
  2021  006F70                     __end_of_displayMenuOption:
  2022                           	callstack 0
  2023                           
  2024 ;; *************** function _mixerGetSongName *****************
  2025 ;; Defined at:
  2026 ;;		line 92 in file "mixer.c"
  2027 ;; Parameters:    Size  Location     Type
  2028 ;;		None
  2029 ;; Auto vars:     Size  Location     Type
  2030 ;;		None
  2031 ;; Return value:  Size  Location     Type
  2032 ;;                  2    0[COMRAM] PTR unsigned char 
  2033 ;; Registers used:
  2034 ;;		wreg, status,2, status,0
  2035 ;; Tracked objects:
  2036 ;;		On entry : 0/0
  2037 ;;		On exit  : 0/0
  2038 ;;		Unchanged: 0/0
  2039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2040 ;;      Params:         2       0       0       0       0       0       0
  2041 ;;      Locals:         0       0       0       0       0       0       0
  2042 ;;      Temps:          0       0       0       0       0       0       0
  2043 ;;      Totals:         2       0       0       0       0       0       0
  2044 ;;Total ram usage:        2 bytes
  2045 ;; Hardware stack levels used:    1
  2046 ;; This function calls:
  2047 ;;		Nothing
  2048 ;; This function is called by:
  2049 ;;		_displayMenuOption
  2050 ;; This function uses a non-reentrant model
  2051 ;;
  2052                           
  2053                           	psect	text6
  2054  00605A                     __ptext6:
  2055                           	callstack 0
  2056  00605A                     _mixerGetSongName:
  2057                           	callstack 27
  2058  00605A                     
  2059                           ;mixer.c: 93:     return song.name;
  2060  00605A  0E3E               	movlw	low _song
  2061  00605C  6E53               	movwf	?_mixerGetSongName^0,c
  2062  00605E  0E00               	movlw	high _song
  2063  006060  6E54               	movwf	(?_mixerGetSongName+1)^0,c
  2064  006062  0012               	return		;funcret
  2065  006064                     __end_of_mixerGetSongName:
  2066                           	callstack 0
  2067                           
  2068 ;; *************** function _mixerGetOutput *****************
  2069 ;; Defined at:
  2070 ;;		line 37 in file "mixer.c"
  2071 ;; Parameters:    Size  Location     Type
  2072 ;;		None
  2073 ;; Auto vars:     Size  Location     Type
  2074 ;;		None
  2075 ;; Return value:  Size  Location     Type
  2076 ;;                  1    wreg      unsigned char 
  2077 ;; Registers used:
  2078 ;;		wreg, status,2
  2079 ;; Tracked objects:
  2080 ;;		On entry : 0/0
  2081 ;;		On exit  : 0/0
  2082 ;;		Unchanged: 0/0
  2083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2084 ;;      Params:         0       0       0       0       0       0       0
  2085 ;;      Locals:         0       0       0       0       0       0       0
  2086 ;;      Temps:          0       0       0       0       0       0       0
  2087 ;;      Totals:         0       0       0       0       0       0       0
  2088 ;;Total ram usage:        0 bytes
  2089 ;; Hardware stack levels used:    1
  2090 ;; This function calls:
  2091 ;;		Nothing
  2092 ;; This function is called by:
  2093 ;;		_displayMenuOption
  2094 ;;		_menuUpdate
  2095 ;; This function uses a non-reentrant model
  2096 ;;
  2097                           
  2098                           	psect	text7
  2099  00602C                     __ptext7:
  2100                           	callstack 0
  2101  00602C                     _mixerGetOutput:
  2102                           	callstack 29
  2103  00602C                     
  2104                           ;mixer.c: 38:     return mixer_output;
  2105  00602C  5035               	movf	_mixer_output^0,w,c
  2106  00602E  0012               	return		;funcret
  2107  006030                     __end_of_mixerGetOutput:
  2108                           	callstack 0
  2109                           
  2110 ;; *************** function _gameUpdate *****************
  2111 ;; Defined at:
  2112 ;;		line 211 in file "game.c"
  2113 ;; Parameters:    Size  Location     Type
  2114 ;;		None
  2115 ;; Auto vars:     Size  Location     Type
  2116 ;;		None
  2117 ;; Return value:  Size  Location     Type
  2118 ;;                  1    wreg      unsigned char 
  2119 ;; Registers used:
  2120 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2121 ;; Tracked objects:
  2122 ;;		On entry : 0/0
  2123 ;;		On exit  : 0/0
  2124 ;;		Unchanged: 0/0
  2125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2126 ;;      Params:         0       0       0       0       0       0       0
  2127 ;;      Locals:         0       0       0       0       0       0       0
  2128 ;;      Temps:          0       0       0       0       0       0       0
  2129 ;;      Totals:         0       0       0       0       0       0       0
  2130 ;;Total ram usage:        0 bytes
  2131 ;; Hardware stack levels used:    1
  2132 ;; Hardware stack levels required when called:    7
  2133 ;; This function calls:
  2134 ;;		_checkCollision
  2135 ;;		_checkFood
  2136 ;;		_gameOver
  2137 ;;		_kpDebounce
  2138 ;;		_lcdChar
  2139 ;;		_lcdCommand
  2140 ;;		_mixerUpdate
  2141 ;;		_readInput
  2142 ;;		_setPixel
  2143 ;;		_timerReset
  2144 ;;		_timerWait
  2145 ;;		_updateSnake
  2146 ;; This function is called by:
  2147 ;;		_main
  2148 ;; This function uses a non-reentrant model
  2149 ;;
  2150                           
  2151                           	psect	text8
  2152  00765C                     __ptext8:
  2153                           	callstack 0
  2154  00765C                     _gameUpdate:
  2155                           	callstack 23
  2156  00765C                     
  2157                           ;game.c: 212:     timerReset(5000);
  2158  00765C  0E13               	movlw	19
  2159  00765E  6E54               	movwf	(timerReset@tempo+1)^0,c
  2160  007660  0E88               	movlw	136
  2161  007662  6E53               	movwf	timerReset@tempo^0,c
  2162  007664  EC91  F030         	call	_timerReset	;wreg free
  2163  007668                     
  2164                           ;game.c: 213:     mixerUpdate();
  2165  007668  ECB8  F037         	call	_mixerUpdate	;wreg free
  2166  00766C                     
  2167                           ;game.c: 215:     if (count < 30) {
  2168  00766C  0E1E               	movlw	30
  2169  00766E  6034               	cpfslt	_count^0,c
  2170  007670  EF3C  F03B         	goto	u2741
  2171  007674  EF3E  F03B         	goto	u2740
  2172  007678                     u2741:
  2173  007678  EF56  F03B         	goto	l3288
  2174  00767C                     u2740:
  2175  00767C                     
  2176                           ;game.c: 216:         if (count & 1) {
  2177  00767C  A034               	btfss	_count^0,0,c
  2178  00767E  EF43  F03B         	goto	u2751
  2179  007682  EF45  F03B         	goto	u2750
  2180  007686                     u2751:
  2181  007686  EF49  F03B         	goto	l3282
  2182  00768A                     u2750:
  2183  00768A                     
  2184                           ;game.c: 217:             kpDebounce();
  2185  00768A  ECF7  F039         	call	_kpDebounce	;wreg free
  2186                           
  2187                           ;game.c: 218:         }
  2188  00768E  EFD0  F03B         	goto	l3324
  2189  007692                     l3282:
  2190                           
  2191                           ;game.c: 220:             if (readInput() == STATUS_PAUSE) { return STATUS_PAUSE; }
  2192  007692  EC92  F03A         	call	_readInput	;wreg free
  2193  007696  0A03               	xorlw	3
  2194  007698  A4D8               	btfss	status,2,c
  2195  00769A  EF51  F03B         	goto	u2761
  2196  00769E  EF53  F03B         	goto	u2760
  2197  0076A2                     u2761:
  2198  0076A2  EFD0  F03B         	goto	l3324
  2199  0076A6                     u2760:
  2200  0076A6  0E03               	movlw	3
  2201  0076A8  EFD4  F03B         	goto	l639
  2202  0076AC                     l3288:
  2203  0076AC  0E1E               	movlw	30
  2204  0076AE  1834               	xorwf	_count^0,w,c
  2205  0076B0  A4D8               	btfss	status,2,c
  2206  0076B2  EF5D  F03B         	goto	u2771
  2207  0076B6  EF5F  F03B         	goto	u2770
  2208  0076BA                     u2771:
  2209  0076BA  EF63  F03B         	goto	l3292
  2210  0076BE                     u2770:
  2211  0076BE                     
  2212                           ;game.c: 224:         checkFood();
  2213  0076BE  ECC8  F034         	call	_checkFood	;wreg free
  2214                           
  2215                           ;game.c: 225:     } else if (count == 30 + 1) {
  2216  0076C2  EFD0  F03B         	goto	l3324
  2217  0076C6                     l3292:
  2218  0076C6  0E1F               	movlw	31
  2219  0076C8  1834               	xorwf	_count^0,w,c
  2220  0076CA  A4D8               	btfss	status,2,c
  2221  0076CC  EF6A  F03B         	goto	u2781
  2222  0076D0  EF6C  F03B         	goto	u2780
  2223  0076D4                     u2781:
  2224  0076D4  EF70  F03B         	goto	l3296
  2225  0076D8                     u2780:
  2226  0076D8                     
  2227                           ;game.c: 226:         updateSnake();
  2228  0076D8  EC21  F038         	call	_updateSnake	;wreg free
  2229                           
  2230                           ;game.c: 227:     } else if (count == 30 + 2) {
  2231  0076DC  EFD0  F03B         	goto	l3324
  2232  0076E0                     l3296:
  2233  0076E0  0E20               	movlw	32
  2234  0076E2  1834               	xorwf	_count^0,w,c
  2235  0076E4  A4D8               	btfss	status,2,c
  2236  0076E6  EF77  F03B         	goto	u2791
  2237  0076EA  EF79  F03B         	goto	u2790
  2238  0076EE                     u2791:
  2239  0076EE  EF88  F03B         	goto	l3306
  2240  0076F2                     u2790:
  2241  0076F2                     
  2242                           ;game.c: 228:         if (checkCollision()) {
  2243  0076F2  ECB6  F035         	call	_checkCollision	;wreg free
  2244  0076F6  0900               	iorlw	0
  2245  0076F8  B4D8               	btfsc	status,2,c
  2246  0076FA  EF81  F03B         	goto	u2801
  2247  0076FE  EF83  F03B         	goto	u2800
  2248  007702                     u2801:
  2249  007702  EFD0  F03B         	goto	l3324
  2250  007706                     u2800:
  2251  007706                     
  2252                           ;game.c: 229:             gameOver();
  2253  007706  ECFA  F036         	call	_gameOver	;wreg free
  2254  00770A                     
  2255                           ;game.c: 230:             return STATUS_GAME_OVER;
  2256  00770A  0E04               	movlw	4
  2257  00770C  EFD4  F03B         	goto	l639
  2258  007710                     l3306:
  2259  007710  0E21               	movlw	33
  2260  007712  1834               	xorwf	_count^0,w,c
  2261  007714  A4D8               	btfss	status,2,c
  2262  007716  EF8F  F03B         	goto	u2811
  2263  00771A  EF91  F03B         	goto	u2810
  2264  00771E                     u2811:
  2265  00771E  EF9A  F03B         	goto	l3310
  2266  007722                     u2810:
  2267  007722                     
  2268                           ;game.c: 234:         setPixel(snake[0].x, snake[0].y, 1);
  2269  007722  C002  F061         	movff	_snake+1,setPixel@y
  2270  007726  0E01               	movlw	1
  2271  007728  6E62               	movwf	setPixel@val^0,c
  2272  00772A  5001               	movf	_snake^0,w,c
  2273  00772C  EC8A  F038         	call	_setPixel
  2274                           
  2275                           ;game.c: 235:     } else if (count == 30 + 4) {
  2276  007730  EFD0  F03B         	goto	l3324
  2277  007734                     l3310:
  2278  007734  0E22               	movlw	34
  2279  007736  1834               	xorwf	_count^0,w,c
  2280  007738  A4D8               	btfss	status,2,c
  2281  00773A  EFA1  F03B         	goto	u2821
  2282  00773E  EFA3  F03B         	goto	u2820
  2283  007742                     u2821:
  2284  007742  EFAC  F03B         	goto	l3314
  2285  007746                     u2820:
  2286  007746                     
  2287                           ;game.c: 237:         setPixel(food.x, food.y, 1);
  2288  007746  C02C  F061         	movff	_food+1,setPixel@y
  2289  00774A  0E01               	movlw	1
  2290  00774C  6E62               	movwf	setPixel@val^0,c
  2291  00774E  502B               	movf	_food^0,w,c
  2292  007750  EC8A  F038         	call	_setPixel
  2293                           
  2294                           ;game.c: 238:     } else if (count == 30 + 5) {
  2295  007754  EFD0  F03B         	goto	l3324
  2296  007758                     l3314:
  2297  007758  0E23               	movlw	35
  2298  00775A  1834               	xorwf	_count^0,w,c
  2299  00775C  A4D8               	btfss	status,2,c
  2300  00775E  EFB3  F03B         	goto	u2831
  2301  007762  EFB5  F03B         	goto	u2830
  2302  007766                     u2831:
  2303  007766  EFBD  F03B         	goto	l3318
  2304  00776A                     u2830:
  2305  00776A                     
  2306                           ;game.c: 240:         lcdCommand(0x8C);
  2307  00776A  0E8C               	movlw	140
  2308  00776C  EC82  F030         	call	_lcdCommand
  2309                           
  2310                           ;game.c: 241:         lcdChar(points[0]);
  2311  007770  506F               	movf	_points^0,w,c
  2312  007772  EC73  F030         	call	_lcdChar
  2313                           
  2314                           ;game.c: 242:     } else if (count == 30 + 6) {
  2315  007776  EFD0  F03B         	goto	l3324
  2316  00777A                     l3318:
  2317  00777A  0E24               	movlw	36
  2318  00777C  1834               	xorwf	_count^0,w,c
  2319  00777E  A4D8               	btfss	status,2,c
  2320  007780  EFC4  F03B         	goto	u2841
  2321  007784  EFC6  F03B         	goto	u2840
  2322  007788                     u2841:
  2323  007788  EFCE  F03B         	goto	l3322
  2324  00778C                     u2840:
  2325  00778C                     
  2326                           ;game.c: 244:         lcdChar(points[1]);
  2327  00778C  5070               	movf	(_points+1)^0,w,c
  2328  00778E  EC73  F030         	call	_lcdChar
  2329                           
  2330                           ;game.c: 245:         lcdChar(points[2]);
  2331  007792  5071               	movf	(_points+2)^0,w,c
  2332  007794  EC73  F030         	call	_lcdChar
  2333                           
  2334                           ;game.c: 246:     } else {
  2335  007798  EFD0  F03B         	goto	l3324
  2336  00779C                     l3322:
  2337                           
  2338                           ;game.c: 247:         count = 0;
  2339  00779C  0E00               	movlw	0
  2340  00779E  6E34               	movwf	_count^0,c
  2341  0077A0                     l3324:
  2342                           
  2343                           ;game.c: 249:     count++;
  2344  0077A0  2A34               	incf	_count^0,f,c
  2345  0077A2                     
  2346                           ;game.c: 250:     timerWait();
  2347  0077A2  EC32  F030         	call	_timerWait	;wreg free
  2348  0077A6                     
  2349                           ;game.c: 252:     return STATUS_PLAYING;
  2350  0077A6  0E02               	movlw	2
  2351  0077A8                     l639:
  2352  0077A8  0012               	return		;funcret
  2353  0077AA                     __end_of_gameUpdate:
  2354                           	callstack 0
  2355                           
  2356 ;; *************** function _updateSnake *****************
  2357 ;; Defined at:
  2358 ;;		line 97 in file "game.c"
  2359 ;; Parameters:    Size  Location     Type
  2360 ;;		None
  2361 ;; Auto vars:     Size  Location     Type
  2362 ;;  i               1    8[COMRAM] unsigned char 
  2363 ;; Return value:  Size  Location     Type
  2364 ;;                  1    wreg      void 
  2365 ;; Registers used:
  2366 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2367 ;; Tracked objects:
  2368 ;;		On entry : 0/0
  2369 ;;		On exit  : 0/0
  2370 ;;		Unchanged: 0/0
  2371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2372 ;;      Params:         0       0       0       0       0       0       0
  2373 ;;      Locals:         1       0       0       0       0       0       0
  2374 ;;      Temps:          2       0       0       0       0       0       0
  2375 ;;      Totals:         3       0       0       0       0       0       0
  2376 ;;Total ram usage:        3 bytes
  2377 ;; Hardware stack levels used:    1
  2378 ;; Hardware stack levels required when called:    1
  2379 ;; This function calls:
  2380 ;;		___awmod
  2381 ;; This function is called by:
  2382 ;;		_gameUpdate
  2383 ;; This function uses a non-reentrant model
  2384 ;;
  2385                           
  2386                           	psect	text9
  2387  007042                     __ptext9:
  2388                           	callstack 0
  2389  007042                     _updateSnake:
  2390                           	callstack 28
  2391  007042                     
  2392                           ;game.c: 98:     unsigned char i;;game.c: 100:     for (i = snake_size; i > 0; i--) {
  2393  007042  C076  F05B         	movff	_snake_size,updateSnake@i
  2394  007046                     l3060:
  2395  007046  505B               	movf	updateSnake@i^0,w,c
  2396  007048  A4D8               	btfss	status,2,c
  2397  00704A  EF29  F038         	goto	u2611
  2398  00704E  EF2B  F038         	goto	u2610
  2399  007052                     u2611:
  2400  007052  EF2D  F038         	goto	l3064
  2401  007056                     u2610:
  2402  007056  EF48  F038         	goto	l573
  2403  00705A                     l3064:
  2404                           
  2405                           ;game.c: 101:         snake[i] = snake[i - 1];
  2406  00705A  505B               	movf	updateSnake@i^0,w,c
  2407  00705C  6E59               	movwf	??_updateSnake^0,c
  2408  00705E  6A5A               	clrf	(??_updateSnake+1)^0,c
  2409  007060  90D8               	bcf	status,0,c
  2410  007062  3659               	rlcf	??_updateSnake^0,f,c
  2411  007064  365A               	rlcf	(??_updateSnake+1)^0,f,c
  2412  007066  0EFF               	movlw	low (_snake+65534)
  2413  007068  2459               	addwf	??_updateSnake^0,w,c
  2414  00706A  6ED9               	movwf	fsr2l,c
  2415  00706C  0EFF               	movlw	high (_snake+65534)
  2416  00706E  205A               	addwfc	(??_updateSnake+1)^0,w,c
  2417  007070  6EDA               	movwf	fsr2h,c
  2418  007072  505B               	movf	updateSnake@i^0,w,c
  2419  007074  0D02               	mullw	2
  2420  007076  0E01               	movlw	low _snake
  2421  007078  24F3               	addwf	243,w,c
  2422  00707A  6EE1               	movwf	fsr1l,c
  2423  00707C  0E00               	movlw	high _snake
  2424  00707E  20F4               	addwfc	prodh,w,c
  2425  007080  6EE2               	movwf	fsr1h,c
  2426  007082  CFDE FFE6          	movff	postinc2,postinc1
  2427  007086  CFDD FFE5          	movff	postdec2,postdec1
  2428  00708A                     
  2429                           ;game.c: 102:     }
  2430  00708A  065B               	decf	updateSnake@i^0,f,c
  2431  00708C  EF23  F038         	goto	l3060
  2432  007090                     l573:
  2433                           
  2434                           ;game.c: 105:     moving = direction;
  2435  007090  C074  F075         	movff	_direction,_moving
  2436                           
  2437                           ;game.c: 106:     switch (moving) {
  2438  007094  EF58  F038         	goto	l3080
  2439  007098                     l3070:
  2440  007098  2A01               	incf	_snake^0,f,c
  2441                           
  2442                           ;game.c: 108:             break;
  2443  00709A  EF75  F038         	goto	l3082
  2444  00709E                     l3072:
  2445  00709E  0601               	decf	_snake^0,f,c
  2446                           
  2447                           ;game.c: 110:             break;
  2448  0070A0  EF75  F038         	goto	l3082
  2449  0070A4                     l3074:
  2450  0070A4  0602               	decf	(_snake+1)^0,f,c
  2451                           
  2452                           ;game.c: 112:             break;
  2453  0070A6  EF75  F038         	goto	l3082
  2454  0070AA                     l3076:
  2455  0070AA  2A02               	incf	(_snake+1)^0,f,c
  2456                           
  2457                           ;game.c: 114:             break;
  2458  0070AC  EF75  F038         	goto	l3082
  2459  0070B0                     l3080:
  2460  0070B0  5075               	movf	_moving^0,w,c
  2461  0070B2  6E59               	movwf	??_updateSnake^0,c
  2462  0070B4  6A5A               	clrf	(??_updateSnake+1)^0,c
  2463                           
  2464                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2465                           ; Switch size 1, requested type "simple"
  2466                           ; Number of cases is 1, Range of values is 0 to 0
  2467                           ; switch strategies available:
  2468                           ; Name         Instructions Cycles
  2469                           ; simple_byte            4     3 (average)
  2470                           ;	Chosen strategy is simple_byte
  2471  0070B6  505A               	movf	(??_updateSnake+1)^0,w,c
  2472  0070B8  0A00               	xorlw	0	; case 0
  2473  0070BA  B4D8               	btfsc	status,2,c
  2474  0070BC  EF62  F038         	goto	l3414
  2475  0070C0  EF75  F038         	goto	l3082
  2476  0070C4                     l3414:
  2477                           
  2478                           ; Switch size 1, requested type "simple"
  2479                           ; Number of cases is 4, Range of values is 68 to 85
  2480                           ; switch strategies available:
  2481                           ; Name         Instructions Cycles
  2482                           ; simple_byte           13     7 (average)
  2483                           ;	Chosen strategy is simple_byte
  2484  0070C4  5059               	movf	??_updateSnake^0,w,c
  2485  0070C6  0A44               	xorlw	68	; case 68
  2486  0070C8  B4D8               	btfsc	status,2,c
  2487  0070CA  EF55  F038         	goto	l3076
  2488  0070CE  0A08               	xorlw	8	; case 76
  2489  0070D0  B4D8               	btfsc	status,2,c
  2490  0070D2  EF4F  F038         	goto	l3072
  2491  0070D6  0A1E               	xorlw	30	; case 82
  2492  0070D8  B4D8               	btfsc	status,2,c
  2493  0070DA  EF4C  F038         	goto	l3070
  2494  0070DE  0A07               	xorlw	7	; case 85
  2495  0070E0  B4D8               	btfsc	status,2,c
  2496  0070E2  EF52  F038         	goto	l3074
  2497  0070E6  EF75  F038         	goto	l3082
  2498  0070EA                     l3082:
  2499                           
  2500                           ;game.c: 116:     snake[0].x = snake[0].x + (3*5);
  2501  0070EA  5001               	movf	_snake^0,w,c
  2502  0070EC  0F0F               	addlw	15
  2503  0070EE  6E01               	movwf	_snake^0,c
  2504  0070F0                     
  2505                           ;game.c: 117:     snake[0].x = snake[0].x % (3*5);
  2506  0070F0  C001  F053         	movff	_snake,___awmod@dividend
  2507  0070F4  6A54               	clrf	(___awmod@dividend+1)^0,c
  2508  0070F6  0E00               	movlw	0
  2509  0070F8  6E56               	movwf	(___awmod@divisor+1)^0,c
  2510  0070FA  0E0F               	movlw	15
  2511  0070FC  6E55               	movwf	___awmod@divisor^0,c
  2512  0070FE  EC48  F036         	call	___awmod	;wreg free
  2513  007102  5053               	movf	?___awmod^0,w,c
  2514  007104  6E01               	movwf	_snake^0,c
  2515  007106                     
  2516                           ;game.c: 118:     snake[0].y = snake[0].y + (2*8);
  2517  007106  5002               	movf	(_snake+1)^0,w,c
  2518  007108  0F10               	addlw	16
  2519  00710A  6E02               	movwf	(_snake+1)^0,c
  2520  00710C                     
  2521                           ;game.c: 119:     snake[0].y = snake[0].y % (2*8);
  2522  00710C  5002               	movf	(_snake+1)^0,w,c
  2523  00710E  0B0F               	andlw	15
  2524  007110  6E02               	movwf	(_snake+1)^0,c
  2525  007112  0012               	return		;funcret
  2526  007114                     __end_of_updateSnake:
  2527                           	callstack 0
  2528                           
  2529 ;; *************** function ___awmod *****************
  2530 ;; Defined at:
  2531 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\awmod.c"
  2532 ;; Parameters:    Size  Location     Type
  2533 ;;  dividend        2    0[COMRAM] int 
  2534 ;;  divisor         2    2[COMRAM] int 
  2535 ;; Auto vars:     Size  Location     Type
  2536 ;;  sign            1    5[COMRAM] unsigned char 
  2537 ;;  counter         1    4[COMRAM] unsigned char 
  2538 ;; Return value:  Size  Location     Type
  2539 ;;                  2    0[COMRAM] int 
  2540 ;; Registers used:
  2541 ;;		wreg, status,2, status,0
  2542 ;; Tracked objects:
  2543 ;;		On entry : 0/0
  2544 ;;		On exit  : 0/0
  2545 ;;		Unchanged: 0/0
  2546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2547 ;;      Params:         4       0       0       0       0       0       0
  2548 ;;      Locals:         2       0       0       0       0       0       0
  2549 ;;      Temps:          0       0       0       0       0       0       0
  2550 ;;      Totals:         6       0       0       0       0       0       0
  2551 ;;Total ram usage:        6 bytes
  2552 ;; Hardware stack levels used:    1
  2553 ;; This function calls:
  2554 ;;		Nothing
  2555 ;; This function is called by:
  2556 ;;		_mixerNextSong
  2557 ;;		_updateSnake
  2558 ;; This function uses a non-reentrant model
  2559 ;;
  2560                           
  2561                           	psect	text10
  2562  006C90                     __ptext10:
  2563                           	callstack 0
  2564  006C90                     ___awmod:
  2565                           	callstack 28
  2566  006C90  0E00               	movlw	0
  2567  006C92  6E58               	movwf	___awmod@sign^0,c
  2568  006C94  BE54               	btfsc	(___awmod@dividend+1)^0,7,c
  2569  006C96  EF51  F036         	goto	u2370
  2570  006C9A  EF4F  F036         	goto	u2371
  2571  006C9E                     u2371:
  2572  006C9E  EF57  F036         	goto	l2914
  2573  006CA2                     u2370:
  2574  006CA2  6C53               	negf	___awmod@dividend^0,c
  2575  006CA4  1E54               	comf	(___awmod@dividend+1)^0,f,c
  2576  006CA6  B0D8               	btfsc	status,0,c
  2577  006CA8  2A54               	incf	(___awmod@dividend+1)^0,f,c
  2578  006CAA  0E01               	movlw	1
  2579  006CAC  6E58               	movwf	___awmod@sign^0,c
  2580  006CAE                     l2914:
  2581  006CAE  BE56               	btfsc	(___awmod@divisor+1)^0,7,c
  2582  006CB0  EF5E  F036         	goto	u2380
  2583  006CB4  EF5C  F036         	goto	u2381
  2584  006CB8                     u2381:
  2585  006CB8  EF62  F036         	goto	l2918
  2586  006CBC                     u2380:
  2587  006CBC  6C55               	negf	___awmod@divisor^0,c
  2588  006CBE  1E56               	comf	(___awmod@divisor+1)^0,f,c
  2589  006CC0  B0D8               	btfsc	status,0,c
  2590  006CC2  2A56               	incf	(___awmod@divisor+1)^0,f,c
  2591  006CC4                     l2918:
  2592  006CC4  5055               	movf	___awmod@divisor^0,w,c
  2593  006CC6  1056               	iorwf	(___awmod@divisor+1)^0,w,c
  2594  006CC8  B4D8               	btfsc	status,2,c
  2595  006CCA  EF69  F036         	goto	u2391
  2596  006CCE  EF6B  F036         	goto	u2390
  2597  006CD2                     u2391:
  2598  006CD2  EF8F  F036         	goto	l2934
  2599  006CD6                     u2390:
  2600  006CD6  0E01               	movlw	1
  2601  006CD8  6E57               	movwf	___awmod@counter^0,c
  2602  006CDA  EF73  F036         	goto	l2924
  2603  006CDE                     l2922:
  2604  006CDE  90D8               	bcf	status,0,c
  2605  006CE0  3655               	rlcf	___awmod@divisor^0,f,c
  2606  006CE2  3656               	rlcf	(___awmod@divisor+1)^0,f,c
  2607  006CE4  2A57               	incf	___awmod@counter^0,f,c
  2608  006CE6                     l2924:
  2609  006CE6  AE56               	btfss	(___awmod@divisor+1)^0,7,c
  2610  006CE8  EF78  F036         	goto	u2401
  2611  006CEC  EF7A  F036         	goto	u2400
  2612  006CF0                     u2401:
  2613  006CF0  EF6F  F036         	goto	l2922
  2614  006CF4                     u2400:
  2615  006CF4                     l2926:
  2616  006CF4  5055               	movf	___awmod@divisor^0,w,c
  2617  006CF6  5C53               	subwf	___awmod@dividend^0,w,c
  2618  006CF8  5056               	movf	(___awmod@divisor+1)^0,w,c
  2619  006CFA  5854               	subwfb	(___awmod@dividend+1)^0,w,c
  2620  006CFC  A0D8               	btfss	status,0,c
  2621  006CFE  EF83  F036         	goto	u2411
  2622  006D02  EF85  F036         	goto	u2410
  2623  006D06                     u2411:
  2624  006D06  EF89  F036         	goto	l2930
  2625  006D0A                     u2410:
  2626  006D0A  5055               	movf	___awmod@divisor^0,w,c
  2627  006D0C  5E53               	subwf	___awmod@dividend^0,f,c
  2628  006D0E  5056               	movf	(___awmod@divisor+1)^0,w,c
  2629  006D10  5A54               	subwfb	(___awmod@dividend+1)^0,f,c
  2630  006D12                     l2930:
  2631  006D12  90D8               	bcf	status,0,c
  2632  006D14  3256               	rrcf	(___awmod@divisor+1)^0,f,c
  2633  006D16  3255               	rrcf	___awmod@divisor^0,f,c
  2634  006D18  2E57               	decfsz	___awmod@counter^0,f,c
  2635  006D1A  EF7A  F036         	goto	l2926
  2636  006D1E                     l2934:
  2637  006D1E  5058               	movf	___awmod@sign^0,w,c
  2638  006D20  B4D8               	btfsc	status,2,c
  2639  006D22  EF95  F036         	goto	u2421
  2640  006D26  EF97  F036         	goto	u2420
  2641  006D2A                     u2421:
  2642  006D2A  EF9B  F036         	goto	l2938
  2643  006D2E                     u2420:
  2644  006D2E  6C53               	negf	___awmod@dividend^0,c
  2645  006D30  1E54               	comf	(___awmod@dividend+1)^0,f,c
  2646  006D32  B0D8               	btfsc	status,0,c
  2647  006D34  2A54               	incf	(___awmod@dividend+1)^0,f,c
  2648  006D36                     l2938:
  2649  006D36  C053  F053         	movff	___awmod@dividend,?___awmod
  2650  006D3A  C054  F054         	movff	___awmod@dividend+1,?___awmod+1
  2651  006D3E  0012               	return		;funcret
  2652  006D40                     __end_of___awmod:
  2653                           	callstack 0
  2654                           
  2655 ;; *************** function _readInput *****************
  2656 ;; Defined at:
  2657 ;;		line 153 in file "game.c"
  2658 ;; Parameters:    Size  Location     Type
  2659 ;;		None
  2660 ;; Auto vars:     Size  Location     Type
  2661 ;;  key             1   26[COMRAM] unsigned char 
  2662 ;; Return value:  Size  Location     Type
  2663 ;;                  1    wreg      unsigned char 
  2664 ;; Registers used:
  2665 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2666 ;; Tracked objects:
  2667 ;;		On entry : 0/0
  2668 ;;		On exit  : 0/0
  2669 ;;		Unchanged: 0/0
  2670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2671 ;;      Params:         0       0       0       0       0       0       0
  2672 ;;      Locals:         9       0       0       0       0       0       0
  2673 ;;      Temps:          2       0       0       0       0       0       0
  2674 ;;      Totals:        11       0       0       0       0       0       0
  2675 ;;Total ram usage:       11 bytes
  2676 ;; Hardware stack levels used:    1
  2677 ;; Hardware stack levels required when called:    4
  2678 ;; This function calls:
  2679 ;;		_kpReadKeyDown
  2680 ;;		_mixerStop
  2681 ;;		_readSerialController
  2682 ;; This function is called by:
  2683 ;;		_gameUpdate
  2684 ;; This function uses a non-reentrant model
  2685 ;;
  2686                           
  2687                           	psect	text11
  2688  007524                     __ptext11:
  2689                           	callstack 0
  2690  007524                     _readInput:
  2691                           	callstack 25
  2692  007524                     
  2693                           ;game.c: 156:     char key = kpReadKeyDown();
  2694  007524  ECDB  F030         	call	_kpReadKeyDown	;wreg free
  2695  007528  6E6D               	movwf	readInput@key^0,c
  2696  00752A                     
  2697                           ;game.c: 157:     if (!key) {
  2698  00752A  506D               	movf	readInput@key^0,w,c
  2699  00752C  A4D8               	btfss	status,2,c
  2700  00752E  EF9B  F03A         	goto	u2641
  2701  007532  EF9D  F03A         	goto	u2640
  2702  007536                     u2641:
  2703  007536  EF0B  F03B         	goto	l3166
  2704  00753A                     u2640:
  2705  00753A                     
  2706                           ;game.c: 158:         key = readSerialController();
  2707  00753A  EC6C  F031         	call	_readSerialController	;wreg free
  2708  00753E  6E6D               	movwf	readInput@key^0,c
  2709  007540  EF0B  F03B         	goto	l3166
  2710  007544                     l3132:
  2711                           
  2712                           ;game.c: 163:             direction = (moving != 'L') ? key: direction;
  2713  007544  0E4C               	movlw	76
  2714  007546  1875               	xorwf	_moving^0,w,c
  2715  007548  A4D8               	btfss	status,2,c
  2716  00754A  EFA9  F03A         	goto	u2651
  2717  00754E  EFAB  F03A         	goto	u2650
  2718  007552                     u2651:
  2719  007552  EFB0  F03A         	goto	l600
  2720  007556                     u2650:
  2721  007556  C074  F065         	movff	_direction,_readInput$569
  2722  00755A  6A66               	clrf	(_readInput$569+1)^0,c
  2723  00755C  EFB3  F03A         	goto	l602
  2724  007560                     l600:
  2725  007560  C06D  F065         	movff	readInput@key,_readInput$569
  2726  007564  6A66               	clrf	(_readInput$569+1)^0,c
  2727  007566                     l602:
  2728  007566  C065  F074         	movff	_readInput$569,_direction
  2729  00756A                     
  2730                           ;game.c: 164:             random_seed += snake[0].x;
  2731  00756A  5001               	movf	_snake^0,w,c
  2732  00756C  2672               	addwf	_random_seed^0,f,c
  2733  00756E  0E00               	movlw	0
  2734  007570  2273               	addwfc	(_random_seed+1)^0,f,c
  2735                           
  2736                           ;game.c: 165:             break;
  2737  007572  EF2C  F03B         	goto	l3168
  2738  007576                     l3138:
  2739                           
  2740                           ;game.c: 167:             direction = (moving != 'R') ? key: direction;
  2741  007576  0E52               	movlw	82
  2742  007578  1875               	xorwf	_moving^0,w,c
  2743  00757A  A4D8               	btfss	status,2,c
  2744  00757C  EFC2  F03A         	goto	u2661
  2745  007580  EFC4  F03A         	goto	u2660
  2746  007584                     u2661:
  2747  007584  EFC9  F03A         	goto	l606
  2748  007588                     u2660:
  2749  007588  C074  F067         	movff	_direction,_readInput$570
  2750  00758C  6A68               	clrf	(_readInput$570+1)^0,c
  2751  00758E  EFCC  F03A         	goto	l608
  2752  007592                     l606:
  2753  007592  C06D  F067         	movff	readInput@key,_readInput$570
  2754  007596  6A68               	clrf	(_readInput$570+1)^0,c
  2755  007598                     l608:
  2756  007598  C067  F074         	movff	_readInput$570,_direction
  2757  00759C                     
  2758                           ;game.c: 168:             random_seed += snake[0].y;
  2759  00759C  5002               	movf	(_snake+1)^0,w,c
  2760  00759E  2672               	addwf	_random_seed^0,f,c
  2761  0075A0  0E00               	movlw	0
  2762  0075A2  2273               	addwfc	(_random_seed+1)^0,f,c
  2763                           
  2764                           ;game.c: 169:             break;
  2765  0075A4  EF2C  F03B         	goto	l3168
  2766  0075A8                     l3144:
  2767                           
  2768                           ;game.c: 171:             direction = (moving != 'D') ? key: direction;
  2769  0075A8  0E44               	movlw	68
  2770  0075AA  1875               	xorwf	_moving^0,w,c
  2771  0075AC  A4D8               	btfss	status,2,c
  2772  0075AE  EFDB  F03A         	goto	u2671
  2773  0075B2  EFDD  F03A         	goto	u2670
  2774  0075B6                     u2671:
  2775  0075B6  EFE2  F03A         	goto	l611
  2776  0075BA                     u2670:
  2777  0075BA  C074  F069         	movff	_direction,_readInput$571
  2778  0075BE  6A6A               	clrf	(_readInput$571+1)^0,c
  2779  0075C0  EFE5  F03A         	goto	l613
  2780  0075C4                     l611:
  2781  0075C4  C06D  F069         	movff	readInput@key,_readInput$571
  2782  0075C8  6A6A               	clrf	(_readInput$571+1)^0,c
  2783  0075CA                     l613:
  2784  0075CA  C069  F074         	movff	_readInput$571,_direction
  2785  0075CE                     
  2786                           ;game.c: 172:             random_seed -= snake[0].x;
  2787  0075CE  5001               	movf	_snake^0,w,c
  2788  0075D0  5E72               	subwf	_random_seed^0,f,c
  2789  0075D2  0E00               	movlw	0
  2790  0075D4  5A73               	subwfb	(_random_seed+1)^0,f,c
  2791                           
  2792                           ;game.c: 173:             break;
  2793  0075D6  EF2C  F03B         	goto	l3168
  2794  0075DA                     l3150:
  2795                           
  2796                           ;game.c: 175:             direction = (moving != 'U') ? key: direction;
  2797  0075DA  0E55               	movlw	85
  2798  0075DC  1875               	xorwf	_moving^0,w,c
  2799  0075DE  A4D8               	btfss	status,2,c
  2800  0075E0  EFF4  F03A         	goto	u2681
  2801  0075E4  EFF6  F03A         	goto	u2680
  2802  0075E8                     u2681:
  2803  0075E8  EFFB  F03A         	goto	l616
  2804  0075EC                     u2680:
  2805  0075EC  C074  F06B         	movff	_direction,_readInput$572
  2806  0075F0  6A6C               	clrf	(_readInput$572+1)^0,c
  2807  0075F2  EFFE  F03A         	goto	l618
  2808  0075F6                     l616:
  2809  0075F6  C06D  F06B         	movff	readInput@key,_readInput$572
  2810  0075FA  6A6C               	clrf	(_readInput$572+1)^0,c
  2811  0075FC                     l618:
  2812  0075FC  C06B  F074         	movff	_readInput$572,_direction
  2813  007600                     
  2814                           ;game.c: 176:             random_seed -= snake[0].y;
  2815  007600  5002               	movf	(_snake+1)^0,w,c
  2816  007602  5E72               	subwf	_random_seed^0,f,c
  2817  007604  0E00               	movlw	0
  2818  007606  5A73               	subwfb	(_random_seed+1)^0,f,c
  2819                           
  2820                           ;game.c: 177:             break;
  2821  007608  EF2C  F03B         	goto	l3168
  2822  00760C                     l3156:
  2823                           
  2824                           ;game.c: 179:             mixerStop();
  2825  00760C  EC18  F030         	call	_mixerStop	;wreg free
  2826  007610                     
  2827                           ;game.c: 180:             return STATUS_PAUSE;
  2828  007610  0E03               	movlw	3
  2829  007612  EF2D  F03B         	goto	l620
  2830  007616                     l3166:
  2831  007616  506D               	movf	readInput@key^0,w,c
  2832  007618  6E63               	movwf	??_readInput^0,c
  2833  00761A  6A64               	clrf	(??_readInput+1)^0,c
  2834                           
  2835                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2836                           ; Switch size 1, requested type "simple"
  2837                           ; Number of cases is 1, Range of values is 0 to 0
  2838                           ; switch strategies available:
  2839                           ; Name         Instructions Cycles
  2840                           ; simple_byte            4     3 (average)
  2841                           ;	Chosen strategy is simple_byte
  2842  00761C  5064               	movf	(??_readInput+1)^0,w,c
  2843  00761E  0A00               	xorlw	0	; case 0
  2844  007620  B4D8               	btfsc	status,2,c
  2845  007622  EF15  F03B         	goto	l3416
  2846  007626  EF2C  F03B         	goto	l3168
  2847  00762A                     l3416:
  2848                           
  2849                           ; Switch size 1, requested type "simple"
  2850                           ; Number of cases is 5, Range of values is 68 to 85
  2851                           ; switch strategies available:
  2852                           ; Name         Instructions Cycles
  2853                           ; simple_byte           16     9 (average)
  2854                           ;	Chosen strategy is simple_byte
  2855  00762A  5063               	movf	??_readInput^0,w,c
  2856  00762C  0A44               	xorlw	68	; case 68
  2857  00762E  B4D8               	btfsc	status,2,c
  2858  007630  EFED  F03A         	goto	l3150
  2859  007634  0A08               	xorlw	8	; case 76
  2860  007636  B4D8               	btfsc	status,2,c
  2861  007638  EFBB  F03A         	goto	l3138
  2862  00763C  0A1E               	xorlw	30	; case 82
  2863  00763E  B4D8               	btfsc	status,2,c
  2864  007640  EFA2  F03A         	goto	l3132
  2865  007644  0A01               	xorlw	1	; case 83
  2866  007646  B4D8               	btfsc	status,2,c
  2867  007648  EF06  F03B         	goto	l3156
  2868  00764C  0A06               	xorlw	6	; case 85
  2869  00764E  B4D8               	btfsc	status,2,c
  2870  007650  EFD4  F03A         	goto	l3144
  2871  007654  EF2C  F03B         	goto	l3168
  2872  007658                     l3168:
  2873                           
  2874                           ;game.c: 183:     return STATUS_PLAYING;
  2875  007658  0E02               	movlw	2
  2876  00765A                     l620:
  2877  00765A  0012               	return		;funcret
  2878  00765C                     __end_of_readInput:
  2879                           	callstack 0
  2880                           
  2881 ;; *************** function _readSerialController *****************
  2882 ;; Defined at:
  2883 ;;		line 142 in file "game.c"
  2884 ;; Parameters:    Size  Location     Type
  2885 ;;		None
  2886 ;; Auto vars:     Size  Location     Type
  2887 ;;  key             1    1[COMRAM] unsigned char 
  2888 ;; Return value:  Size  Location     Type
  2889 ;;                  1    wreg      unsigned char 
  2890 ;; Registers used:
  2891 ;;		wreg, status,2, status,0, cstack
  2892 ;; Tracked objects:
  2893 ;;		On entry : 0/0
  2894 ;;		On exit  : 0/0
  2895 ;;		Unchanged: 0/0
  2896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2897 ;;      Params:         0       0       0       0       0       0       0
  2898 ;;      Locals:         1       0       0       0       0       0       0
  2899 ;;      Temps:          0       0       0       0       0       0       0
  2900 ;;      Totals:         1       0       0       0       0       0       0
  2901 ;;Total ram usage:        1 bytes
  2902 ;; Hardware stack levels used:    1
  2903 ;; Hardware stack levels required when called:    1
  2904 ;; This function calls:
  2905 ;;		_serialRead
  2906 ;;		_serialSend
  2907 ;; This function is called by:
  2908 ;;		_readInput
  2909 ;; This function uses a non-reentrant model
  2910 ;;
  2911                           
  2912                           	psect	text12
  2913  0062D8                     __ptext12:
  2914                           	callstack 0
  2915  0062D8                     _readSerialController:
  2916                           	callstack 27
  2917  0062D8                     
  2918                           ;game.c: 143:     static char last_key = 0;;game.c: 144:     char key = serialRead();
  2919  0062D8  EC56  F031         	call	_serialRead	;wreg free
  2920  0062DC  6E54               	movwf	readSerialController@key^0,c
  2921  0062DE                     
  2922                           ;game.c: 145:     serialSend('!');
  2923  0062DE  0E21               	movlw	33
  2924  0062E0  EC4E  F030         	call	_serialSend
  2925  0062E4                     
  2926                           ;game.c: 146:     if (key != last_key) {
  2927  0062E4  5033               	movf	readSerialController@last_key^0,w,c
  2928  0062E6  1854               	xorwf	readSerialController@key^0,w,c
  2929  0062E8  B4D8               	btfsc	status,2,c
  2930  0062EA  EF79  F031         	goto	u2361
  2931  0062EE  EF7B  F031         	goto	u2360
  2932  0062F2                     u2361:
  2933  0062F2  EF80  F031         	goto	l2902
  2934  0062F6                     u2360:
  2935  0062F6                     
  2936                           ;game.c: 147:         last_key = key;
  2937  0062F6  C054  F033         	movff	readSerialController@key,readSerialController@last_key
  2938  0062FA                     
  2939                           ;game.c: 148:         return key;
  2940  0062FA  5054               	movf	readSerialController@key^0,w,c
  2941  0062FC  EF81  F031         	goto	l593
  2942  006300                     l2902:
  2943                           
  2944                           ;game.c: 150:     return 0;
  2945  006300  0E00               	movlw	0
  2946  006302                     l593:
  2947  006302  0012               	return		;funcret
  2948  006304                     __end_of_readSerialController:
  2949                           	callstack 0
  2950                           
  2951 ;; *************** function _serialRead *****************
  2952 ;; Defined at:
  2953 ;;		line 30 in file "serial.c"
  2954 ;; Parameters:    Size  Location     Type
  2955 ;;		None
  2956 ;; Auto vars:     Size  Location     Type
  2957 ;;  resp            1    0[COMRAM] unsigned char 
  2958 ;; Return value:  Size  Location     Type
  2959 ;;                  1    wreg      unsigned char 
  2960 ;; Registers used:
  2961 ;;		wreg, status,2, status,0
  2962 ;; Tracked objects:
  2963 ;;		On entry : 0/0
  2964 ;;		On exit  : 0/0
  2965 ;;		Unchanged: 0/0
  2966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2967 ;;      Params:         0       0       0       0       0       0       0
  2968 ;;      Locals:         1       0       0       0       0       0       0
  2969 ;;      Temps:          0       0       0       0       0       0       0
  2970 ;;      Totals:         1       0       0       0       0       0       0
  2971 ;;Total ram usage:        1 bytes
  2972 ;; Hardware stack levels used:    1
  2973 ;; This function calls:
  2974 ;;		Nothing
  2975 ;; This function is called by:
  2976 ;;		_readSerialController
  2977 ;; This function uses a non-reentrant model
  2978 ;;
  2979                           
  2980                           	psect	text13
  2981  0062AC                     __ptext13:
  2982                           	callstack 0
  2983  0062AC                     _serialRead:
  2984                           	callstack 27
  2985  0062AC                     
  2986                           ;serial.c: 31:     char resp = 0;
  2987  0062AC  0E00               	movlw	0
  2988  0062AE  6E53               	movwf	serialRead@resp^0,c
  2989  0062B0                     
  2990                           ;serial.c: 33:     if (((RCSTA) & (1<<(1))))
  2991  0062B0  A2AB               	btfss	171,1,c	;volatile
  2992  0062B2  EF5D  F031         	goto	u2151
  2993  0062B6  EF5F  F031         	goto	u2150
  2994  0062BA                     u2151:
  2995  0062BA  EF61  F031         	goto	l2686
  2996  0062BE                     u2150:
  2997  0062BE                     
  2998                           ;serial.c: 34:     {;serial.c: 35:         ((RCSTA) &= ~(1<<(4)));
  2999  0062BE  98AB               	bcf	171,4,c	;volatile
  3000                           
  3001                           ;serial.c: 36:         ((RCSTA) |= (1<<(4)));
  3002  0062C0  88AB               	bsf	171,4,c	;volatile
  3003  0062C2                     l2686:
  3004                           
  3005                           ;serial.c: 39:     if (((PIR1) & (1<<(5))))
  3006  0062C2  AA9E               	btfss	158,5,c	;volatile
  3007  0062C4  EF66  F031         	goto	u2161
  3008  0062C8  EF68  F031         	goto	u2160
  3009  0062CC                     u2161:
  3010  0062CC  EF6A  F031         	goto	l2690
  3011  0062D0                     u2160:
  3012  0062D0                     
  3013                           ;serial.c: 40:     {;serial.c: 41:         resp = RCREG;
  3014  0062D0  CFAE F053          	movff	4014,serialRead@resp	;volatile
  3015  0062D4                     l2690:
  3016                           
  3017                           ;serial.c: 43:     return resp;
  3018  0062D4  5053               	movf	serialRead@resp^0,w,c
  3019  0062D6  0012               	return		;funcret
  3020  0062D8                     __end_of_serialRead:
  3021                           	callstack 0
  3022                           
  3023 ;; *************** function _mixerStop *****************
  3024 ;; Defined at:
  3025 ;;		line 58 in file "mixer.c"
  3026 ;; Parameters:    Size  Location     Type
  3027 ;;		None
  3028 ;; Auto vars:     Size  Location     Type
  3029 ;;		None
  3030 ;; Return value:  Size  Location     Type
  3031 ;;                  1    wreg      void 
  3032 ;; Registers used:
  3033 ;;		wreg, status,2, status,0, cstack
  3034 ;; Tracked objects:
  3035 ;;		On entry : 0/0
  3036 ;;		On exit  : 0/0
  3037 ;;		Unchanged: 0/0
  3038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3039 ;;      Params:         0       0       0       0       0       0       0
  3040 ;;      Locals:         0       0       0       0       0       0       0
  3041 ;;      Temps:          0       0       0       0       0       0       0
  3042 ;;      Totals:         0       0       0       0       0       0       0
  3043 ;;Total ram usage:        0 bytes
  3044 ;; Hardware stack levels used:    1
  3045 ;; Hardware stack levels required when called:    3
  3046 ;; This function calls:
  3047 ;;		_stopNote
  3048 ;; This function is called by:
  3049 ;;		_readInput
  3050 ;; This function uses a non-reentrant model
  3051 ;;
  3052                           
  3053                           	psect	text14
  3054  006030                     __ptext14:
  3055                           	callstack 0
  3056  006030                     _mixerStop:
  3057                           	callstack 25
  3058  006030                     
  3059                           ;mixer.c: 59:     stopNote();
  3060  006030  EC02  F031         	call	_stopNote	;wreg free
  3061  006034  0012               	return		;funcret
  3062  006036                     __end_of_mixerStop:
  3063                           	callstack 0
  3064                           
  3065 ;; *************** function _kpReadKeyDown *****************
  3066 ;; Defined at:
  3067 ;;		line 30 in file "keypad.c"
  3068 ;; Parameters:    Size  Location     Type
  3069 ;;		None
  3070 ;; Auto vars:     Size  Location     Type
  3071 ;;  key             1    5[COMRAM] unsigned char 
  3072 ;; Return value:  Size  Location     Type
  3073 ;;                  1    wreg      unsigned char 
  3074 ;; Registers used:
  3075 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3076 ;; Tracked objects:
  3077 ;;		On entry : 0/0
  3078 ;;		On exit  : 0/0
  3079 ;;		Unchanged: 0/0
  3080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3081 ;;      Params:         0       0       0       0       0       0       0
  3082 ;;      Locals:         1       0       0       0       0       0       0
  3083 ;;      Temps:          0       0       0       0       0       0       0
  3084 ;;      Totals:         1       0       0       0       0       0       0
  3085 ;;Total ram usage:        1 bytes
  3086 ;; Hardware stack levels used:    1
  3087 ;; Hardware stack levels required when called:    1
  3088 ;; This function calls:
  3089 ;;		_kpReadKey
  3090 ;; This function is called by:
  3091 ;;		_menuUpdate
  3092 ;;		_readInput
  3093 ;; This function uses a non-reentrant model
  3094 ;;
  3095                           
  3096                           	psect	text15
  3097  0061B6                     __ptext15:
  3098                           	callstack 0
  3099  0061B6                     _kpReadKeyDown:
  3100                           	callstack 28
  3101  0061B6                     
  3102                           ;keypad.c: 31:     char key = kpReadKey();
  3103  0061B6  EC3B  F035         	call	_kpReadKey	;wreg free
  3104  0061BA  6E58               	movwf	kpReadKeyDown@key^0,c
  3105  0061BC                     
  3106                           ;keypad.c: 32:     if (key != last_key) {
  3107  0061BC  503D               	movf	_last_key^0,w,c
  3108  0061BE  1858               	xorwf	kpReadKeyDown@key^0,w,c
  3109  0061C0  B4D8               	btfsc	status,2,c
  3110  0061C2  EFE5  F030         	goto	u2311
  3111  0061C6  EFE7  F030         	goto	u2310
  3112  0061CA                     u2311:
  3113  0061CA  EFEC  F030         	goto	l2782
  3114  0061CE                     u2310:
  3115  0061CE                     
  3116                           ;keypad.c: 33:         last_key = key;
  3117  0061CE  C058  F03D         	movff	kpReadKeyDown@key,_last_key
  3118  0061D2                     
  3119                           ;keypad.c: 34:         return key;
  3120  0061D2  5058               	movf	kpReadKeyDown@key^0,w,c
  3121  0061D4  EFED  F030         	goto	l105
  3122  0061D8                     l2782:
  3123                           
  3124                           ;keypad.c: 36:     return 0;
  3125  0061D8  0E00               	movlw	0
  3126  0061DA                     l105:
  3127  0061DA  0012               	return		;funcret
  3128  0061DC                     __end_of_kpReadKeyDown:
  3129                           	callstack 0
  3130                           
  3131 ;; *************** function _kpReadKey *****************
  3132 ;; Defined at:
  3133 ;;		line 19 in file "keypad.c"
  3134 ;; Parameters:    Size  Location     Type
  3135 ;;		None
  3136 ;; Auto vars:     Size  Location     Type
  3137 ;;  i               2    3[COMRAM] int 
  3138 ;; Return value:  Size  Location     Type
  3139 ;;                  1    wreg      unsigned char 
  3140 ;; Registers used:
  3141 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  3142 ;; Tracked objects:
  3143 ;;		On entry : 0/0
  3144 ;;		On exit  : 0/0
  3145 ;;		Unchanged: 0/0
  3146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3147 ;;      Params:         0       0       0       0       0       0       0
  3148 ;;      Locals:         2       0       0       0       0       0       0
  3149 ;;      Temps:          3       0       0       0       0       0       0
  3150 ;;      Totals:         5       0       0       0       0       0       0
  3151 ;;Total ram usage:        5 bytes
  3152 ;; Hardware stack levels used:    1
  3153 ;; This function calls:
  3154 ;;		Nothing
  3155 ;; This function is called by:
  3156 ;;		_kpReadKeyDown
  3157 ;;		_menuUpdate
  3158 ;; This function uses a non-reentrant model
  3159 ;;
  3160                           
  3161                           	psect	text16
  3162  006A76                     __ptext16:
  3163                           	callstack 0
  3164  006A76                     _kpReadKey:
  3165                           	callstack 28
  3166  006A76                     
  3167                           ;keypad.c: 20:  int i;;keypad.c: 21:  for(i=0;i<10;i++){
  3168  006A76  0E00               	movlw	0
  3169  006A78  6E57               	movwf	(kpReadKey@i+1)^0,c
  3170  006A7A  0E00               	movlw	0
  3171  006A7C  6E56               	movwf	kpReadKey@i^0,c
  3172  006A7E                     l2620:
  3173                           
  3174                           ;keypad.c: 22:   if (((keys) & (1<<(i)))){
  3175  006A7E  C056  F053         	movff	kpReadKey@i,??_kpReadKey
  3176  006A82  0E01               	movlw	1
  3177  006A84  6E54               	movwf	(??_kpReadKey+1)^0,c
  3178  006A86  0E00               	movlw	0
  3179  006A88  6E55               	movwf	(??_kpReadKey+2)^0,c
  3180  006A8A  2A53               	incf	??_kpReadKey^0,f,c
  3181  006A8C  EF4B  F035         	goto	u2024
  3182  006A90                     u2025:
  3183  006A90  90D8               	bcf	status,0,c
  3184  006A92  3654               	rlcf	(??_kpReadKey+1)^0,f,c
  3185  006A94  3655               	rlcf	(??_kpReadKey+2)^0,f,c
  3186  006A96                     u2024:
  3187  006A96  2E53               	decfsz	??_kpReadKey^0,f,c
  3188  006A98  EF48  F035         	goto	u2025
  3189  006A9C  5031               	movf	_keys^0,w,c
  3190  006A9E  1654               	andwf	(??_kpReadKey+1)^0,f,c
  3191  006AA0  5032               	movf	(_keys+1)^0,w,c
  3192  006AA2  1655               	andwf	(??_kpReadKey+2)^0,f,c
  3193  006AA4  5054               	movf	(??_kpReadKey+1)^0,w,c
  3194  006AA6  1055               	iorwf	(??_kpReadKey+2)^0,w,c
  3195  006AA8  B4D8               	btfsc	status,2,c
  3196  006AAA  EF59  F035         	goto	u2031
  3197  006AAE  EF5B  F035         	goto	u2030
  3198  006AB2                     u2031:
  3199  006AB2  EF65  F035         	goto	l2626
  3200  006AB6                     u2030:
  3201  006AB6                     
  3202                           ;keypad.c: 23:    return charKey[i];
  3203  006AB6  0EED               	movlw	low _charKey
  3204  006AB8  2456               	addwf	kpReadKey@i^0,w,c
  3205  006ABA  6EF6               	movwf	tblptrl,c
  3206  006ABC  0E7D               	movlw	high _charKey
  3207  006ABE  2057               	addwfc	(kpReadKey@i+1)^0,w,c
  3208  006AC0  6EF7               	movwf	tblptrh,c
  3209  006AC2                     	if	0	;There are less than 3 active tblptr bytes
  3210  006AC2                     	endif
  3211  006AC2  0008               	tblrd		*
  3212  006AC4  50F5               	movf	tablat,w,c
  3213  006AC6  EF76  F035         	goto	l101
  3214  006ACA                     l2626:
  3215                           
  3216                           ;keypad.c: 25:  }
  3217  006ACA  4A56               	infsnz	kpReadKey@i^0,f,c
  3218  006ACC  2A57               	incf	(kpReadKey@i+1)^0,f,c
  3219  006ACE  BE57               	btfsc	(kpReadKey@i+1)^0,7,c
  3220  006AD0  EF73  F035         	goto	u2041
  3221  006AD4  5057               	movf	(kpReadKey@i+1)^0,w,c
  3222  006AD6  E109               	bnz	u2040
  3223  006AD8  0E0A               	movlw	10
  3224  006ADA  5C56               	subwf	kpReadKey@i^0,w,c
  3225  006ADC  A0D8               	btfss	status,0,c
  3226  006ADE  EF73  F035         	goto	u2041
  3227  006AE2  EF75  F035         	goto	u2040
  3228  006AE6                     u2041:
  3229  006AE6  EF3F  F035         	goto	l2620
  3230  006AEA                     u2040:
  3231  006AEA                     
  3232                           ;keypad.c: 27:  return 0;
  3233  006AEA  0E00               	movlw	0
  3234  006AEC                     l101:
  3235  006AEC  0012               	return		;funcret
  3236  006AEE                     __end_of_kpReadKey:
  3237                           	callstack 0
  3238                           
  3239 ;; *************** function _mixerUpdate *****************
  3240 ;; Defined at:
  3241 ;;		line 62 in file "mixer.c"
  3242 ;; Parameters:    Size  Location     Type
  3243 ;;		None
  3244 ;; Auto vars:     Size  Location     Type
  3245 ;;		None
  3246 ;; Return value:  Size  Location     Type
  3247 ;;                  1    wreg      void 
  3248 ;; Registers used:
  3249 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3250 ;; Tracked objects:
  3251 ;;		On entry : 0/0
  3252 ;;		On exit  : 0/0
  3253 ;;		Unchanged: 0/0
  3254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3255 ;;      Params:         0       0       0       0       0       0       0
  3256 ;;      Locals:         0       0       0       0       0       0       0
  3257 ;;      Temps:          3       0       0       0       0       0       0
  3258 ;;      Totals:         3       0       0       0       0       0       0
  3259 ;;Total ram usage:        3 bytes
  3260 ;; Hardware stack levels used:    1
  3261 ;; Hardware stack levels required when called:    3
  3262 ;; This function calls:
  3263 ;;		_startNote
  3264 ;;		_stopNote
  3265 ;; This function is called by:
  3266 ;;		_gameUpdate
  3267 ;; This function uses a non-reentrant model
  3268 ;;
  3269                           
  3270                           	psect	text17
  3271  006F70                     __ptext17:
  3272                           	callstack 0
  3273  006F70                     _mixerUpdate:
  3274                           	callstack 26
  3275  006F70                     
  3276                           ;mixer.c: 63:     if (note_time > 0) {
  3277  006F70  5039               	movf	_note_time^0,w,c
  3278  006F72  B4D8               	btfsc	status,2,c
  3279  006F74  EFBE  F037         	goto	u2571
  3280  006F78  EFC0  F037         	goto	u2570
  3281  006F7C                     u2571:
  3282  006F7C  EFC3  F037         	goto	l3034
  3283  006F80                     u2570:
  3284  006F80                     
  3285                           ;mixer.c: 64:         note_time--;
  3286  006F80  0639               	decf	_note_time^0,f,c
  3287                           
  3288                           ;mixer.c: 65:     }
  3289  006F82  EF20  F038         	goto	l474
  3290  006F86                     l3034:
  3291  006F86  5037               	movf	_playing_note^0,w,c
  3292  006F88  B4D8               	btfsc	status,2,c
  3293  006F8A  EFC9  F037         	goto	u2581
  3294  006F8E  EFCB  F037         	goto	u2580
  3295  006F92                     u2581:
  3296  006F92  EFD1  F037         	goto	l3040
  3297  006F96                     u2580:
  3298  006F96                     
  3299                           ;mixer.c: 67:         playing_note = 0;
  3300  006F96  0E00               	movlw	0
  3301  006F98  6E37               	movwf	_playing_note^0,c
  3302  006F9A                     
  3303                           ;mixer.c: 68:         stopNote();
  3304  006F9A  EC02  F031         	call	_stopNote	;wreg free
  3305                           
  3306                           ;mixer.c: 69:     }
  3307  006F9E  EF20  F038         	goto	l474
  3308  006FA2                     l3040:
  3309  006FA2  5038               	movf	_pause_time^0,w,c
  3310  006FA4  B4D8               	btfsc	status,2,c
  3311  006FA6  EFD7  F037         	goto	u2591
  3312  006FAA  EFD9  F037         	goto	u2590
  3313  006FAE                     u2591:
  3314  006FAE  EFDC  F037         	goto	l3044
  3315  006FB2                     u2590:
  3316  006FB2                     
  3317                           ;mixer.c: 71:         pause_time--;
  3318  006FB2  0638               	decf	_pause_time^0,f,c
  3319                           
  3320                           ;mixer.c: 72:     }
  3321  006FB4  EF20  F038         	goto	l474
  3322  006FB8                     l3044:
  3323                           
  3324                           ;mixer.c: 74:         if (current_note == *song.size) {
  3325  006FB8  EE20  F04D         	lfsr	2,_song+15
  3326  006FBC  CFDE FFF6          	movff	postinc2,tblptrl
  3327  006FC0  CFDD FFF7          	movff	postdec2,tblptrh
  3328  006FC4                     	if	0	;tblptru may be non-zero
  3329  006FC4                     	endif
  3330  006FC4                     	if	0	;tblptru may be non-zero
  3331  006FC4                     	endif
  3332  006FC4  0008               	tblrd		*
  3333  006FC6  50F5               	movf	tablat,w,c
  3334  006FC8  183A               	xorwf	_current_note^0,w,c
  3335  006FCA  A4D8               	btfss	status,2,c
  3336  006FCC  EFEA  F037         	goto	u2601
  3337  006FD0  EFEC  F037         	goto	u2600
  3338  006FD4                     u2601:
  3339  006FD4  EFEE  F037         	goto	l3048
  3340  006FD8                     u2600:
  3341  006FD8                     
  3342                           ;mixer.c: 75:             current_note = 0;
  3343  006FD8  0E00               	movlw	0
  3344  006FDA  6E3A               	movwf	_current_note^0,c
  3345  006FDC                     l3048:
  3346                           
  3347                           ;mixer.c: 77:         startNote(song.notes[current_note]);
  3348  006FDC  503A               	movf	_current_note^0,w,c
  3349  006FDE  244F               	addwf	(_song+17)^0,w,c
  3350  006FE0  6E64               	movwf	??_mixerUpdate^0,c
  3351  006FE2  0E00               	movlw	0
  3352  006FE4  2050               	addwfc	(_song+18)^0,w,c
  3353  006FE6  6E65               	movwf	(??_mixerUpdate+1)^0,c
  3354  006FE8  C064  FFF6         	movff	??_mixerUpdate,tblptrl
  3355  006FEC  C065  FFF7         	movff	??_mixerUpdate+1,tblptrh
  3356  006FF0                     	if	0	;tblptru may be non-zero
  3357  006FF0                     	endif
  3358  006FF0                     	if	0	;tblptru may be non-zero
  3359  006FF0                     	endif
  3360  006FF0  0008               	tblrd		*
  3361  006FF2  50F5               	movf	tablat,w,c
  3362  006FF4  ECAB  F032         	call	_startNote
  3363  006FF8                     
  3364                           ;mixer.c: 78:         note_time = song.duration[current_note];
  3365  006FF8  503A               	movf	_current_note^0,w,c
  3366  006FFA  2451               	addwf	(_song+19)^0,w,c
  3367  006FFC  6E64               	movwf	??_mixerUpdate^0,c
  3368  006FFE  0E00               	movlw	0
  3369  007000  2052               	addwfc	(_song+20)^0,w,c
  3370  007002  6E65               	movwf	(??_mixerUpdate+1)^0,c
  3371  007004  C064  FFF6         	movff	??_mixerUpdate,tblptrl
  3372  007008  C065  FFF7         	movff	??_mixerUpdate+1,tblptrh
  3373  00700C                     	if	0	;tblptru may be non-zero
  3374  00700C                     	endif
  3375  00700C                     	if	0	;tblptru may be non-zero
  3376  00700C                     	endif
  3377  00700C  0008               	tblrd		*
  3378  00700E  CFF5 F039          	movff	tablat,_note_time
  3379  007012                     
  3380                           ;mixer.c: 79:         playing_note = 1;
  3381  007012  0E01               	movlw	1
  3382  007014  6E37               	movwf	_playing_note^0,c
  3383  007016                     
  3384                           ;mixer.c: 81:         pause_time = song.duration[current_note] >> 3;
  3385  007016  503A               	movf	_current_note^0,w,c
  3386  007018  2451               	addwf	(_song+19)^0,w,c
  3387  00701A  6E64               	movwf	??_mixerUpdate^0,c
  3388  00701C  0E00               	movlw	0
  3389  00701E  2052               	addwfc	(_song+20)^0,w,c
  3390  007020  6E65               	movwf	(??_mixerUpdate+1)^0,c
  3391  007022  C064  FFF6         	movff	??_mixerUpdate,tblptrl
  3392  007026  C065  FFF7         	movff	??_mixerUpdate+1,tblptrh
  3393  00702A                     	if	0	;tblptru may be non-zero
  3394  00702A                     	endif
  3395  00702A                     	if	0	;tblptru may be non-zero
  3396  00702A                     	endif
  3397  00702A  0008               	tblrd		*
  3398  00702C  CFF5 F066          	movff	tablat,??_mixerUpdate+2
  3399  007030  90D8               	bcf	status,0,c
  3400  007032  3266               	rrcf	(??_mixerUpdate+2)^0,f,c
  3401  007034  90D8               	bcf	status,0,c
  3402  007036  3266               	rrcf	(??_mixerUpdate+2)^0,f,c
  3403  007038  90D8               	bcf	status,0,c
  3404  00703A  3066               	rrcf	(??_mixerUpdate+2)^0,w,c
  3405  00703C  6E38               	movwf	_pause_time^0,c
  3406  00703E                     
  3407                           ;mixer.c: 83:         current_note++;
  3408  00703E  2A3A               	incf	_current_note^0,f,c
  3409  007040                     l474:
  3410  007040  0012               	return		;funcret
  3411  007042                     __end_of_mixerUpdate:
  3412                           	callstack 0
  3413                           
  3414 ;; *************** function _stopNote *****************
  3415 ;; Defined at:
  3416 ;;		line 50 in file "mixer.c"
  3417 ;; Parameters:    Size  Location     Type
  3418 ;;		None
  3419 ;; Auto vars:     Size  Location     Type
  3420 ;;		None
  3421 ;; Return value:  Size  Location     Type
  3422 ;;                  1    wreg      void 
  3423 ;; Registers used:
  3424 ;;		wreg, status,2, status,0, cstack
  3425 ;; Tracked objects:
  3426 ;;		On entry : 0/0
  3427 ;;		On exit  : 0/0
  3428 ;;		Unchanged: 0/0
  3429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3430 ;;      Params:         0       0       0       0       0       0       0
  3431 ;;      Locals:         0       0       0       0       0       0       0
  3432 ;;      Temps:          0       0       0       0       0       0       0
  3433 ;;      Totals:         0       0       0       0       0       0       0
  3434 ;;Total ram usage:        0 bytes
  3435 ;; Hardware stack levels used:    1
  3436 ;; Hardware stack levels required when called:    2
  3437 ;; This function calls:
  3438 ;;		_pwmFrequency
  3439 ;;		_serialSend
  3440 ;; This function is called by:
  3441 ;;		_mixerStop
  3442 ;;		_mixerUpdate
  3443 ;; This function uses a non-reentrant model
  3444 ;;
  3445                           
  3446                           	psect	text18
  3447  006204                     __ptext18:
  3448                           	callstack 0
  3449  006204                     _stopNote:
  3450                           	callstack 25
  3451  006204                     
  3452                           ;mixer.c: 51:     if (mixer_output == MIXER_OUTPUT_SERIAL) {
  3453  006204  5035               	movf	_mixer_output^0,w,c
  3454  006206  A4D8               	btfss	status,2,c
  3455  006208  EF08  F031         	goto	u2171
  3456  00620C  EF0A  F031         	goto	u2170
  3457  006210                     u2171:
  3458  006210  EF0F  F031         	goto	l2708
  3459  006214                     u2170:
  3460  006214                     
  3461                           ;mixer.c: 52:         serialSend('0'-2);
  3462  006214  0E2E               	movlw	46
  3463  006216  EC4E  F030         	call	_serialSend
  3464                           
  3465                           ;mixer.c: 53:     } else {
  3466  00621A  EF15  F031         	goto	l461
  3467  00621E                     l2708:
  3468                           
  3469                           ;mixer.c: 54:         pwmFrequency(100000);
  3470  00621E  0E86               	movlw	134
  3471  006220  6E62               	movwf	(pwmFrequency@freq+1)^0,c
  3472  006222  0EA0               	movlw	160
  3473  006224  6E61               	movwf	pwmFrequency@freq^0,c
  3474  006226  ECA2  F030         	call	_pwmFrequency	;wreg free
  3475  00622A                     l461:
  3476  00622A  0012               	return		;funcret
  3477  00622C                     __end_of_stopNote:
  3478                           	callstack 0
  3479                           
  3480 ;; *************** function _startNote *****************
  3481 ;; Defined at:
  3482 ;;		line 41 in file "mixer.c"
  3483 ;; Parameters:    Size  Location     Type
  3484 ;;  note            1    wreg     unsigned char 
  3485 ;; Auto vars:     Size  Location     Type
  3486 ;;  note            1   16[COMRAM] unsigned char 
  3487 ;; Return value:  Size  Location     Type
  3488 ;;                  1    wreg      void 
  3489 ;; Registers used:
  3490 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3491 ;; Tracked objects:
  3492 ;;		On entry : 0/0
  3493 ;;		On exit  : 0/0
  3494 ;;		Unchanged: 0/0
  3495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3496 ;;      Params:         0       0       0       0       0       0       0
  3497 ;;      Locals:         1       0       0       0       0       0       0
  3498 ;;      Temps:          0       0       0       0       0       0       0
  3499 ;;      Totals:         1       0       0       0       0       0       0
  3500 ;;Total ram usage:        1 bytes
  3501 ;; Hardware stack levels used:    1
  3502 ;; Hardware stack levels required when called:    2
  3503 ;; This function calls:
  3504 ;;		_pwmFrequency
  3505 ;;		_pwmSet
  3506 ;;		_serialSend
  3507 ;; This function is called by:
  3508 ;;		_mixerUpdate
  3509 ;; This function uses a non-reentrant model
  3510 ;;
  3511                           
  3512                           	psect	text19
  3513  006556                     __ptext19:
  3514                           	callstack 0
  3515  006556                     _startNote:
  3516                           	callstack 26
  3517                           
  3518                           ;incstack = 0
  3519                           ;startNote@note stored from wreg
  3520  006556  6E63               	movwf	startNote@note^0,c
  3521  006558                     
  3522                           ;mixer.c: 42:     if (mixer_output == MIXER_OUTPUT_SERIAL) {
  3523  006558  5035               	movf	_mixer_output^0,w,c
  3524  00655A  A4D8               	btfss	status,2,c
  3525  00655C  EFB2  F032         	goto	u2351
  3526  006560  EFB4  F032         	goto	u2350
  3527  006564                     u2351:
  3528  006564  EFBA  F032         	goto	l2882
  3529  006568                     u2350:
  3530  006568                     
  3531                           ;mixer.c: 43:         serialSend(note + '0');
  3532  006568  5063               	movf	startNote@note^0,w,c
  3533  00656A  0F30               	addlw	48
  3534  00656C  EC4E  F030         	call	_serialSend
  3535                           
  3536                           ;mixer.c: 44:     } else {
  3537  006570  EFCD  F032         	goto	l456
  3538  006574                     l2882:
  3539                           
  3540                           ;mixer.c: 45:         pwmFrequency(notes_freq[note]);
  3541  006574  5063               	movf	startNote@note^0,w,c
  3542  006576  0D02               	mullw	2
  3543  006578  0EB1               	movlw	low _notes_freq
  3544  00657A  24F3               	addwf	243,w,c
  3545  00657C  6EF6               	movwf	tblptrl,c
  3546  00657E  0E7D               	movlw	high _notes_freq
  3547  006580  20F4               	addwfc	244,w,c
  3548  006582  6EF7               	movwf	tblptrh,c
  3549  006584                     	if	0	;There are less than 3 active tblptr bytes
  3550  006584                     	endif
  3551  006584  0009               	tblrd		*+
  3552  006586  CFF5 F061          	movff	tablat,pwmFrequency@freq
  3553  00658A  000A               	tblrd		*-
  3554  00658C  CFF5 F062          	movff	tablat,pwmFrequency@freq+1
  3555  006590  ECA2  F030         	call	_pwmFrequency	;wreg free
  3556  006594                     
  3557                           ;mixer.c: 46:         pwmSet(50);
  3558  006594  0E32               	movlw	50
  3559  006596  EC5B  F034         	call	_pwmSet
  3560  00659A                     l456:
  3561  00659A  0012               	return		;funcret
  3562  00659C                     __end_of_startNote:
  3563                           	callstack 0
  3564                           
  3565 ;; *************** function _serialSend *****************
  3566 ;; Defined at:
  3567 ;;		line 25 in file "serial.c"
  3568 ;; Parameters:    Size  Location     Type
  3569 ;;  c               1    wreg     unsigned char 
  3570 ;; Auto vars:     Size  Location     Type
  3571 ;;  c               1    0[COMRAM] unsigned char 
  3572 ;; Return value:  Size  Location     Type
  3573 ;;                  1    wreg      void 
  3574 ;; Registers used:
  3575 ;;		wreg
  3576 ;; Tracked objects:
  3577 ;;		On entry : 0/0
  3578 ;;		On exit  : 0/0
  3579 ;;		Unchanged: 0/0
  3580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3581 ;;      Params:         0       0       0       0       0       0       0
  3582 ;;      Locals:         1       0       0       0       0       0       0
  3583 ;;      Temps:          0       0       0       0       0       0       0
  3584 ;;      Totals:         1       0       0       0       0       0       0
  3585 ;;Total ram usage:        1 bytes
  3586 ;; Hardware stack levels used:    1
  3587 ;; This function calls:
  3588 ;;		Nothing
  3589 ;; This function is called by:
  3590 ;;		_startNote
  3591 ;;		_stopNote
  3592 ;;		_readSerialController
  3593 ;; This function uses a non-reentrant model
  3594 ;;
  3595                           
  3596                           	psect	text20
  3597  00609C                     __ptext20:
  3598                           	callstack 0
  3599  00609C                     _serialSend:
  3600                           	callstack 27
  3601                           
  3602                           ;incstack = 0
  3603                           ;serialSend@c stored from wreg
  3604  00609C  6E53               	movwf	serialSend@c^0,c
  3605  00609E                     l316:
  3606  00609E  A89E               	btfss	158,4,c	;volatile
  3607  0060A0  EF54  F030         	goto	u1981
  3608  0060A4  EF56  F030         	goto	u1980
  3609  0060A8                     u1981:
  3610  0060A8  EF4F  F030         	goto	l316
  3611  0060AC                     u1980:
  3612  0060AC                     
  3613                           ;serial.c: 27:     TXREG = c;
  3614  0060AC  C053  FFAD         	movff	serialSend@c,4013	;volatile
  3615  0060B0  0012               	return		;funcret
  3616  0060B2                     __end_of_serialSend:
  3617                           	callstack 0
  3618                           
  3619 ;; *************** function _pwmSet *****************
  3620 ;; Defined at:
  3621 ;;		line 24 in file "pwm.c"
  3622 ;; Parameters:    Size  Location     Type
  3623 ;;  porcento        1    wreg     unsigned char 
  3624 ;; Auto vars:     Size  Location     Type
  3625 ;;  porcento        1    9[COMRAM] unsigned char 
  3626 ;;  val             2   10[COMRAM] unsigned int 
  3627 ;; Return value:  Size  Location     Type
  3628 ;;                  1    wreg      void 
  3629 ;; Registers used:
  3630 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3631 ;; Tracked objects:
  3632 ;;		On entry : 0/0
  3633 ;;		On exit  : 0/0
  3634 ;;		Unchanged: 0/0
  3635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3636 ;;      Params:         0       0       0       0       0       0       0
  3637 ;;      Locals:         3       0       0       0       0       0       0
  3638 ;;      Temps:          2       0       0       0       0       0       0
  3639 ;;      Totals:         5       0       0       0       0       0       0
  3640 ;;Total ram usage:        5 bytes
  3641 ;; Hardware stack levels used:    1
  3642 ;; Hardware stack levels required when called:    1
  3643 ;; This function calls:
  3644 ;;		___lwdiv
  3645 ;;		___wmul
  3646 ;; This function is called by:
  3647 ;;		_startNote
  3648 ;; This function uses a non-reentrant model
  3649 ;;
  3650                           
  3651                           	psect	text21
  3652  0068B6                     __ptext21:
  3653                           	callstack 0
  3654  0068B6                     _pwmSet:
  3655                           	callstack 26
  3656                           
  3657                           ;incstack = 0
  3658                           ;pwmSet@porcento stored from wreg
  3659  0068B6  6E5C               	movwf	pwmSet@porcento^0,c
  3660  0068B8                     
  3661                           ;pwm.c: 24: void pwmSet(unsigned char porcento);pwm.c: 25: {;pwm.c: 31:  unsigned int va
      +                          l = ((unsigned int)porcento) *(PR2+1);
  3662  0068B8  0E01               	movlw	1
  3663  0068BA  24CB               	addwf	203,w,c	;volatile
  3664  0068BC  6E53               	movwf	___wmul@multiplier^0,c
  3665  0068BE  6A54               	clrf	(___wmul@multiplier+1)^0,c
  3666  0068C0  0E00               	movlw	0
  3667  0068C2  2254               	addwfc	(___wmul@multiplier+1)^0,f,c
  3668  0068C4  C05C  F055         	movff	pwmSet@porcento,___wmul@multiplicand
  3669  0068C8  6A56               	clrf	(___wmul@multiplicand+1)^0,c
  3670  0068CA  ECB5  F030         	call	___wmul	;wreg free
  3671  0068CE  C053  F05D         	movff	?___wmul,pwmSet@val
  3672  0068D2  C054  F05E         	movff	?___wmul+1,pwmSet@val+1
  3673  0068D6                     
  3674                           ;pwm.c: 33:     val = val / 25;
  3675  0068D6  C05D  F053         	movff	pwmSet@val,___lwdiv@dividend
  3676  0068DA  C05E  F054         	movff	pwmSet@val+1,___lwdiv@dividend+1
  3677  0068DE  0E00               	movlw	0
  3678  0068E0  6E56               	movwf	(___lwdiv@divisor+1)^0,c
  3679  0068E2  0E19               	movlw	25
  3680  0068E4  6E55               	movwf	___lwdiv@divisor^0,c
  3681  0068E6  EC01  F035         	call	___lwdiv	;wreg free
  3682  0068EA  C053  F05D         	movff	?___lwdiv,pwmSet@val
  3683  0068EE  C054  F05E         	movff	?___lwdiv+1,pwmSet@val+1
  3684  0068F2                     
  3685                           ;pwm.c: 35:  val &= 0x03ff;
  3686  0068F2  0EFF               	movlw	255
  3687  0068F4  165D               	andwf	pwmSet@val^0,f,c
  3688  0068F6  0E03               	movlw	3
  3689  0068F8  165E               	andwf	(pwmSet@val+1)^0,f,c
  3690  0068FA                     
  3691                           ;pwm.c: 37:  CCPR2L = val >> 2;
  3692  0068FA  C05D  F05A         	movff	pwmSet@val,??_pwmSet
  3693  0068FE  C05E  F05B         	movff	pwmSet@val+1,??_pwmSet+1
  3694  006902  90D8               	bcf	status,0,c
  3695  006904  325B               	rrcf	(??_pwmSet+1)^0,f,c
  3696  006906  325A               	rrcf	??_pwmSet^0,f,c
  3697  006908  90D8               	bcf	status,0,c
  3698  00690A  325B               	rrcf	(??_pwmSet+1)^0,f,c
  3699  00690C  325A               	rrcf	??_pwmSet^0,f,c
  3700  00690E  505A               	movf	??_pwmSet^0,w,c
  3701  006910  6EBB               	movwf	187,c	;volatile
  3702  006912                     
  3703                           ;pwm.c: 39:  CCP2CON |= (val & 0x0003) << 4;
  3704  006912  C05D  F05A         	movff	pwmSet@val,??_pwmSet	;volatile
  3705  006916  0E03               	movlw	3
  3706  006918  165A               	andwf	??_pwmSet^0,f,c
  3707  00691A  385A               	swapf	??_pwmSet^0,w,c
  3708  00691C  0BF0               	andlw	240
  3709  00691E  12BA               	iorwf	186,f,c	;volatile
  3710  006920  0012               	return		;funcret
  3711  006922                     __end_of_pwmSet:
  3712                           	callstack 0
  3713                           
  3714 ;; *************** function ___lwdiv *****************
  3715 ;; Defined at:
  3716 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\lwdiv.c"
  3717 ;; Parameters:    Size  Location     Type
  3718 ;;  dividend        2    0[COMRAM] unsigned int 
  3719 ;;  divisor         2    2[COMRAM] unsigned int 
  3720 ;; Auto vars:     Size  Location     Type
  3721 ;;  quotient        2    4[COMRAM] unsigned int 
  3722 ;;  counter         1    6[COMRAM] unsigned char 
  3723 ;; Return value:  Size  Location     Type
  3724 ;;                  2    0[COMRAM] unsigned int 
  3725 ;; Registers used:
  3726 ;;		wreg, status,2, status,0
  3727 ;; Tracked objects:
  3728 ;;		On entry : 0/0
  3729 ;;		On exit  : 0/0
  3730 ;;		Unchanged: 0/0
  3731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3732 ;;      Params:         4       0       0       0       0       0       0
  3733 ;;      Locals:         3       0       0       0       0       0       0
  3734 ;;      Temps:          0       0       0       0       0       0       0
  3735 ;;      Totals:         7       0       0       0       0       0       0
  3736 ;;Total ram usage:        7 bytes
  3737 ;; Hardware stack levels used:    1
  3738 ;; This function calls:
  3739 ;;		Nothing
  3740 ;; This function is called by:
  3741 ;;		_pwmSet
  3742 ;;		_lcdNumber
  3743 ;; This function uses a non-reentrant model
  3744 ;;
  3745                           
  3746                           	psect	text22
  3747  006A02                     __ptext22:
  3748                           	callstack 0
  3749  006A02                     ___lwdiv:
  3750                           	callstack 26
  3751  006A02  0E00               	movlw	0
  3752  006A04  6E58               	movwf	(___lwdiv@quotient+1)^0,c
  3753  006A06  0E00               	movlw	0
  3754  006A08  6E57               	movwf	___lwdiv@quotient^0,c
  3755  006A0A  5055               	movf	___lwdiv@divisor^0,w,c
  3756  006A0C  1056               	iorwf	(___lwdiv@divisor+1)^0,w,c
  3757  006A0E  B4D8               	btfsc	status,2,c
  3758  006A10  EF0C  F035         	goto	u1991
  3759  006A14  EF0E  F035         	goto	u1990
  3760  006A18                     u1991:
  3761  006A18  EF36  F035         	goto	l1168
  3762  006A1C                     u1990:
  3763  006A1C  0E01               	movlw	1
  3764  006A1E  6E59               	movwf	___lwdiv@counter^0,c
  3765  006A20  EF16  F035         	goto	l2600
  3766  006A24                     l2598:
  3767  006A24  90D8               	bcf	status,0,c
  3768  006A26  3655               	rlcf	___lwdiv@divisor^0,f,c
  3769  006A28  3656               	rlcf	(___lwdiv@divisor+1)^0,f,c
  3770  006A2A  2A59               	incf	___lwdiv@counter^0,f,c
  3771  006A2C                     l2600:
  3772  006A2C  AE56               	btfss	(___lwdiv@divisor+1)^0,7,c
  3773  006A2E  EF1B  F035         	goto	u2001
  3774  006A32  EF1D  F035         	goto	u2000
  3775  006A36                     u2001:
  3776  006A36  EF12  F035         	goto	l2598
  3777  006A3A                     u2000:
  3778  006A3A                     l2602:
  3779  006A3A  90D8               	bcf	status,0,c
  3780  006A3C  3657               	rlcf	___lwdiv@quotient^0,f,c
  3781  006A3E  3658               	rlcf	(___lwdiv@quotient+1)^0,f,c
  3782  006A40  5055               	movf	___lwdiv@divisor^0,w,c
  3783  006A42  5C53               	subwf	___lwdiv@dividend^0,w,c
  3784  006A44  5056               	movf	(___lwdiv@divisor+1)^0,w,c
  3785  006A46  5854               	subwfb	(___lwdiv@dividend+1)^0,w,c
  3786  006A48  A0D8               	btfss	status,0,c
  3787  006A4A  EF29  F035         	goto	u2011
  3788  006A4E  EF2B  F035         	goto	u2010
  3789  006A52                     u2011:
  3790  006A52  EF30  F035         	goto	l2610
  3791  006A56                     u2010:
  3792  006A56  5055               	movf	___lwdiv@divisor^0,w,c
  3793  006A58  5E53               	subwf	___lwdiv@dividend^0,f,c
  3794  006A5A  5056               	movf	(___lwdiv@divisor+1)^0,w,c
  3795  006A5C  5A54               	subwfb	(___lwdiv@dividend+1)^0,f,c
  3796  006A5E  8057               	bsf	___lwdiv@quotient^0,0,c
  3797  006A60                     l2610:
  3798  006A60  90D8               	bcf	status,0,c
  3799  006A62  3256               	rrcf	(___lwdiv@divisor+1)^0,f,c
  3800  006A64  3255               	rrcf	___lwdiv@divisor^0,f,c
  3801  006A66  2E59               	decfsz	___lwdiv@counter^0,f,c
  3802  006A68  EF1D  F035         	goto	l2602
  3803  006A6C                     l1168:
  3804  006A6C  C057  F053         	movff	___lwdiv@quotient,?___lwdiv
  3805  006A70  C058  F054         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3806  006A74  0012               	return		;funcret
  3807  006A76                     __end_of___lwdiv:
  3808                           	callstack 0
  3809                           
  3810 ;; *************** function _kpDebounce *****************
  3811 ;; Defined at:
  3812 ;;		line 39 in file "keypad.c"
  3813 ;; Parameters:    Size  Location     Type
  3814 ;;		None
  3815 ;; Auto vars:     Size  Location     Type
  3816 ;;  i               2   12[COMRAM] int 
  3817 ;; Return value:  Size  Location     Type
  3818 ;;                  1    wreg      void 
  3819 ;; Registers used:
  3820 ;;		wreg, status,2, status,0, cstack
  3821 ;; Tracked objects:
  3822 ;;		On entry : 0/0
  3823 ;;		On exit  : 0/0
  3824 ;;		Unchanged: 0/0
  3825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3826 ;;      Params:         0       0       0       0       0       0       0
  3827 ;;      Locals:         2       0       0       0       0       0       0
  3828 ;;      Temps:          3       0       0       0       0       0       0
  3829 ;;      Totals:         5       0       0       0       0       0       0
  3830 ;;Total ram usage:        5 bytes
  3831 ;; Hardware stack levels used:    1
  3832 ;; Hardware stack levels required when called:    3
  3833 ;; This function calls:
  3834 ;;		_digitalRead
  3835 ;;		_soWrite
  3836 ;; This function is called by:
  3837 ;;		_menuUpdate
  3838 ;;		_gameUpdate
  3839 ;; This function uses a non-reentrant model
  3840 ;;
  3841                           
  3842                           	psect	text23
  3843  0073EE                     __ptext23:
  3844                           	callstack 0
  3845  0073EE                     _kpDebounce:
  3846                           	callstack 26
  3847  0073EE                     
  3848                           ;keypad.c: 40:     int i;;keypad.c: 41:     static unsigned char tempo;;keypad.c: 42:   
      +                            static unsigned int newRead;;keypad.c: 43:     static unsigned int oldRead;;keypad.c: 
      +                          44:     newRead = 0;
  3849  0073EE  0E00               	movlw	0
  3850  0073F0  6E30               	movwf	(kpDebounce@newRead+1)^0,c
  3851  0073F2  0E00               	movlw	0
  3852  0073F4  6E2F               	movwf	kpDebounce@newRead^0,c
  3853                           
  3854                           ;keypad.c: 45:     for(i = 0; i<5; i++){
  3855  0073F6  0E00               	movlw	0
  3856  0073F8  6E60               	movwf	(kpDebounce@i+1)^0,c
  3857  0073FA  0E00               	movlw	0
  3858  0073FC  6E5F               	movwf	kpDebounce@i^0,c
  3859  0073FE                     l2944:
  3860  0073FE  BE60               	btfsc	(kpDebounce@i+1)^0,7,c
  3861  007400  EF0B  F03A         	goto	u2431
  3862  007404  5060               	movf	(kpDebounce@i+1)^0,w,c
  3863  007406  E109               	bnz	u2430
  3864  007408  0E05               	movlw	5
  3865  00740A  5C5F               	subwf	kpDebounce@i^0,w,c
  3866  00740C  A0D8               	btfss	status,0,c
  3867  00740E  EF0B  F03A         	goto	u2431
  3868  007412  EF0D  F03A         	goto	u2430
  3869  007416                     u2431:
  3870  007416  EF0F  F03A         	goto	l2948
  3871  00741A                     u2430:
  3872  00741A  EF70  F03A         	goto	l2960
  3873  00741E                     l2948:
  3874                           
  3875                           ;keypad.c: 47:       soWrite(1<<(i+3));
  3876  00741E  C05F  F05C         	movff	kpDebounce@i,??_kpDebounce
  3877  007422  0E03               	movlw	3
  3878  007424  265C               	addwf	??_kpDebounce^0,f,c
  3879  007426  0E01               	movlw	1
  3880  007428  6E5D               	movwf	(??_kpDebounce+1)^0,c
  3881  00742A  0E00               	movlw	0
  3882  00742C  6E5E               	movwf	(??_kpDebounce+2)^0,c
  3883  00742E  2A5C               	incf	??_kpDebounce^0,f,c
  3884  007430  EF1D  F03A         	goto	u2444
  3885  007434                     u2445:
  3886  007434  90D8               	bcf	status,0,c
  3887  007436  365D               	rlcf	(??_kpDebounce+1)^0,f,c
  3888  007438  365E               	rlcf	(??_kpDebounce+2)^0,f,c
  3889  00743A                     u2444:
  3890  00743A  2E5C               	decfsz	??_kpDebounce^0,f,c
  3891  00743C  EF1A  F03A         	goto	u2445
  3892  007440  C05D  F059         	movff	??_kpDebounce+1,soWrite@value
  3893  007444  C05E  F05A         	movff	??_kpDebounce+2,soWrite@value+1
  3894  007448  ECF4  F032         	call	_soWrite	;wreg free
  3895                           
  3896                           ;keypad.c: 48:       if(digitalRead(PIN_B2)){
  3897  00744C  0E00               	movlw	0
  3898  00744E  6E54               	movwf	(digitalRead@pin+1)^0,c
  3899  007450  0E0A               	movlw	10
  3900  007452  6E53               	movwf	digitalRead@pin^0,c
  3901  007454  ECD5  F03B         	call	_digitalRead	;wreg free
  3902  007458  5053               	movf	?_digitalRead^0,w,c
  3903  00745A  1054               	iorwf	(?_digitalRead+1)^0,w,c
  3904  00745C  B4D8               	btfsc	status,2,c
  3905  00745E  EF33  F03A         	goto	u2451
  3906  007462  EF35  F03A         	goto	u2450
  3907  007466                     u2451:
  3908  007466  EF48  F03A         	goto	l2952
  3909  00746A                     u2450:
  3910  00746A                     
  3911                           ;keypad.c: 49:         ((newRead) |= (1<<(i)));
  3912  00746A  C05F  F05C         	movff	kpDebounce@i,??_kpDebounce
  3913  00746E  0E01               	movlw	1
  3914  007470  6E5D               	movwf	(??_kpDebounce+1)^0,c
  3915  007472  0E00               	movlw	0
  3916  007474  6E5E               	movwf	(??_kpDebounce+2)^0,c
  3917  007476  2A5C               	incf	??_kpDebounce^0,f,c
  3918  007478  EF41  F03A         	goto	u2464
  3919  00747C                     u2465:
  3920  00747C  90D8               	bcf	status,0,c
  3921  00747E  365D               	rlcf	(??_kpDebounce+1)^0,f,c
  3922  007480  365E               	rlcf	(??_kpDebounce+2)^0,f,c
  3923  007482                     u2464:
  3924  007482  2E5C               	decfsz	??_kpDebounce^0,f,c
  3925  007484  EF3E  F03A         	goto	u2465
  3926  007488  505D               	movf	(??_kpDebounce+1)^0,w,c
  3927  00748A  122F               	iorwf	kpDebounce@newRead^0,f,c
  3928  00748C  505E               	movf	(??_kpDebounce+2)^0,w,c
  3929  00748E  1230               	iorwf	(kpDebounce@newRead+1)^0,f,c
  3930  007490                     l2952:
  3931                           
  3932                           ;keypad.c: 51:       if(digitalRead(PIN_B1)){
  3933  007490  0E00               	movlw	0
  3934  007492  6E54               	movwf	(digitalRead@pin+1)^0,c
  3935  007494  0E09               	movlw	9
  3936  007496  6E53               	movwf	digitalRead@pin^0,c
  3937  007498  ECD5  F03B         	call	_digitalRead	;wreg free
  3938  00749C  5053               	movf	?_digitalRead^0,w,c
  3939  00749E  1054               	iorwf	(?_digitalRead+1)^0,w,c
  3940  0074A0  B4D8               	btfsc	status,2,c
  3941  0074A2  EF55  F03A         	goto	u2471
  3942  0074A6  EF57  F03A         	goto	u2470
  3943  0074AA                     u2471:
  3944  0074AA  EF6C  F03A         	goto	l2956
  3945  0074AE                     u2470:
  3946  0074AE                     
  3947                           ;keypad.c: 52:         ((newRead) |= (1<<((i+5))));
  3948  0074AE  C05F  F05C         	movff	kpDebounce@i,??_kpDebounce
  3949  0074B2  0E05               	movlw	5
  3950  0074B4  265C               	addwf	??_kpDebounce^0,f,c
  3951  0074B6  0E01               	movlw	1
  3952  0074B8  6E5D               	movwf	(??_kpDebounce+1)^0,c
  3953  0074BA  0E00               	movlw	0
  3954  0074BC  6E5E               	movwf	(??_kpDebounce+2)^0,c
  3955  0074BE  2A5C               	incf	??_kpDebounce^0,f,c
  3956  0074C0  EF65  F03A         	goto	u2484
  3957  0074C4                     u2485:
  3958  0074C4  90D8               	bcf	status,0,c
  3959  0074C6  365D               	rlcf	(??_kpDebounce+1)^0,f,c
  3960  0074C8  365E               	rlcf	(??_kpDebounce+2)^0,f,c
  3961  0074CA                     u2484:
  3962  0074CA  2E5C               	decfsz	??_kpDebounce^0,f,c
  3963  0074CC  EF62  F03A         	goto	u2485
  3964  0074D0  505D               	movf	(??_kpDebounce+1)^0,w,c
  3965  0074D2  122F               	iorwf	kpDebounce@newRead^0,f,c
  3966  0074D4  505E               	movf	(??_kpDebounce+2)^0,w,c
  3967  0074D6  1230               	iorwf	(kpDebounce@newRead+1)^0,f,c
  3968  0074D8                     l2956:
  3969                           
  3970                           ;keypad.c: 54:     }
  3971  0074D8  4A5F               	infsnz	kpDebounce@i^0,f,c
  3972  0074DA  2A60               	incf	(kpDebounce@i+1)^0,f,c
  3973  0074DC  EFFF  F039         	goto	l2944
  3974  0074E0                     l2960:
  3975                           
  3976                           ;keypad.c: 55:     if (oldRead == newRead) {
  3977  0074E0  502F               	movf	kpDebounce@newRead^0,w,c
  3978  0074E2  182D               	xorwf	kpDebounce@oldRead^0,w,c
  3979  0074E4  E107               	bnz	u2491
  3980  0074E6  5030               	movf	(kpDebounce@newRead+1)^0,w,c
  3981  0074E8  182E               	xorwf	(kpDebounce@oldRead+1)^0,w,c
  3982  0074EA  A4D8               	btfss	status,2,c
  3983  0074EC  EF7A  F03A         	goto	u2491
  3984  0074F0  EF7C  F03A         	goto	u2490
  3985  0074F4                     u2491:
  3986  0074F4  EF7F  F03A         	goto	l2964
  3987  0074F8                     u2490:
  3988  0074F8                     
  3989                           ;keypad.c: 56:         tempo--;
  3990  0074F8  063C               	decf	kpDebounce@tempo^0,f,c
  3991                           
  3992                           ;keypad.c: 57:     } else {
  3993  0074FA  EF85  F03A         	goto	l119
  3994  0074FE                     l2964:
  3995                           
  3996                           ;keypad.c: 58:         tempo = 1;
  3997  0074FE  0E01               	movlw	1
  3998  007500  6E3C               	movwf	kpDebounce@tempo^0,c
  3999  007502                     
  4000                           ;keypad.c: 59:         oldRead = newRead;
  4001  007502  C02F  F02D         	movff	kpDebounce@newRead,kpDebounce@oldRead
  4002  007506  C030  F02E         	movff	kpDebounce@newRead+1,kpDebounce@oldRead+1
  4003  00750A                     l119:
  4004                           
  4005                           ;keypad.c: 61:     if (tempo == 0) {
  4006  00750A  503C               	movf	kpDebounce@tempo^0,w,c
  4007  00750C  A4D8               	btfss	status,2,c
  4008  00750E  EF8B  F03A         	goto	u2501
  4009  007512  EF8D  F03A         	goto	u2500
  4010  007516                     u2501:
  4011  007516  EF91  F03A         	goto	l121
  4012  00751A                     u2500:
  4013  00751A                     
  4014                           ;keypad.c: 62:         keys = oldRead;
  4015  00751A  C02D  F031         	movff	kpDebounce@oldRead,_keys
  4016  00751E  C02E  F032         	movff	kpDebounce@oldRead+1,_keys+1
  4017  007522                     l121:
  4018  007522  0012               	return		;funcret
  4019  007524                     __end_of_kpDebounce:
  4020                           	callstack 0
  4021                           
  4022 ;; *************** function _digitalRead *****************
  4023 ;; Defined at:
  4024 ;;		line 39 in file "io.c"
  4025 ;; Parameters:    Size  Location     Type
  4026 ;;  pin             2    0[COMRAM] int 
  4027 ;; Auto vars:     Size  Location     Type
  4028 ;;		None
  4029 ;; Return value:  Size  Location     Type
  4030 ;;                  2    0[COMRAM] int 
  4031 ;; Registers used:
  4032 ;;		wreg, status,2, status,0
  4033 ;; Tracked objects:
  4034 ;;		On entry : 0/0
  4035 ;;		On exit  : 0/0
  4036 ;;		Unchanged: 0/0
  4037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4038 ;;      Params:         2       0       0       0       0       0       0
  4039 ;;      Locals:         0       0       0       0       0       0       0
  4040 ;;      Temps:          3       0       0       0       0       0       0
  4041 ;;      Totals:         5       0       0       0       0       0       0
  4042 ;;Total ram usage:        5 bytes
  4043 ;; Hardware stack levels used:    1
  4044 ;; This function calls:
  4045 ;;		Nothing
  4046 ;; This function is called by:
  4047 ;;		_kpDebounce
  4048 ;; This function uses a non-reentrant model
  4049 ;;
  4050                           
  4051                           	psect	text24
  4052  0077AA                     __ptext24:
  4053                           	callstack 0
  4054  0077AA                     _digitalRead:
  4055                           	callstack 28
  4056  0077AA                     
  4057                           ;io.c: 40:     if(pin <8){
  4058  0077AA  BE54               	btfsc	(digitalRead@pin+1)^0,7,c
  4059  0077AC  EFE3  F03B         	goto	u2210
  4060  0077B0  5054               	movf	(digitalRead@pin+1)^0,w,c
  4061  0077B2  E107               	bnz	u2211
  4062  0077B4  0E08               	movlw	8
  4063  0077B6  5C53               	subwf	digitalRead@pin^0,w,c
  4064  0077B8  B0D8               	btfsc	status,0,c
  4065  0077BA  EFE1  F03B         	goto	u2211
  4066  0077BE  EFE3  F03B         	goto	u2210
  4067  0077C2                     u2211:
  4068  0077C2  EFF7  F03B         	goto	l2742
  4069  0077C6                     u2210:
  4070  0077C6                     
  4071                           ;io.c: 41:         return ((PORTA) & (1<<(pin)));
  4072  0077C6  C053  F055         	movff	digitalRead@pin,??_digitalRead
  4073  0077CA  0E01               	movlw	1
  4074  0077CC  6E56               	movwf	(??_digitalRead+1)^0,c
  4075  0077CE  2A55               	incf	??_digitalRead^0,f,c
  4076  0077D0  EFEC  F03B         	goto	u2224
  4077  0077D4                     u2225:
  4078  0077D4  90D8               	bcf	status,0,c
  4079  0077D6  3656               	rlcf	(??_digitalRead+1)^0,f,c
  4080  0077D8                     u2224:
  4081  0077D8  2E55               	decfsz	??_digitalRead^0,f,c
  4082  0077DA  EFEA  F03B         	goto	u2225
  4083  0077DE  5056               	movf	(??_digitalRead+1)^0,w,c
  4084  0077E0  1480               	andwf	128,w,c	;volatile
  4085  0077E2  6E57               	movwf	(??_digitalRead+2)^0,c
  4086  0077E4  5057               	movf	(??_digitalRead+2)^0,w,c
  4087  0077E6  6E53               	movwf	?_digitalRead^0,c
  4088  0077E8  6A54               	clrf	(?_digitalRead+1)^0,c
  4089  0077EA  EF89  F03C         	goto	l46
  4090  0077EE                     l2742:
  4091  0077EE  BE54               	btfsc	(digitalRead@pin+1)^0,7,c
  4092  0077F0  EF05  F03C         	goto	u2230
  4093  0077F4  5054               	movf	(digitalRead@pin+1)^0,w,c
  4094  0077F6  E107               	bnz	u2231
  4095  0077F8  0E10               	movlw	16
  4096  0077FA  5C53               	subwf	digitalRead@pin^0,w,c
  4097  0077FC  B0D8               	btfsc	status,0,c
  4098  0077FE  EF03  F03C         	goto	u2231
  4099  007802  EF05  F03C         	goto	u2230
  4100  007806                     u2231:
  4101  007806  EF1B  F03C         	goto	l2750
  4102  00780A                     u2230:
  4103  00780A                     
  4104                           ;io.c: 43:         return ((PORTB) & (1<<(pin-8)));
  4105  00780A  C053  F055         	movff	digitalRead@pin,??_digitalRead
  4106  00780E  0EF8               	movlw	-8
  4107  007810  2655               	addwf	??_digitalRead^0,f,c
  4108  007812  0E01               	movlw	1
  4109  007814  6E56               	movwf	(??_digitalRead+1)^0,c
  4110  007816  2A55               	incf	??_digitalRead^0,f,c
  4111  007818  EF10  F03C         	goto	u2244
  4112  00781C                     u2245:
  4113  00781C  90D8               	bcf	status,0,c
  4114  00781E  3656               	rlcf	(??_digitalRead+1)^0,f,c
  4115  007820                     u2244:
  4116  007820  2E55               	decfsz	??_digitalRead^0,f,c
  4117  007822  EF0E  F03C         	goto	u2245
  4118  007826  5056               	movf	(??_digitalRead+1)^0,w,c
  4119  007828  1481               	andwf	129,w,c	;volatile
  4120  00782A  6E57               	movwf	(??_digitalRead+2)^0,c
  4121  00782C  5057               	movf	(??_digitalRead+2)^0,w,c
  4122  00782E  6E53               	movwf	?_digitalRead^0,c
  4123  007830  6A54               	clrf	(?_digitalRead+1)^0,c
  4124  007832  EF89  F03C         	goto	l46
  4125  007836                     l2750:
  4126  007836  BE54               	btfsc	(digitalRead@pin+1)^0,7,c
  4127  007838  EF29  F03C         	goto	u2250
  4128  00783C  5054               	movf	(digitalRead@pin+1)^0,w,c
  4129  00783E  E107               	bnz	u2251
  4130  007840  0E18               	movlw	24
  4131  007842  5C53               	subwf	digitalRead@pin^0,w,c
  4132  007844  B0D8               	btfsc	status,0,c
  4133  007846  EF27  F03C         	goto	u2251
  4134  00784A  EF29  F03C         	goto	u2250
  4135  00784E                     u2251:
  4136  00784E  EF3F  F03C         	goto	l2758
  4137  007852                     u2250:
  4138  007852                     
  4139                           ;io.c: 45:         return ((PORTC) & (1<<(pin-16)));
  4140  007852  C053  F055         	movff	digitalRead@pin,??_digitalRead
  4141  007856  0EF0               	movlw	-16
  4142  007858  2655               	addwf	??_digitalRead^0,f,c
  4143  00785A  0E01               	movlw	1
  4144  00785C  6E56               	movwf	(??_digitalRead+1)^0,c
  4145  00785E  2A55               	incf	??_digitalRead^0,f,c
  4146  007860  EF34  F03C         	goto	u2264
  4147  007864                     u2265:
  4148  007864  90D8               	bcf	status,0,c
  4149  007866  3656               	rlcf	(??_digitalRead+1)^0,f,c
  4150  007868                     u2264:
  4151  007868  2E55               	decfsz	??_digitalRead^0,f,c
  4152  00786A  EF32  F03C         	goto	u2265
  4153  00786E  5056               	movf	(??_digitalRead+1)^0,w,c
  4154  007870  1482               	andwf	130,w,c	;volatile
  4155  007872  6E57               	movwf	(??_digitalRead+2)^0,c
  4156  007874  5057               	movf	(??_digitalRead+2)^0,w,c
  4157  007876  6E53               	movwf	?_digitalRead^0,c
  4158  007878  6A54               	clrf	(?_digitalRead+1)^0,c
  4159  00787A  EF89  F03C         	goto	l46
  4160  00787E                     l2758:
  4161  00787E  BE54               	btfsc	(digitalRead@pin+1)^0,7,c
  4162  007880  EF4D  F03C         	goto	u2270
  4163  007884  5054               	movf	(digitalRead@pin+1)^0,w,c
  4164  007886  E107               	bnz	u2271
  4165  007888  0E20               	movlw	32
  4166  00788A  5C53               	subwf	digitalRead@pin^0,w,c
  4167  00788C  B0D8               	btfsc	status,0,c
  4168  00788E  EF4B  F03C         	goto	u2271
  4169  007892  EF4D  F03C         	goto	u2270
  4170  007896                     u2271:
  4171  007896  EF63  F03C         	goto	l2766
  4172  00789A                     u2270:
  4173  00789A                     
  4174                           ;io.c: 47:         return ((PORTD) & (1<<(pin-24)));
  4175  00789A  C053  F055         	movff	digitalRead@pin,??_digitalRead
  4176  00789E  0EE8               	movlw	-24
  4177  0078A0  2655               	addwf	??_digitalRead^0,f,c
  4178  0078A2  0E01               	movlw	1
  4179  0078A4  6E56               	movwf	(??_digitalRead+1)^0,c
  4180  0078A6  2A55               	incf	??_digitalRead^0,f,c
  4181  0078A8  EF58  F03C         	goto	u2284
  4182  0078AC                     u2285:
  4183  0078AC  90D8               	bcf	status,0,c
  4184  0078AE  3656               	rlcf	(??_digitalRead+1)^0,f,c
  4185  0078B0                     u2284:
  4186  0078B0  2E55               	decfsz	??_digitalRead^0,f,c
  4187  0078B2  EF56  F03C         	goto	u2285
  4188  0078B6  5056               	movf	(??_digitalRead+1)^0,w,c
  4189  0078B8  1483               	andwf	131,w,c	;volatile
  4190  0078BA  6E57               	movwf	(??_digitalRead+2)^0,c
  4191  0078BC  5057               	movf	(??_digitalRead+2)^0,w,c
  4192  0078BE  6E53               	movwf	?_digitalRead^0,c
  4193  0078C0  6A54               	clrf	(?_digitalRead+1)^0,c
  4194  0078C2  EF89  F03C         	goto	l46
  4195  0078C6                     l2766:
  4196  0078C6  BE54               	btfsc	(digitalRead@pin+1)^0,7,c
  4197  0078C8  EF71  F03C         	goto	u2290
  4198  0078CC  5054               	movf	(digitalRead@pin+1)^0,w,c
  4199  0078CE  E107               	bnz	u2291
  4200  0078D0  0E28               	movlw	40
  4201  0078D2  5C53               	subwf	digitalRead@pin^0,w,c
  4202  0078D4  B0D8               	btfsc	status,0,c
  4203  0078D6  EF6F  F03C         	goto	u2291
  4204  0078DA  EF71  F03C         	goto	u2290
  4205  0078DE                     u2291:
  4206  0078DE  EF87  F03C         	goto	l51
  4207  0078E2                     u2290:
  4208  0078E2                     
  4209                           ;io.c: 49:         return ((PORTE) & (1<<(pin-32)));
  4210  0078E2  C053  F055         	movff	digitalRead@pin,??_digitalRead
  4211  0078E6  0EE0               	movlw	-32
  4212  0078E8  2655               	addwf	??_digitalRead^0,f,c
  4213  0078EA  0E01               	movlw	1
  4214  0078EC  6E56               	movwf	(??_digitalRead+1)^0,c
  4215  0078EE  2A55               	incf	??_digitalRead^0,f,c
  4216  0078F0  EF7C  F03C         	goto	u2304
  4217  0078F4                     u2305:
  4218  0078F4  90D8               	bcf	status,0,c
  4219  0078F6  3656               	rlcf	(??_digitalRead+1)^0,f,c
  4220  0078F8                     u2304:
  4221  0078F8  2E55               	decfsz	??_digitalRead^0,f,c
  4222  0078FA  EF7A  F03C         	goto	u2305
  4223  0078FE  5056               	movf	(??_digitalRead+1)^0,w,c
  4224  007900  1484               	andwf	132,w,c	;volatile
  4225  007902  6E57               	movwf	(??_digitalRead+2)^0,c
  4226  007904  5057               	movf	(??_digitalRead+2)^0,w,c
  4227  007906  6E53               	movwf	?_digitalRead^0,c
  4228  007908  6A54               	clrf	(?_digitalRead+1)^0,c
  4229  00790A  EF89  F03C         	goto	l46
  4230  00790E                     l51:
  4231  00790E                     
  4232                           ;io.c: 51:     return -1;
  4233  00790E  6853               	setf	?_digitalRead^0,c
  4234  007910  6854               	setf	(?_digitalRead+1)^0,c
  4235  007912                     l46:
  4236  007912  0012               	return		;funcret
  4237  007914                     __end_of_digitalRead:
  4238                           	callstack 0
  4239                           
  4240 ;; *************** function _gameOver *****************
  4241 ;; Defined at:
  4242 ;;		line 122 in file "game.c"
  4243 ;; Parameters:    Size  Location     Type
  4244 ;;		None
  4245 ;; Auto vars:     Size  Location     Type
  4246 ;;  i               2   20[COMRAM] int 
  4247 ;;  i               2   22[COMRAM] int 
  4248 ;; Return value:  Size  Location     Type
  4249 ;;                  1    wreg      void 
  4250 ;; Registers used:
  4251 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4252 ;; Tracked objects:
  4253 ;;		On entry : 0/0
  4254 ;;		On exit  : 0/0
  4255 ;;		Unchanged: 0/0
  4256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4257 ;;      Params:         0       0       0       0       0       0       0
  4258 ;;      Locals:         4       0       0       0       0       0       0
  4259 ;;      Temps:          0       0       0       0       0       0       0
  4260 ;;      Totals:         4       0       0       0       0       0       0
  4261 ;;Total ram usage:        4 bytes
  4262 ;; Hardware stack levels used:    1
  4263 ;; Hardware stack levels required when called:    6
  4264 ;; This function calls:
  4265 ;;		_lcdChar
  4266 ;;		_lcdCommand
  4267 ;;		_lcdPosition
  4268 ;;		_lcdString
  4269 ;;		_timerReset
  4270 ;;		_timerWait
  4271 ;; This function is called by:
  4272 ;;		_gameUpdate
  4273 ;; This function uses a non-reentrant model
  4274 ;;
  4275                           
  4276                           	psect	text25
  4277  006DF4                     __ptext25:
  4278                           	callstack 0
  4279  006DF4                     _gameOver:
  4280                           	callstack 23
  4281  006DF4                     
  4282                           ;game.c: 124:     lcdCommand(0x01);
  4283  006DF4  0E01               	movlw	1
  4284  006DF6  EC82  F030         	call	_lcdCommand
  4285                           
  4286                           ;game.c: 126:     lcdPosition(0, 2);
  4287  006DFA  0E00               	movlw	0
  4288  006DFC  6E62               	movwf	(lcdPosition@line+1)^0,c
  4289  006DFE  0E00               	movlw	0
  4290  006E00  6E61               	movwf	lcdPosition@line^0,c
  4291  006E02  0E00               	movlw	0
  4292  006E04  6E64               	movwf	(lcdPosition@col+1)^0,c
  4293  006E06  0E02               	movlw	2
  4294  006E08  6E63               	movwf	lcdPosition@col^0,c
  4295  006E0A  ECD0  F031         	call	_lcdPosition	;wreg free
  4296  006E0E                     
  4297                           ;game.c: 128:     lcdString("Voce perdeu");
  4298  006E0E  0EBD               	movlw	low STR_8
  4299  006E10  6E61               	movwf	lcdString@msg^0,c
  4300  006E12  0E7F               	movlw	high STR_8
  4301  006E14  6E62               	movwf	(lcdString@msg+1)^0,c
  4302  006E16  EC77  F035         	call	_lcdString	;wreg free
  4303  006E1A                     
  4304                           ;game.c: 129:     lcdPosition(1, 2);
  4305  006E1A  0E00               	movlw	0
  4306  006E1C  6E62               	movwf	(lcdPosition@line+1)^0,c
  4307  006E1E  0E01               	movlw	1
  4308  006E20  6E61               	movwf	lcdPosition@line^0,c
  4309  006E22  0E00               	movlw	0
  4310  006E24  6E64               	movwf	(lcdPosition@col+1)^0,c
  4311  006E26  0E02               	movlw	2
  4312  006E28  6E63               	movwf	lcdPosition@col^0,c
  4313  006E2A  ECD0  F031         	call	_lcdPosition	;wreg free
  4314                           
  4315                           ;game.c: 130:     lcdString("Pontos: ");
  4316  006E2E  0ED3               	movlw	low STR_9
  4317  006E30  6E61               	movwf	lcdString@msg^0,c
  4318  006E32  0E7F               	movlw	high STR_9
  4319  006E34  6E62               	movwf	(lcdString@msg+1)^0,c
  4320  006E36  EC77  F035         	call	_lcdString	;wreg free
  4321  006E3A                     
  4322                           ;game.c: 131:     for (int i = 0; i < 3; i++) {
  4323  006E3A  0E00               	movlw	0
  4324  006E3C  6E6A               	movwf	(gameOver@i+1)^0,c
  4325  006E3E  0E00               	movlw	0
  4326  006E40  6E69               	movwf	gameOver@i^0,c
  4327  006E42                     l3106:
  4328                           
  4329                           ;game.c: 132:         lcdChar(points[i]);
  4330  006E42  0E6F               	movlw	low _points
  4331  006E44  2469               	addwf	gameOver@i^0,w,c
  4332  006E46  6ED9               	movwf	fsr2l,c
  4333  006E48  0E00               	movlw	high _points
  4334  006E4A  206A               	addwfc	(gameOver@i+1)^0,w,c
  4335  006E4C  6EDA               	movwf	fsr2h,c
  4336  006E4E  50DF               	movf	indf2,w,c
  4337  006E50  EC73  F030         	call	_lcdChar
  4338  006E54                     
  4339                           ;game.c: 133:     }
  4340  006E54  4A69               	infsnz	gameOver@i^0,f,c
  4341  006E56  2A6A               	incf	(gameOver@i+1)^0,f,c
  4342  006E58  BE6A               	btfsc	(gameOver@i+1)^0,7,c
  4343  006E5A  EF38  F037         	goto	u2621
  4344  006E5E  506A               	movf	(gameOver@i+1)^0,w,c
  4345  006E60  E109               	bnz	u2620
  4346  006E62  0E03               	movlw	3
  4347  006E64  5C69               	subwf	gameOver@i^0,w,c
  4348  006E66  A0D8               	btfss	status,0,c
  4349  006E68  EF38  F037         	goto	u2621
  4350  006E6C  EF3A  F037         	goto	u2620
  4351  006E70                     u2621:
  4352  006E70  EF21  F037         	goto	l3106
  4353  006E74                     u2620:
  4354  006E74                     
  4355                           ;game.c: 135:     for (int i = 0; i < 100; i++) {
  4356  006E74  0E00               	movlw	0
  4357  006E76  6E68               	movwf	(gameOver@i_559+1)^0,c
  4358  006E78  0E00               	movlw	0
  4359  006E7A  6E67               	movwf	gameOver@i_559^0,c
  4360  006E7C                     l3118:
  4361                           
  4362                           ;game.c: 136:         timerReset(20000);
  4363  006E7C  0E4E               	movlw	78
  4364  006E7E  6E54               	movwf	(timerReset@tempo+1)^0,c
  4365  006E80  0E20               	movlw	32
  4366  006E82  6E53               	movwf	timerReset@tempo^0,c
  4367  006E84  EC91  F030         	call	_timerReset	;wreg free
  4368  006E88                     
  4369                           ;game.c: 137:         timerWait();
  4370  006E88  EC32  F030         	call	_timerWait	;wreg free
  4371  006E8C                     
  4372                           ;game.c: 138:     }
  4373  006E8C  4A67               	infsnz	gameOver@i_559^0,f,c
  4374  006E8E  2A68               	incf	(gameOver@i_559+1)^0,f,c
  4375  006E90  BE68               	btfsc	(gameOver@i_559+1)^0,7,c
  4376  006E92  EF54  F037         	goto	u2631
  4377  006E96  5068               	movf	(gameOver@i_559+1)^0,w,c
  4378  006E98  E109               	bnz	u2630
  4379  006E9A  0E64               	movlw	100
  4380  006E9C  5C67               	subwf	gameOver@i_559^0,w,c
  4381  006E9E  A0D8               	btfss	status,0,c
  4382  006EA0  EF54  F037         	goto	u2631
  4383  006EA4  EF56  F037         	goto	u2630
  4384  006EA8                     u2631:
  4385  006EA8  EF3E  F037         	goto	l3118
  4386  006EAC                     u2630:
  4387  006EAC  0012               	return		;funcret
  4388  006EAE                     __end_of_gameOver:
  4389                           	callstack 0
  4390                           
  4391 ;; *************** function _timerWait *****************
  4392 ;; Defined at:
  4393 ;;		line 31 in file "timer.c"
  4394 ;; Parameters:    Size  Location     Type
  4395 ;;		None
  4396 ;; Auto vars:     Size  Location     Type
  4397 ;;		None
  4398 ;; Return value:  Size  Location     Type
  4399 ;;                  1    wreg      void 
  4400 ;; Registers used:
  4401 ;;		None
  4402 ;; Tracked objects:
  4403 ;;		On entry : 0/0
  4404 ;;		On exit  : 0/0
  4405 ;;		Unchanged: 0/0
  4406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4407 ;;      Params:         0       0       0       0       0       0       0
  4408 ;;      Locals:         0       0       0       0       0       0       0
  4409 ;;      Temps:          0       0       0       0       0       0       0
  4410 ;;      Totals:         0       0       0       0       0       0       0
  4411 ;;Total ram usage:        0 bytes
  4412 ;; Hardware stack levels used:    1
  4413 ;; This function calls:
  4414 ;;		Nothing
  4415 ;; This function is called by:
  4416 ;;		_gameOver
  4417 ;;		_gameUpdate
  4418 ;; This function uses a non-reentrant model
  4419 ;;
  4420                           
  4421                           	psect	text26
  4422  006064                     __ptext26:
  4423                           	callstack 0
  4424  006064                     _timerWait:
  4425                           	callstack 29
  4426  006064                     l359:
  4427  006064  A4F2               	btfss	242,2,c	;volatile
  4428  006066  EF37  F030         	goto	u861
  4429  00606A  EF39  F030         	goto	u860
  4430  00606E                     u861:
  4431  00606E  EF32  F030         	goto	l359
  4432  006072                     u860:
  4433  006072  0012               	return		;funcret
  4434  006074                     __end_of_timerWait:
  4435                           	callstack 0
  4436                           
  4437 ;; *************** function _timerReset *****************
  4438 ;; Defined at:
  4439 ;;		line 41 in file "timer.c"
  4440 ;; Parameters:    Size  Location     Type
  4441 ;;  tempo           2    0[COMRAM] unsigned int 
  4442 ;; Auto vars:     Size  Location     Type
  4443 ;;  ciclos          2    2[COMRAM] unsigned int 
  4444 ;; Return value:  Size  Location     Type
  4445 ;;                  1    wreg      void 
  4446 ;; Registers used:
  4447 ;;		wreg, status,2, status,0
  4448 ;; Tracked objects:
  4449 ;;		On entry : 0/0
  4450 ;;		On exit  : 0/0
  4451 ;;		Unchanged: 0/0
  4452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4453 ;;      Params:         2       0       0       0       0       0       0
  4454 ;;      Locals:         2       0       0       0       0       0       0
  4455 ;;      Temps:          0       0       0       0       0       0       0
  4456 ;;      Totals:         4       0       0       0       0       0       0
  4457 ;;Total ram usage:        4 bytes
  4458 ;; Hardware stack levels used:    1
  4459 ;; This function calls:
  4460 ;;		Nothing
  4461 ;; This function is called by:
  4462 ;;		_gameOver
  4463 ;;		_gameUpdate
  4464 ;; This function uses a non-reentrant model
  4465 ;;
  4466                           
  4467                           	psect	text27
  4468  006122                     __ptext27:
  4469                           	callstack 0
  4470  006122                     _timerReset:
  4471                           	callstack 29
  4472  006122                     
  4473                           ;timer.c: 41: void timerReset(unsigned int tempo);timer.c: 42: {;timer.c: 43:     unsign
      +                          ed int ciclos;;timer.c: 46:     ciclos = tempo * 2;
  4474  006122  90D8               	bcf	status,0,c
  4475  006124  3453               	rlcf	timerReset@tempo^0,w,c
  4476  006126  6E55               	movwf	timerReset@ciclos^0,c
  4477  006128  3454               	rlcf	(timerReset@tempo+1)^0,w,c
  4478  00612A  6E56               	movwf	(timerReset@ciclos+1)^0,c
  4479  00612C                     
  4480                           ;timer.c: 48:  ciclos = 65535 - ciclos;
  4481  00612C  1E55               	comf	timerReset@ciclos^0,f,c
  4482  00612E  1E56               	comf	(timerReset@ciclos+1)^0,f,c
  4483  006130                     
  4484                           ;timer.c: 51:     ciclos -=50;
  4485  006130  0E32               	movlw	50
  4486  006132  5E55               	subwf	timerReset@ciclos^0,f,c
  4487  006134  0E00               	movlw	0
  4488  006136  5A56               	subwfb	(timerReset@ciclos+1)^0,f,c
  4489  006138                     
  4490                           ;timer.c: 53:  TMR0H = (ciclos >> 8);
  4491  006138  5056               	movf	(timerReset@ciclos+1)^0,w,c
  4492  00613A  6ED7               	movwf	215,c	;volatile
  4493  00613C                     
  4494                           ;timer.c: 54:  TMR0L = (ciclos & 0x00FF);
  4495  00613C  C055  FFD6         	movff	timerReset@ciclos,4054	;volatile
  4496  006140                     
  4497                           ;timer.c: 56:  ((INTCON) &= ~(1<<(2)));
  4498  006140  94F2               	bcf	242,2,c	;volatile
  4499  006142  0012               	return		;funcret
  4500  006144                     __end_of_timerReset:
  4501                           	callstack 0
  4502                           
  4503 ;; *************** function _checkFood *****************
  4504 ;; Defined at:
  4505 ;;		line 186 in file "game.c"
  4506 ;; Parameters:    Size  Location     Type
  4507 ;;		None
  4508 ;; Auto vars:     Size  Location     Type
  4509 ;;		None
  4510 ;; Return value:  Size  Location     Type
  4511 ;;                  1    wreg      void 
  4512 ;; Registers used:
  4513 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4514 ;; Tracked objects:
  4515 ;;		On entry : 0/0
  4516 ;;		On exit  : 0/0
  4517 ;;		Unchanged: 0/0
  4518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4519 ;;      Params:         0       0       0       0       0       0       0
  4520 ;;      Locals:         0       0       0       0       0       0       0
  4521 ;;      Temps:          0       0       0       0       0       0       0
  4522 ;;      Totals:         0       0       0       0       0       0       0
  4523 ;;Total ram usage:        0 bytes
  4524 ;; Hardware stack levels used:    1
  4525 ;; Hardware stack levels required when called:    6
  4526 ;; This function calls:
  4527 ;;		_addPoint
  4528 ;;		_replaceFood
  4529 ;;		_setPixel
  4530 ;; This function is called by:
  4531 ;;		_gameUpdate
  4532 ;; This function uses a non-reentrant model
  4533 ;;
  4534                           
  4535                           	psect	text28
  4536  006990                     __ptext28:
  4537                           	callstack 0
  4538  006990                     _checkFood:
  4539                           	callstack 23
  4540  006990                     
  4541                           ;game.c: 190:     if ((snake[0].x == food.x) && (snake[0].y == food.y)) {
  4542  006990  502B               	movf	_food^0,w,c
  4543  006992  1801               	xorwf	_snake^0,w,c
  4544  006994  A4D8               	btfss	status,2,c
  4545  006996  EFCF  F034         	goto	u2691
  4546  00699A  EFD1  F034         	goto	u2690
  4547  00699E                     u2691:
  4548  00699E  EFE9  F034         	goto	l3190
  4549  0069A2                     u2690:
  4550  0069A2  502C               	movf	(_food+1)^0,w,c
  4551  0069A4  1802               	xorwf	(_snake+1)^0,w,c
  4552  0069A6  A4D8               	btfss	status,2,c
  4553  0069A8  EFD8  F034         	goto	u2701
  4554  0069AC  EFDA  F034         	goto	u2700
  4555  0069B0                     u2701:
  4556  0069B0  EFE9  F034         	goto	l3190
  4557  0069B4                     u2700:
  4558  0069B4                     
  4559                           ;game.c: 191:         replaceFood();
  4560  0069B4  ECEE  F030         	call	_replaceFood	;wreg free
  4561  0069B8                     
  4562                           ;game.c: 192:         addPoint();
  4563  0069B8  EC28  F034         	call	_addPoint	;wreg free
  4564  0069BC                     
  4565                           ;game.c: 193:         if (snake_size < 20) {
  4566  0069BC  0E14               	movlw	20
  4567  0069BE  6076               	cpfslt	_snake_size^0,c
  4568  0069C0  EFE4  F034         	goto	u2711
  4569  0069C4  EFE6  F034         	goto	u2710
  4570  0069C8                     u2711:
  4571  0069C8  EFE9  F034         	goto	l3190
  4572  0069CC                     u2710:
  4573  0069CC                     
  4574                           ;game.c: 194:             snake_size++;
  4575  0069CC  2A76               	incf	_snake_size^0,f,c
  4576  0069CE  EF00  F035         	goto	l625
  4577  0069D2                     l3190:
  4578                           
  4579                           ;game.c: 199:     setPixel(snake[snake_size].x, snake[snake_size].y, 0);
  4580  0069D2  5076               	movf	_snake_size^0,w,c
  4581  0069D4  0D02               	mullw	2
  4582  0069D6  0E02               	movlw	low (_snake+1)
  4583  0069D8  24F3               	addwf	243,w,c
  4584  0069DA  6ED9               	movwf	fsr2l,c
  4585  0069DC  0E00               	movlw	high (_snake+1)
  4586  0069DE  20F4               	addwfc	prodh,w,c
  4587  0069E0  6EDA               	movwf	fsr2h,c
  4588  0069E2  50DF               	movf	indf2,w,c
  4589  0069E4  6E61               	movwf	setPixel@y^0,c
  4590  0069E6  0E00               	movlw	0
  4591  0069E8  6E62               	movwf	setPixel@val^0,c
  4592  0069EA  5076               	movf	_snake_size^0,w,c
  4593  0069EC  0D02               	mullw	2
  4594  0069EE  0E01               	movlw	low _snake
  4595  0069F0  24F3               	addwf	243,w,c
  4596  0069F2  6ED9               	movwf	fsr2l,c
  4597  0069F4  0E00               	movlw	high _snake
  4598  0069F6  20F4               	addwfc	prodh,w,c
  4599  0069F8  6EDA               	movwf	fsr2h,c
  4600  0069FA  50DF               	movf	indf2,w,c
  4601  0069FC  EC8A  F038         	call	_setPixel
  4602  006A00                     l625:
  4603  006A00  0012               	return		;funcret
  4604  006A02                     __end_of_checkFood:
  4605                           	callstack 0
  4606                           
  4607 ;; *************** function _addPoint *****************
  4608 ;; Defined at:
  4609 ;;		line 36 in file "game.c"
  4610 ;; Parameters:    Size  Location     Type
  4611 ;;		None
  4612 ;; Auto vars:     Size  Location     Type
  4613 ;;  i               2    1[COMRAM] int 
  4614 ;; Return value:  Size  Location     Type
  4615 ;;                  1    wreg      void 
  4616 ;; Registers used:
  4617 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4618 ;; Tracked objects:
  4619 ;;		On entry : 0/0
  4620 ;;		On exit  : 0/0
  4621 ;;		Unchanged: 0/0
  4622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4623 ;;      Params:         0       0       0       0       0       0       0
  4624 ;;      Locals:         2       0       0       0       0       0       0
  4625 ;;      Temps:          1       0       0       0       0       0       0
  4626 ;;      Totals:         3       0       0       0       0       0       0
  4627 ;;Total ram usage:        3 bytes
  4628 ;; Hardware stack levels used:    1
  4629 ;; This function calls:
  4630 ;;		Nothing
  4631 ;; This function is called by:
  4632 ;;		_checkFood
  4633 ;; This function uses a non-reentrant model
  4634 ;;
  4635                           
  4636                           	psect	text29
  4637  006850                     __ptext29:
  4638                           	callstack 0
  4639  006850                     _addPoint:
  4640                           	callstack 28
  4641  006850                     
  4642                           ;game.c: 38:     points[2] += 1;
  4643  006850  2A71               	incf	(_points+2)^0,f,c
  4644  006852                     
  4645                           ;game.c: 39:     for (int i = 2; i > 0; i--) {
  4646  006852  0E00               	movlw	0
  4647  006854  6E55               	movwf	(addPoint@i+1)^0,c
  4648  006856  0E02               	movlw	2
  4649  006858  6E54               	movwf	addPoint@i^0,c
  4650  00685A                     l1840:
  4651                           
  4652                           ;game.c: 40:         if (points[i] > '9') {
  4653  00685A  0E6F               	movlw	low _points
  4654  00685C  2454               	addwf	addPoint@i^0,w,c
  4655  00685E  6ED9               	movwf	fsr2l,c
  4656  006860  0E00               	movlw	high _points
  4657  006862  2055               	addwfc	(addPoint@i+1)^0,w,c
  4658  006864  6EDA               	movwf	fsr2h,c
  4659  006866  0E39               	movlw	57
  4660  006868  64DF               	cpfsgt	indf2,c
  4661  00686A  EF39  F034         	goto	u881
  4662  00686E  EF3B  F034         	goto	u880
  4663  006872                     u881:
  4664  006872  EF4A  F034         	goto	l1844
  4665  006876                     u880:
  4666  006876                     
  4667                           ;game.c: 41:             points[i] -= 10;
  4668  006876  0E6F               	movlw	low _points
  4669  006878  2454               	addwf	addPoint@i^0,w,c
  4670  00687A  6ED9               	movwf	fsr2l,c
  4671  00687C  0E00               	movlw	high _points
  4672  00687E  2055               	addwfc	(addPoint@i+1)^0,w,c
  4673  006880  6EDA               	movwf	fsr2h,c
  4674  006882  0E0A               	movlw	10
  4675  006884  5EDF               	subwf	indf2,f,c
  4676                           
  4677                           ;game.c: 42:             points[i-1] += 1;
  4678  006886  0E6E               	movlw	low (_points+65535)
  4679  006888  2454               	addwf	addPoint@i^0,w,c
  4680  00688A  6ED9               	movwf	fsr2l,c
  4681  00688C  0E00               	movlw	high (_points+65535)
  4682  00688E  2055               	addwfc	(addPoint@i+1)^0,w,c
  4683  006890  6EDA               	movwf	fsr2h,c
  4684  006892  2ADF               	incf	indf2,f,c
  4685  006894                     l1844:
  4686                           
  4687                           ;game.c: 44:     }
  4688  006894  0654               	decf	addPoint@i^0,f,c
  4689  006896  A0D8               	btfss	status,0,c
  4690  006898  0655               	decf	(addPoint@i+1)^0,f,c
  4691  00689A  BE55               	btfsc	(addPoint@i+1)^0,7,c
  4692  00689C  EF5A  F034         	goto	u890
  4693  0068A0  5055               	movf	(addPoint@i+1)^0,w,c
  4694  0068A2  E106               	bnz	u891
  4695  0068A4  0454               	decf	addPoint@i^0,w,c
  4696  0068A6  B0D8               	btfsc	status,0,c
  4697  0068A8  EF58  F034         	goto	u891
  4698  0068AC  EF5A  F034         	goto	u890
  4699  0068B0                     u891:
  4700  0068B0  EF2D  F034         	goto	l1840
  4701  0068B4                     u890:
  4702  0068B4  0012               	return		;funcret
  4703  0068B6                     __end_of_addPoint:
  4704                           	callstack 0
  4705                           
  4706 ;; *************** function _checkCollision *****************
  4707 ;; Defined at:
  4708 ;;		line 202 in file "game.c"
  4709 ;; Parameters:    Size  Location     Type
  4710 ;;		None
  4711 ;; Auto vars:     Size  Location     Type
  4712 ;;  i               2    3[COMRAM] int 
  4713 ;; Return value:  Size  Location     Type
  4714 ;;                  1    wreg      unsigned char 
  4715 ;; Registers used:
  4716 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4717 ;; Tracked objects:
  4718 ;;		On entry : 0/0
  4719 ;;		On exit  : 0/0
  4720 ;;		Unchanged: 0/0
  4721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4722 ;;      Params:         0       0       0       0       0       0       0
  4723 ;;      Locals:         2       0       0       0       0       0       0
  4724 ;;      Temps:          3       0       0       0       0       0       0
  4725 ;;      Totals:         5       0       0       0       0       0       0
  4726 ;;Total ram usage:        5 bytes
  4727 ;; Hardware stack levels used:    1
  4728 ;; This function calls:
  4729 ;;		Nothing
  4730 ;; This function is called by:
  4731 ;;		_gameUpdate
  4732 ;; This function uses a non-reentrant model
  4733 ;;
  4734                           
  4735                           	psect	text30
  4736  006B6C                     __ptext30:
  4737                           	callstack 0
  4738  006B6C                     _checkCollision:
  4739                           	callstack 29
  4740  006B6C                     
  4741                           ;game.c: 203:     for (int i = 2; i <= snake_size; i++) {
  4742  006B6C  0E00               	movlw	0
  4743  006B6E  6E57               	movwf	(checkCollision@i+1)^0,c
  4744  006B70  0E02               	movlw	2
  4745  006B72  6E56               	movwf	checkCollision@i^0,c
  4746  006B74  EFE5  F035         	goto	l2182
  4747  006B78                     l2172:
  4748                           
  4749                           ;game.c: 204:         if (snake[0].x == snake[i].x && snake[0].y == snake[i].y) {
  4750  006B78  90D8               	bcf	status,0,c
  4751  006B7A  3456               	rlcf	checkCollision@i^0,w,c
  4752  006B7C  6ED9               	movwf	fsr2l,c
  4753  006B7E  3457               	rlcf	(checkCollision@i+1)^0,w,c
  4754  006B80  6EDA               	movwf	fsr2h,c
  4755  006B82  0E01               	movlw	low _snake
  4756  006B84  26D9               	addwf	fsr2l,f,c
  4757  006B86  0E00               	movlw	high _snake
  4758  006B88  22DA               	addwfc	fsr2h,f,c
  4759  006B8A  5001               	movf	_snake^0,w,c
  4760  006B8C  18DE               	xorwf	postinc2,w,c
  4761  006B8E  A4D8               	btfss	status,2,c
  4762  006B90  EFCC  F035         	goto	u1271
  4763  006B94  EFCE  F035         	goto	u1270
  4764  006B98                     u1271:
  4765  006B98  EFE3  F035         	goto	l2180
  4766  006B9C                     u1270:
  4767  006B9C  90D8               	bcf	status,0,c
  4768  006B9E  3456               	rlcf	checkCollision@i^0,w,c
  4769  006BA0  6ED9               	movwf	fsr2l,c
  4770  006BA2  3457               	rlcf	(checkCollision@i+1)^0,w,c
  4771  006BA4  6EDA               	movwf	fsr2h,c
  4772  006BA6  0E02               	movlw	low (_snake+1)
  4773  006BA8  26D9               	addwf	fsr2l,f,c
  4774  006BAA  0E00               	movlw	high (_snake+1)
  4775  006BAC  22DA               	addwfc	fsr2h,f,c
  4776  006BAE  50DE               	movf	postinc2,w,c
  4777  006BB0  1802               	xorwf	(_snake+1)^0,w,c
  4778  006BB2  A4D8               	btfss	status,2,c
  4779  006BB4  EFDE  F035         	goto	u1281
  4780  006BB8  EFE0  F035         	goto	u1280
  4781  006BBC                     u1281:
  4782  006BBC  EFE3  F035         	goto	l2180
  4783  006BC0                     u1280:
  4784  006BC0                     
  4785                           ;game.c: 205:             return 1;
  4786  006BC0  0E01               	movlw	1
  4787  006BC2  EFF8  F035         	goto	l631
  4788  006BC6                     l2180:
  4789                           
  4790                           ;game.c: 207:     }
  4791  006BC6  4A56               	infsnz	checkCollision@i^0,f,c
  4792  006BC8  2A57               	incf	(checkCollision@i+1)^0,f,c
  4793  006BCA                     l2182:
  4794  006BCA  5076               	movf	_snake_size^0,w,c
  4795  006BCC  6E53               	movwf	??_checkCollision^0,c
  4796  006BCE  6A54               	clrf	(??_checkCollision+1)^0,c
  4797  006BD0  5056               	movf	checkCollision@i^0,w,c
  4798  006BD2  5C53               	subwf	??_checkCollision^0,w,c
  4799  006BD4  5054               	movf	(??_checkCollision+1)^0,w,c
  4800  006BD6  0A80               	xorlw	128
  4801  006BD8  6E55               	movwf	(??_checkCollision+2)^0,c
  4802  006BDA  5057               	movf	(checkCollision@i+1)^0,w,c
  4803  006BDC  0A80               	xorlw	128
  4804  006BDE  5855               	subwfb	(??_checkCollision+2)^0,w,c
  4805  006BE0  B0D8               	btfsc	status,0,c
  4806  006BE2  EFF5  F035         	goto	u1291
  4807  006BE6  EFF7  F035         	goto	u1290
  4808  006BEA                     u1291:
  4809  006BEA  EFBC  F035         	goto	l2172
  4810  006BEE                     u1290:
  4811  006BEE                     
  4812                           ;game.c: 208:     return 0;
  4813  006BEE  0E00               	movlw	0
  4814  006BF0                     l631:
  4815  006BF0  0012               	return		;funcret
  4816  006BF2                     __end_of_checkCollision:
  4817                           	callstack 0
  4818                           
  4819 ;; *************** function _gameStart *****************
  4820 ;; Defined at:
  4821 ;;		line 92 in file "game.c"
  4822 ;; Parameters:    Size  Location     Type
  4823 ;;		None
  4824 ;; Auto vars:     Size  Location     Type
  4825 ;;		None
  4826 ;; Return value:  Size  Location     Type
  4827 ;;                  1    wreg      void 
  4828 ;; Registers used:
  4829 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4830 ;; Tracked objects:
  4831 ;;		On entry : 0/0
  4832 ;;		On exit  : 0/0
  4833 ;;		Unchanged: 0/0
  4834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4835 ;;      Params:         0       0       0       0       0       0       0
  4836 ;;      Locals:         0       0       0       0       0       0       0
  4837 ;;      Temps:          0       0       0       0       0       0       0
  4838 ;;      Totals:         0       0       0       0       0       0       0
  4839 ;;Total ram usage:        0 bytes
  4840 ;; Hardware stack levels used:    1
  4841 ;; Hardware stack levels required when called:    8
  4842 ;; This function calls:
  4843 ;;		_mixerRestart
  4844 ;;		_rendererStart
  4845 ;; This function is called by:
  4846 ;;		_main
  4847 ;; This function uses a non-reentrant model
  4848 ;;
  4849                           
  4850                           	psect	text31
  4851  006050                     __ptext31:
  4852                           	callstack 0
  4853  006050                     _gameStart:
  4854                           	callstack 22
  4855  006050                     
  4856                           ;game.c: 93:     rendererStart();
  4857  006050  EC9A  F033         	call	_rendererStart	;wreg free
  4858  006054                     
  4859                           ;game.c: 94:     mixerRestart();
  4860  006054  EC3A  F030         	call	_mixerRestart	;wreg free
  4861  006058  0012               	return		;funcret
  4862  00605A                     __end_of_gameStart:
  4863                           	callstack 0
  4864                           
  4865 ;; *************** function _rendererStart *****************
  4866 ;; Defined at:
  4867 ;;		line 63 in file "renderer.c"
  4868 ;; Parameters:    Size  Location     Type
  4869 ;;		None
  4870 ;; Auto vars:     Size  Location     Type
  4871 ;;		None
  4872 ;; Return value:  Size  Location     Type
  4873 ;;                  1    wreg      void 
  4874 ;; Registers used:
  4875 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4876 ;; Tracked objects:
  4877 ;;		On entry : 0/0
  4878 ;;		On exit  : 0/0
  4879 ;;		Unchanged: 0/0
  4880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4881 ;;      Params:         0       0       0       0       0       0       0
  4882 ;;      Locals:         0       0       0       0       0       0       0
  4883 ;;      Temps:          0       0       0       0       0       0       0
  4884 ;;      Totals:         0       0       0       0       0       0       0
  4885 ;;Total ram usage:        0 bytes
  4886 ;; Hardware stack levels used:    1
  4887 ;; Hardware stack levels required when called:    7
  4888 ;; This function calls:
  4889 ;;		_displayScreen
  4890 ;;		_lcdChar
  4891 ;;		_lcdPosition
  4892 ;;		_lcdString
  4893 ;; This function is called by:
  4894 ;;		_gameStart
  4895 ;; This function uses a non-reentrant model
  4896 ;;
  4897                           
  4898                           	psect	text32
  4899  006734                     __ptext32:
  4900                           	callstack 0
  4901  006734                     _rendererStart:
  4902                           	callstack 22
  4903  006734                     
  4904                           ;renderer.c: 64:     displayScreen();
  4905  006734  EC43  F033         	call	_displayScreen	;wreg free
  4906                           
  4907                           ;renderer.c: 66:     lcdPosition(0, 3);
  4908  006738  0E00               	movlw	0
  4909  00673A  6E62               	movwf	(lcdPosition@line+1)^0,c
  4910  00673C  0E00               	movlw	0
  4911  00673E  6E61               	movwf	lcdPosition@line^0,c
  4912  006740  0E00               	movlw	0
  4913  006742  6E64               	movwf	(lcdPosition@col+1)^0,c
  4914  006744  0E03               	movlw	3
  4915  006746  6E63               	movwf	lcdPosition@col^0,c
  4916  006748  ECD0  F031         	call	_lcdPosition	;wreg free
  4917                           
  4918                           ;renderer.c: 67:     lcdChar(6);
  4919  00674C  0E06               	movlw	6
  4920  00674E  EC73  F030         	call	_lcdChar
  4921                           
  4922                           ;renderer.c: 68:     lcdPosition(1, 3);
  4923  006752  0E00               	movlw	0
  4924  006754  6E62               	movwf	(lcdPosition@line+1)^0,c
  4925  006756  0E01               	movlw	1
  4926  006758  6E61               	movwf	lcdPosition@line^0,c
  4927  00675A  0E00               	movlw	0
  4928  00675C  6E64               	movwf	(lcdPosition@col+1)^0,c
  4929  00675E  0E03               	movlw	3
  4930  006760  6E63               	movwf	lcdPosition@col^0,c
  4931  006762  ECD0  F031         	call	_lcdPosition	;wreg free
  4932                           
  4933                           ;renderer.c: 69:     lcdChar(6);
  4934  006766  0E06               	movlw	6
  4935  006768  EC73  F030         	call	_lcdChar
  4936                           
  4937                           ;renderer.c: 71:     lcdPosition(0, 4);
  4938  00676C  0E00               	movlw	0
  4939  00676E  6E62               	movwf	(lcdPosition@line+1)^0,c
  4940  006770  0E00               	movlw	0
  4941  006772  6E61               	movwf	lcdPosition@line^0,c
  4942  006774  0E00               	movlw	0
  4943  006776  6E64               	movwf	(lcdPosition@col+1)^0,c
  4944  006778  0E04               	movlw	4
  4945  00677A  6E63               	movwf	lcdPosition@col^0,c
  4946  00677C  ECD0  F031         	call	_lcdPosition	;wreg free
  4947  006780                     
  4948                           ;renderer.c: 72:     lcdString("Pontos:");
  4949  006780  0EDC               	movlw	low STR_7
  4950  006782  6E61               	movwf	lcdString@msg^0,c
  4951  006784  0E7F               	movlw	high STR_7
  4952  006786  6E62               	movwf	(lcdString@msg+1)^0,c
  4953  006788  EC77  F035         	call	_lcdString	;wreg free
  4954  00678C  0012               	return		;funcret
  4955  00678E                     __end_of_rendererStart:
  4956                           	callstack 0
  4957                           
  4958 ;; *************** function _lcdString *****************
  4959 ;; Defined at:
  4960 ;;		line 57 in file "lcd.c"
  4961 ;; Parameters:    Size  Location     Type
  4962 ;;  msg             2   14[COMRAM] PTR unsigned char 
  4963 ;;		 -> STR_9(9), STR_8(12), song.name(15), song(21), 
  4964 ;;		 -> STR_7(8), STR_6(7), STR_5(7), STR_4(6), 
  4965 ;;		 -> STR_3(6), STR_2(15), STR_1(10), 
  4966 ;; Auto vars:     Size  Location     Type
  4967 ;;  i               2   18[COMRAM] int 
  4968 ;; Return value:  Size  Location     Type
  4969 ;;                  1    wreg      void 
  4970 ;; Registers used:
  4971 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4972 ;; Tracked objects:
  4973 ;;		On entry : 0/0
  4974 ;;		On exit  : 0/0
  4975 ;;		Unchanged: 0/0
  4976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4977 ;;      Params:         2       0       0       0       0       0       0
  4978 ;;      Locals:         2       0       0       0       0       0       0
  4979 ;;      Temps:          2       0       0       0       0       0       0
  4980 ;;      Totals:         6       0       0       0       0       0       0
  4981 ;;Total ram usage:        6 bytes
  4982 ;; Hardware stack levels used:    1
  4983 ;; Hardware stack levels required when called:    5
  4984 ;; This function calls:
  4985 ;;		_lcdChar
  4986 ;; This function is called by:
  4987 ;;		_displayMenuOption
  4988 ;;		_rendererStart
  4989 ;;		_gameOver
  4990 ;; This function uses a non-reentrant model
  4991 ;;
  4992                           
  4993                           	psect	text33
  4994  006AEE                     __ptext33:
  4995                           	callstack 0
  4996  006AEE                     _lcdString:
  4997                           	callstack 22
  4998  006AEE                     
  4999                           ;lcd.c: 58:  int i = 0;
  5000  006AEE  0E00               	movlw	0
  5001  006AF0  6E66               	movwf	(lcdString@i+1)^0,c
  5002  006AF2  0E00               	movlw	0
  5003  006AF4  6E65               	movwf	lcdString@i^0,c
  5004                           
  5005                           ;lcd.c: 59:  while (msg[i] != 0) {
  5006  006AF6  EF97  F035         	goto	l2652
  5007  006AFA                     l2648:
  5008                           
  5009                           ;lcd.c: 60:   lcdChar(msg[i]);
  5010  006AFA  5065               	movf	lcdString@i^0,w,c
  5011  006AFC  2461               	addwf	lcdString@msg^0,w,c
  5012  006AFE  6E63               	movwf	??_lcdString^0,c
  5013  006B00  5066               	movf	(lcdString@i+1)^0,w,c
  5014  006B02  2062               	addwfc	(lcdString@msg+1)^0,w,c
  5015  006B04  6E64               	movwf	(??_lcdString+1)^0,c
  5016  006B06  C063  FFF6         	movff	??_lcdString,tblptrl
  5017  006B0A  C064  FFF7         	movff	??_lcdString+1,tblptrh
  5018  006B0E  6AF8               	clrf	tblptru,c
  5019  006B10  0E05               	movlw	(high __ramtop+-1)
  5020  006B12  64F7               	cpfsgt	tblptrh,c
  5021  006B14  D003               	bra	u2077
  5022  006B16  0008               	tblrd		*
  5023  006B18  50F5               	movf	tablat,w,c
  5024  006B1A  D005               	bra	u2070
  5025  006B1C                     u2077:
  5026  006B1C  CFF6 FFE9          	movff	tblptrl,fsr0l
  5027  006B20  CFF7 FFEA          	movff	tblptrh,fsr0h
  5028  006B24  50EF               	movf	indf0,w,c
  5029  006B26                     u2070:
  5030  006B26  EC73  F030         	call	_lcdChar
  5031  006B2A                     
  5032                           ;lcd.c: 61:   i++;
  5033  006B2A  4A65               	infsnz	lcdString@i^0,f,c
  5034  006B2C  2A66               	incf	(lcdString@i+1)^0,f,c
  5035  006B2E                     l2652:
  5036                           
  5037                           ;lcd.c: 59:  while (msg[i] != 0) {
  5038  006B2E  5065               	movf	lcdString@i^0,w,c
  5039  006B30  2461               	addwf	lcdString@msg^0,w,c
  5040  006B32  6E63               	movwf	??_lcdString^0,c
  5041  006B34  5066               	movf	(lcdString@i+1)^0,w,c
  5042  006B36  2062               	addwfc	(lcdString@msg+1)^0,w,c
  5043  006B38  6E64               	movwf	(??_lcdString+1)^0,c
  5044  006B3A  C063  FFF6         	movff	??_lcdString,tblptrl
  5045  006B3E  C064  FFF7         	movff	??_lcdString+1,tblptrh
  5046  006B42  6AF8               	clrf	tblptru,c
  5047  006B44  0E05               	movlw	(high __ramtop+-1)
  5048  006B46  64F7               	cpfsgt	tblptrh,c
  5049  006B48  D003               	bra	u2087
  5050  006B4A  0008               	tblrd		*
  5051  006B4C  50F5               	movf	tablat,w,c
  5052  006B4E  D005               	bra	u2080
  5053  006B50                     u2087:
  5054  006B50  CFF6 FFE9          	movff	tblptrl,fsr0l
  5055  006B54  CFF7 FFEA          	movff	tblptrh,fsr0h
  5056  006B58  50EF               	movf	indf0,w,c
  5057  006B5A                     u2080:
  5058  006B5A  0900               	iorlw	0
  5059  006B5C  A4D8               	btfss	status,2,c
  5060  006B5E  EFB3  F035         	goto	u2091
  5061  006B62  EFB5  F035         	goto	u2090
  5062  006B66                     u2091:
  5063  006B66  EF7D  F035         	goto	l2648
  5064  006B6A                     u2090:
  5065  006B6A  0012               	return		;funcret
  5066  006B6C                     __end_of_lcdString:
  5067                           	callstack 0
  5068                           
  5069 ;; *************** function _displayScreen *****************
  5070 ;; Defined at:
  5071 ;;		line 31 in file "renderer.c"
  5072 ;; Parameters:    Size  Location     Type
  5073 ;;		None
  5074 ;; Auto vars:     Size  Location     Type
  5075 ;;		None
  5076 ;; Return value:  Size  Location     Type
  5077 ;;                  1    wreg      void 
  5078 ;; Registers used:
  5079 ;;		wreg, status,2, status,0, cstack
  5080 ;; Tracked objects:
  5081 ;;		On entry : 0/0
  5082 ;;		On exit  : 0/0
  5083 ;;		Unchanged: 0/0
  5084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5085 ;;      Params:         0       0       0       0       0       0       0
  5086 ;;      Locals:         0       0       0       0       0       0       0
  5087 ;;      Temps:          0       0       0       0       0       0       0
  5088 ;;      Totals:         0       0       0       0       0       0       0
  5089 ;;Total ram usage:        0 bytes
  5090 ;; Hardware stack levels used:    1
  5091 ;; Hardware stack levels required when called:    6
  5092 ;; This function calls:
  5093 ;;		_lcdChar
  5094 ;;		_lcdCommand
  5095 ;;		_lcdPosition
  5096 ;; This function is called by:
  5097 ;;		_rendererStart
  5098 ;; This function uses a non-reentrant model
  5099 ;;
  5100                           
  5101                           	psect	text34
  5102  006686                     __ptext34:
  5103                           	callstack 0
  5104  006686                     _displayScreen:
  5105                           	callstack 22
  5106  006686                     
  5107                           ;renderer.c: 32:     lcdCommand(0x01);
  5108  006686  0E01               	movlw	1
  5109  006688  EC82  F030         	call	_lcdCommand
  5110                           
  5111                           ;renderer.c: 33:     lcdPosition(0, 0);
  5112  00668C  0E00               	movlw	0
  5113  00668E  6E62               	movwf	(lcdPosition@line+1)^0,c
  5114  006690  0E00               	movlw	0
  5115  006692  6E61               	movwf	lcdPosition@line^0,c
  5116  006694  0E00               	movlw	0
  5117  006696  6E64               	movwf	(lcdPosition@col+1)^0,c
  5118  006698  0E00               	movlw	0
  5119  00669A  6E63               	movwf	lcdPosition@col^0,c
  5120  00669C  ECD0  F031         	call	_lcdPosition	;wreg free
  5121                           
  5122                           ;renderer.c: 34:     lcdChar(0);
  5123  0066A0  0E00               	movlw	0
  5124  0066A2  EC73  F030         	call	_lcdChar
  5125                           
  5126                           ;renderer.c: 35:     lcdChar(2);
  5127  0066A6  0E02               	movlw	2
  5128  0066A8  EC73  F030         	call	_lcdChar
  5129                           
  5130                           ;renderer.c: 36:     lcdChar(4);
  5131  0066AC  0E04               	movlw	4
  5132  0066AE  EC73  F030         	call	_lcdChar
  5133                           
  5134                           ;renderer.c: 37:     lcdPosition(1, 0);
  5135  0066B2  0E00               	movlw	0
  5136  0066B4  6E62               	movwf	(lcdPosition@line+1)^0,c
  5137  0066B6  0E01               	movlw	1
  5138  0066B8  6E61               	movwf	lcdPosition@line^0,c
  5139  0066BA  0E00               	movlw	0
  5140  0066BC  6E64               	movwf	(lcdPosition@col+1)^0,c
  5141  0066BE  0E00               	movlw	0
  5142  0066C0  6E63               	movwf	lcdPosition@col^0,c
  5143  0066C2  ECD0  F031         	call	_lcdPosition	;wreg free
  5144                           
  5145                           ;renderer.c: 38:     lcdChar(1);
  5146  0066C6  0E01               	movlw	1
  5147  0066C8  EC73  F030         	call	_lcdChar
  5148                           
  5149                           ;renderer.c: 39:     lcdChar(3);
  5150  0066CC  0E03               	movlw	3
  5151  0066CE  EC73  F030         	call	_lcdChar
  5152                           
  5153                           ;renderer.c: 40:     lcdChar(5);
  5154  0066D2  0E05               	movlw	5
  5155  0066D4  EC73  F030         	call	_lcdChar
  5156  0066D8  0012               	return		;funcret
  5157  0066DA                     __end_of_displayScreen:
  5158                           	callstack 0
  5159                           
  5160 ;; *************** function _lcdPosition *****************
  5161 ;; Defined at:
  5162 ;;		line 44 in file "lcd.c"
  5163 ;; Parameters:    Size  Location     Type
  5164 ;;  line            2   14[COMRAM] int 
  5165 ;;  col             2   16[COMRAM] int 
  5166 ;; Auto vars:     Size  Location     Type
  5167 ;;		None
  5168 ;; Return value:  Size  Location     Type
  5169 ;;                  1    wreg      void 
  5170 ;; Registers used:
  5171 ;;		wreg, status,2, status,0, cstack
  5172 ;; Tracked objects:
  5173 ;;		On entry : 0/0
  5174 ;;		On exit  : 0/0
  5175 ;;		Unchanged: 0/0
  5176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5177 ;;      Params:         4       0       0       0       0       0       0
  5178 ;;      Locals:         0       0       0       0       0       0       0
  5179 ;;      Temps:          0       0       0       0       0       0       0
  5180 ;;      Totals:         4       0       0       0       0       0       0
  5181 ;;Total ram usage:        4 bytes
  5182 ;; Hardware stack levels used:    1
  5183 ;; Hardware stack levels required when called:    5
  5184 ;; This function calls:
  5185 ;;		_lcdCommand
  5186 ;; This function is called by:
  5187 ;;		_displayMenu
  5188 ;;		_displayScreen
  5189 ;;		_rendererStart
  5190 ;;		_gameOver
  5191 ;; This function uses a non-reentrant model
  5192 ;;
  5193                           
  5194                           	psect	text35
  5195  0063A0                     __ptext35:
  5196                           	callstack 0
  5197  0063A0                     _lcdPosition:
  5198                           	callstack 23
  5199  0063A0                     
  5200                           ;lcd.c: 45:  if (line == 0) {
  5201  0063A0  5061               	movf	lcdPosition@line^0,w,c
  5202  0063A2  1062               	iorwf	(lcdPosition@line+1)^0,w,c
  5203  0063A4  A4D8               	btfss	status,2,c
  5204  0063A6  EFD7  F031         	goto	u2051
  5205  0063AA  EFD9  F031         	goto	u2050
  5206  0063AE                     u2051:
  5207  0063AE  EFDE  F031         	goto	l2642
  5208  0063B2                     u2050:
  5209  0063B2                     
  5210                           ;lcd.c: 46:   lcdCommand(0x80 + (col % 16));
  5211  0063B2  5063               	movf	lcdPosition@col^0,w,c
  5212  0063B4  0B0F               	andlw	15
  5213  0063B6  0F80               	addlw	128
  5214  0063B8  EC82  F030         	call	_lcdCommand
  5215  0063BC                     l2642:
  5216                           
  5217                           ;lcd.c: 48:  if (line == 1) {
  5218  0063BC  0461               	decf	lcdPosition@line^0,w,c
  5219  0063BE  1062               	iorwf	(lcdPosition@line+1)^0,w,c
  5220  0063C0  A4D8               	btfss	status,2,c
  5221  0063C2  EFE5  F031         	goto	u2061
  5222  0063C6  EFE7  F031         	goto	u2060
  5223  0063CA                     u2061:
  5224  0063CA  EFEC  F031         	goto	l158
  5225  0063CE                     u2060:
  5226  0063CE                     
  5227                           ;lcd.c: 49:   lcdCommand(0xC0 + (col % 16));
  5228  0063CE  5063               	movf	lcdPosition@col^0,w,c
  5229  0063D0  0B0F               	andlw	15
  5230  0063D2  0FC0               	addlw	192
  5231  0063D4  EC82  F030         	call	_lcdCommand
  5232  0063D8                     l158:
  5233  0063D8  0012               	return		;funcret
  5234  0063DA                     __end_of_lcdPosition:
  5235                           	callstack 0
  5236                           
  5237 ;; *************** function _mixerRestart *****************
  5238 ;; Defined at:
  5239 ;;		line 26 in file "mixer.c"
  5240 ;; Parameters:    Size  Location     Type
  5241 ;;		None
  5242 ;; Auto vars:     Size  Location     Type
  5243 ;;		None
  5244 ;; Return value:  Size  Location     Type
  5245 ;;                  1    wreg      void 
  5246 ;; Registers used:
  5247 ;;		wreg, status,2
  5248 ;; Tracked objects:
  5249 ;;		On entry : 0/0
  5250 ;;		On exit  : 0/0
  5251 ;;		Unchanged: 0/0
  5252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5253 ;;      Params:         0       0       0       0       0       0       0
  5254 ;;      Locals:         0       0       0       0       0       0       0
  5255 ;;      Temps:          0       0       0       0       0       0       0
  5256 ;;      Totals:         0       0       0       0       0       0       0
  5257 ;;Total ram usage:        0 bytes
  5258 ;; Hardware stack levels used:    1
  5259 ;; This function calls:
  5260 ;;		Nothing
  5261 ;; This function is called by:
  5262 ;;		_gameStart
  5263 ;; This function uses a non-reentrant model
  5264 ;;
  5265                           
  5266                           	psect	text36
  5267  006074                     __ptext36:
  5268                           	callstack 0
  5269  006074                     _mixerRestart:
  5270                           	callstack 29
  5271  006074                     
  5272                           ;mixer.c: 27:     current_note = 0;
  5273  006074  0E00               	movlw	0
  5274  006076  6E3A               	movwf	_current_note^0,c
  5275                           
  5276                           ;mixer.c: 28:     note_time=0;
  5277  006078  0E00               	movlw	0
  5278  00607A  6E39               	movwf	_note_time^0,c
  5279                           
  5280                           ;mixer.c: 29:     pause_time=0;
  5281  00607C  0E00               	movlw	0
  5282  00607E  6E38               	movwf	_pause_time^0,c
  5283                           
  5284                           ;mixer.c: 30:     playing_note=0;
  5285  006080  0E00               	movlw	0
  5286  006082  6E37               	movwf	_playing_note^0,c
  5287  006084  0012               	return		;funcret
  5288  006086                     __end_of_mixerRestart:
  5289                           	callstack 0
  5290                           
  5291 ;; *************** function _gameInit *****************
  5292 ;; Defined at:
  5293 ;;		line 61 in file "game.c"
  5294 ;; Parameters:    Size  Location     Type
  5295 ;;		None
  5296 ;; Auto vars:     Size  Location     Type
  5297 ;;		None
  5298 ;; Return value:  Size  Location     Type
  5299 ;;                  1    wreg      void 
  5300 ;; Registers used:
  5301 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5302 ;; Tracked objects:
  5303 ;;		On entry : 0/0
  5304 ;;		On exit  : 0/0
  5305 ;;		Unchanged: 0/0
  5306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5307 ;;      Params:         0       0       0       0       0       0       0
  5308 ;;      Locals:         0       0       0       0       0       0       0
  5309 ;;      Temps:          0       0       0       0       0       0       0
  5310 ;;      Totals:         0       0       0       0       0       0       0
  5311 ;;Total ram usage:        0 bytes
  5312 ;; Hardware stack levels used:    1
  5313 ;; Hardware stack levels required when called:    8
  5314 ;; This function calls:
  5315 ;;		_kpInit
  5316 ;;		_mixerInit
  5317 ;;		_newGame
  5318 ;;		_rendererInit
  5319 ;;		_timerInit
  5320 ;; This function is called by:
  5321 ;;		_main
  5322 ;; This function uses a non-reentrant model
  5323 ;;
  5324                           
  5325                           	psect	text37
  5326  006086                     __ptext37:
  5327                           	callstack 0
  5328  006086                     _gameInit:
  5329                           	callstack 22
  5330  006086                     
  5331                           ;game.c: 62:     kpInit();
  5332  006086  EC9A  F031         	call	_kpInit	;wreg free
  5333  00608A                     
  5334                           ;game.c: 63:     mixerInit();
  5335  00608A  ECC7  F033         	call	_mixerInit	;wreg free
  5336  00608E                     
  5337                           ;game.c: 64:     timerInit();
  5338  00608E  EC1B  F030         	call	_timerInit	;wreg free
  5339  006092                     
  5340                           ;game.c: 65:     rendererInit();
  5341  006092  EC40  F031         	call	_rendererInit	;wreg free
  5342  006096                     
  5343                           ;game.c: 67:     newGame();
  5344  006096  ECCE  F032         	call	_newGame	;wreg free
  5345  00609A  0012               	return		;funcret
  5346  00609C                     __end_of_gameInit:
  5347                           	callstack 0
  5348                           
  5349 ;; *************** function _timerInit *****************
  5350 ;; Defined at:
  5351 ;;		line 59 in file "timer.c"
  5352 ;; Parameters:    Size  Location     Type
  5353 ;;		None
  5354 ;; Auto vars:     Size  Location     Type
  5355 ;;		None
  5356 ;; Return value:  Size  Location     Type
  5357 ;;                  1    wreg      void 
  5358 ;; Registers used:
  5359 ;;		wreg, status,2, status,0
  5360 ;; Tracked objects:
  5361 ;;		On entry : 0/0
  5362 ;;		On exit  : 0/0
  5363 ;;		Unchanged: 0/0
  5364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5365 ;;      Params:         0       0       0       0       0       0       0
  5366 ;;      Locals:         0       0       0       0       0       0       0
  5367 ;;      Temps:          0       0       0       0       0       0       0
  5368 ;;      Totals:         0       0       0       0       0       0       0
  5369 ;;Total ram usage:        0 bytes
  5370 ;; Hardware stack levels used:    1
  5371 ;; This function calls:
  5372 ;;		Nothing
  5373 ;; This function is called by:
  5374 ;;		_gameInit
  5375 ;; This function uses a non-reentrant model
  5376 ;;
  5377                           
  5378                           	psect	text38
  5379  006036                     __ptext38:
  5380                           	callstack 0
  5381  006036                     _timerInit:
  5382                           	callstack 29
  5383  006036                     
  5384                           ;timer.c: 61:  T0CON = 0b00000000;
  5385  006036  0E00               	movlw	0
  5386  006038  6ED5               	movwf	213,c	;volatile
  5387  00603A                     
  5388                           ;timer.c: 62:  ((T0CON) |= (1<<(7)));
  5389  00603A  8ED5               	bsf	213,7,c	;volatile
  5390  00603C  0012               	return		;funcret
  5391  00603E                     __end_of_timerInit:
  5392                           	callstack 0
  5393                           
  5394 ;; *************** function _rendererInit *****************
  5395 ;; Defined at:
  5396 ;;		line 51 in file "renderer.c"
  5397 ;; Parameters:    Size  Location     Type
  5398 ;;		None
  5399 ;; Auto vars:     Size  Location     Type
  5400 ;;  i               1   25[COMRAM] unsigned char 
  5401 ;; Return value:  Size  Location     Type
  5402 ;;                  1    wreg      void 
  5403 ;; Registers used:
  5404 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5405 ;; Tracked objects:
  5406 ;;		On entry : 0/0
  5407 ;;		On exit  : 0/0
  5408 ;;		Unchanged: 0/0
  5409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5410 ;;      Params:         0       0       0       0       0       0       0
  5411 ;;      Locals:         1       0       0       0       0       0       0
  5412 ;;      Temps:          0       0       0       0       0       0       0
  5413 ;;      Totals:         1       0       0       0       0       0       0
  5414 ;;Total ram usage:        1 bytes
  5415 ;; Hardware stack levels used:    1
  5416 ;; Hardware stack levels required when called:    7
  5417 ;; This function calls:
  5418 ;;		_cleanScreean
  5419 ;;		_lcdChar
  5420 ;;		_lcdCommand
  5421 ;;		_lcdInit
  5422 ;; This function is called by:
  5423 ;;		_gameInit
  5424 ;; This function uses a non-reentrant model
  5425 ;;
  5426                           
  5427                           	psect	text39
  5428  006280                     __ptext39:
  5429                           	callstack 0
  5430  006280                     _rendererInit:
  5431                           	callstack 22
  5432  006280                     
  5433                           ;renderer.c: 52:     lcdInit();
  5434  006280  ECA0  F036         	call	_lcdInit	;wreg free
  5435  006284                     
  5436                           ;renderer.c: 54:     cleanScreean();
  5437  006284  ECED  F031         	call	_cleanScreean	;wreg free
  5438  006288                     
  5439                           ;renderer.c: 57:     lcdCommand(0x46);
  5440  006288  0E46               	movlw	70
  5441  00628A  EC82  F030         	call	_lcdCommand
  5442  00628E                     
  5443                           ;renderer.c: 58:     for (char i = 0; i < 8; i++) {
  5444  00628E  0E00               	movlw	0
  5445  006290  6E6C               	movwf	rendererInit@i^0,c
  5446  006292                     l3010:
  5447                           
  5448                           ;renderer.c: 59:         lcdChar(0b11000);
  5449  006292  0E18               	movlw	24
  5450  006294  EC73  F030         	call	_lcdChar
  5451  006298                     
  5452                           ;renderer.c: 60:     }
  5453  006298  2A6C               	incf	rendererInit@i^0,f,c
  5454  00629A  0E07               	movlw	7
  5455  00629C  646C               	cpfsgt	rendererInit@i^0,c
  5456  00629E  EF53  F031         	goto	u2521
  5457  0062A2  EF55  F031         	goto	u2520
  5458  0062A6                     u2521:
  5459  0062A6  EF49  F031         	goto	l3010
  5460  0062AA                     u2520:
  5461  0062AA  0012               	return		;funcret
  5462  0062AC                     __end_of_rendererInit:
  5463                           	callstack 0
  5464                           
  5465 ;; *************** function _lcdInit *****************
  5466 ;; Defined at:
  5467 ;;		line 72 in file "lcd.c"
  5468 ;; Parameters:    Size  Location     Type
  5469 ;;		None
  5470 ;; Auto vars:     Size  Location     Type
  5471 ;;		None
  5472 ;; Return value:  Size  Location     Type
  5473 ;;                  1    wreg      void 
  5474 ;; Registers used:
  5475 ;;		wreg, status,2, status,0, cstack
  5476 ;; Tracked objects:
  5477 ;;		On entry : 0/0
  5478 ;;		On exit  : 0/0
  5479 ;;		Unchanged: 0/0
  5480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5481 ;;      Params:         0       0       0       0       0       0       0
  5482 ;;      Locals:         0       0       0       0       0       0       0
  5483 ;;      Temps:          0       0       0       0       0       0       0
  5484 ;;      Totals:         0       0       0       0       0       0       0
  5485 ;;Total ram usage:        0 bytes
  5486 ;; Hardware stack levels used:    1
  5487 ;; Hardware stack levels required when called:    5
  5488 ;; This function calls:
  5489 ;;		_delayMicro
  5490 ;;		_delayMili
  5491 ;;		_lcdCommand
  5492 ;;		_pinMode
  5493 ;;		_pushNibble
  5494 ;;		_soInit
  5495 ;; This function is called by:
  5496 ;;		_rendererInit
  5497 ;; This function uses a non-reentrant model
  5498 ;;
  5499                           
  5500                           	psect	text40
  5501  006D40                     __ptext40:
  5502                           	callstack 0
  5503  006D40                     _lcdInit:
  5504                           	callstack 23
  5505  006D40                     
  5506                           ;lcd.c: 73:  pinMode(PIN_D4, 0);
  5507  006D40  0E00               	movlw	0
  5508  006D42  6E54               	movwf	(pinMode@pin+1)^0,c
  5509  006D44  0E1C               	movlw	28
  5510  006D46  6E53               	movwf	pinMode@pin^0,c
  5511  006D48  0E00               	movlw	0
  5512  006D4A  6E56               	movwf	(pinMode@type+1)^0,c
  5513  006D4C  0E00               	movlw	0
  5514  006D4E  6E55               	movwf	pinMode@type^0,c
  5515  006D50  EC8A  F03C         	call	_pinMode	;wreg free
  5516                           
  5517                           ;lcd.c: 74:  pinMode(PIN_D5, 0);
  5518  006D54  0E00               	movlw	0
  5519  006D56  6E54               	movwf	(pinMode@pin+1)^0,c
  5520  006D58  0E1D               	movlw	29
  5521  006D5A  6E53               	movwf	pinMode@pin^0,c
  5522  006D5C  0E00               	movlw	0
  5523  006D5E  6E56               	movwf	(pinMode@type+1)^0,c
  5524  006D60  0E00               	movlw	0
  5525  006D62  6E55               	movwf	pinMode@type^0,c
  5526  006D64  EC8A  F03C         	call	_pinMode	;wreg free
  5527                           
  5528                           ;lcd.c: 75:  soInit();
  5529  006D68  EC29  F032         	call	_soInit	;wreg free
  5530                           
  5531                           ;lcd.c: 76:  delayMili(15);
  5532  006D6C  0E00               	movlw	0
  5533  006D6E  6E54               	movwf	(delayMili@a+1)^0,c
  5534  006D70  0E0F               	movlw	15
  5535  006D72  6E53               	movwf	delayMili@a^0,c
  5536  006D74  EC82  F031         	call	_delayMili	;wreg free
  5537                           
  5538                           ;lcd.c: 78:  pushNibble(0x03, 0);
  5539  006D78  0E00               	movlw	0
  5540  006D7A  6E5D               	movwf	(pushNibble@rs+1)^0,c
  5541  006D7C  0E00               	movlw	0
  5542  006D7E  6E5C               	movwf	pushNibble@rs^0,c
  5543  006D80  0E03               	movlw	3
  5544  006D82  ECC8  F030         	call	_pushNibble
  5545                           
  5546                           ;lcd.c: 79:  delayMili(5);
  5547  006D86  0E00               	movlw	0
  5548  006D88  6E54               	movwf	(delayMili@a+1)^0,c
  5549  006D8A  0E05               	movlw	5
  5550  006D8C  6E53               	movwf	delayMili@a^0,c
  5551  006D8E  EC82  F031         	call	_delayMili	;wreg free
  5552                           
  5553                           ;lcd.c: 80:  pushNibble(0x03, 0);
  5554  006D92  0E00               	movlw	0
  5555  006D94  6E5D               	movwf	(pushNibble@rs+1)^0,c
  5556  006D96  0E00               	movlw	0
  5557  006D98  6E5C               	movwf	pushNibble@rs^0,c
  5558  006D9A  0E03               	movlw	3
  5559  006D9C  ECC8  F030         	call	_pushNibble
  5560  006DA0                     
  5561                           ;lcd.c: 81:  delayMicro(160);
  5562  006DA0  0E00               	movlw	0
  5563  006DA2  6E54               	movwf	(delayMicro@a+1)^0,c
  5564  006DA4  0EA0               	movlw	160
  5565  006DA6  6E53               	movwf	delayMicro@a^0,c
  5566  006DA8  EC15  F030         	call	_delayMicro	;wreg free
  5567  006DAC                     
  5568                           ;lcd.c: 82:  pushNibble(0x03, 0);
  5569  006DAC  0E00               	movlw	0
  5570  006DAE  6E5D               	movwf	(pushNibble@rs+1)^0,c
  5571  006DB0  0E00               	movlw	0
  5572  006DB2  6E5C               	movwf	pushNibble@rs^0,c
  5573  006DB4  0E03               	movlw	3
  5574  006DB6  ECC8  F030         	call	_pushNibble
  5575                           
  5576                           ;lcd.c: 83:  delayMicro(160);
  5577  006DBA  0E00               	movlw	0
  5578  006DBC  6E54               	movwf	(delayMicro@a+1)^0,c
  5579  006DBE  0EA0               	movlw	160
  5580  006DC0  6E53               	movwf	delayMicro@a^0,c
  5581  006DC2  EC15  F030         	call	_delayMicro	;wreg free
  5582  006DC6                     
  5583                           ;lcd.c: 85:  pushNibble(0x02, 0);
  5584  006DC6  0E00               	movlw	0
  5585  006DC8  6E5D               	movwf	(pushNibble@rs+1)^0,c
  5586  006DCA  0E00               	movlw	0
  5587  006DCC  6E5C               	movwf	pushNibble@rs^0,c
  5588  006DCE  0E02               	movlw	2
  5589  006DD0  ECC8  F030         	call	_pushNibble
  5590  006DD4                     
  5591                           ;lcd.c: 86:  delayMili(10);
  5592  006DD4  0E00               	movlw	0
  5593  006DD6  6E54               	movwf	(delayMili@a+1)^0,c
  5594  006DD8  0E0A               	movlw	10
  5595  006DDA  6E53               	movwf	delayMili@a^0,c
  5596  006DDC  EC82  F031         	call	_delayMili	;wreg free
  5597  006DE0                     
  5598                           ;lcd.c: 88:  lcdCommand(0x28);
  5599  006DE0  0E28               	movlw	40
  5600  006DE2  EC82  F030         	call	_lcdCommand
  5601  006DE6                     
  5602                           ;lcd.c: 89:  lcdCommand(0x08 + 0x04);
  5603  006DE6  0E0C               	movlw	12
  5604  006DE8  EC82  F030         	call	_lcdCommand
  5605  006DEC                     
  5606                           ;lcd.c: 90:  lcdCommand(0x01);
  5607  006DEC  0E01               	movlw	1
  5608  006DEE  EC82  F030         	call	_lcdCommand
  5609  006DF2  0012               	return		;funcret
  5610  006DF4                     __end_of_lcdInit:
  5611                           	callstack 0
  5612                           
  5613 ;; *************** function _pushNibble *****************
  5614 ;; Defined at:
  5615 ;;		line 25 in file "lcd.c"
  5616 ;; Parameters:    Size  Location     Type
  5617 ;;  value           1    wreg     unsigned char 
  5618 ;;  rs              2    9[COMRAM] int 
  5619 ;; Auto vars:     Size  Location     Type
  5620 ;;  value           1   11[COMRAM] unsigned char 
  5621 ;; Return value:  Size  Location     Type
  5622 ;;                  1    wreg      void 
  5623 ;; Registers used:
  5624 ;;		wreg, status,2, status,0, cstack
  5625 ;; Tracked objects:
  5626 ;;		On entry : 0/0
  5627 ;;		On exit  : 0/0
  5628 ;;		Unchanged: 0/0
  5629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5630 ;;      Params:         2       0       0       0       0       0       0
  5631 ;;      Locals:         1       0       0       0       0       0       0
  5632 ;;      Temps:          0       0       0       0       0       0       0
  5633 ;;      Totals:         3       0       0       0       0       0       0
  5634 ;;Total ram usage:        3 bytes
  5635 ;; Hardware stack levels used:    1
  5636 ;; Hardware stack levels required when called:    3
  5637 ;; This function calls:
  5638 ;;		_digitalWrite
  5639 ;;		_pulseEnablePin
  5640 ;;		_soWrite
  5641 ;; This function is called by:
  5642 ;;		_lcdInit
  5643 ;; This function uses a non-reentrant model
  5644 ;;
  5645                           
  5646                           	psect	text41
  5647  006190                     __ptext41:
  5648                           	callstack 0
  5649  006190                     _pushNibble:
  5650                           	callstack 24
  5651                           
  5652                           ;incstack = 0
  5653                           ;pushNibble@value stored from wreg
  5654  006190  6E5E               	movwf	pushNibble@value^0,c
  5655  006192                     
  5656                           ;lcd.c: 26:  soWrite(value);
  5657  006192  C05E  F059         	movff	pushNibble@value,soWrite@value
  5658  006196  6A5A               	clrf	(soWrite@value+1)^0,c
  5659  006198  ECF4  F032         	call	_soWrite	;wreg free
  5660                           
  5661                           ;lcd.c: 27:  digitalWrite(PIN_D5, rs);
  5662  00619C  0E00               	movlw	0
  5663  00619E  6E54               	movwf	(digitalWrite@pin+1)^0,c
  5664  0061A0  0E1D               	movlw	29
  5665  0061A2  6E53               	movwf	digitalWrite@pin^0,c
  5666  0061A4  C05C  F055         	movff	pushNibble@rs,digitalWrite@value
  5667  0061A8  C05D  F056         	movff	pushNibble@rs+1,digitalWrite@value+1
  5668  0061AC  ECB1  F03D         	call	_digitalWrite	;wreg free
  5669                           
  5670                           ;lcd.c: 28:  pulseEnablePin();
  5671  0061B0  EC68  F032         	call	_pulseEnablePin	;wreg free
  5672  0061B4  0012               	return		;funcret
  5673  0061B6                     __end_of_pushNibble:
  5674                           	callstack 0
  5675                           
  5676 ;; *************** function _newGame *****************
  5677 ;; Defined at:
  5678 ;;		line 70 in file "game.c"
  5679 ;; Parameters:    Size  Location     Type
  5680 ;;		None
  5681 ;; Auto vars:     Size  Location     Type
  5682 ;;		None
  5683 ;; Return value:  Size  Location     Type
  5684 ;;                  1    wreg      void 
  5685 ;; Registers used:
  5686 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5687 ;; Tracked objects:
  5688 ;;		On entry : 0/0
  5689 ;;		On exit  : 0/0
  5690 ;;		Unchanged: 0/0
  5691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5692 ;;      Params:         0       0       0       0       0       0       0
  5693 ;;      Locals:         0       0       0       0       0       0       0
  5694 ;;      Temps:          0       0       0       0       0       0       0
  5695 ;;      Totals:         0       0       0       0       0       0       0
  5696 ;;Total ram usage:        0 bytes
  5697 ;; Hardware stack levels used:    1
  5698 ;; Hardware stack levels required when called:    7
  5699 ;; This function calls:
  5700 ;;		_cleanScreean
  5701 ;;		_replaceFood
  5702 ;;		_resetPoints
  5703 ;;		_setPixel
  5704 ;; This function is called by:
  5705 ;;		_menuUpdate
  5706 ;;		_main
  5707 ;;		_gameInit
  5708 ;; This function uses a non-reentrant model
  5709 ;;
  5710                           
  5711                           	psect	text42
  5712  00659C                     __ptext42:
  5713                           	callstack 0
  5714  00659C                     _newGame:
  5715                           	callstack 23
  5716  00659C                     
  5717                           ;game.c: 72:     snake[0].x = 1;
  5718  00659C  0E01               	movlw	1
  5719  00659E  6E01               	movwf	_snake^0,c
  5720                           
  5721                           ;game.c: 73:     snake[0].y = 0;
  5722  0065A0  0E00               	movlw	0
  5723  0065A2  6E02               	movwf	(_snake+1)^0,c
  5724                           
  5725                           ;game.c: 74:     snake[1].x = 0;
  5726  0065A4  0E00               	movlw	0
  5727  0065A6  6E03               	movwf	(_snake+2)^0,c
  5728                           
  5729                           ;game.c: 75:     snake[1].y = 0;
  5730  0065A8  0E00               	movlw	0
  5731  0065AA  6E04               	movwf	(_snake+3)^0,c
  5732                           
  5733                           ;game.c: 76:     snake_size = 1;
  5734  0065AC  0E01               	movlw	1
  5735  0065AE  6E76               	movwf	_snake_size^0,c
  5736  0065B0                     
  5737                           ;game.c: 78:     resetPoints();
  5738  0065B0  ECB3  F031         	call	_resetPoints	;wreg free
  5739  0065B4                     
  5740                           ;game.c: 80:     replaceFood();
  5741  0065B4  ECEE  F030         	call	_replaceFood	;wreg free
  5742  0065B8                     
  5743                           ;game.c: 82:     cleanScreean();
  5744  0065B8  ECED  F031         	call	_cleanScreean	;wreg free
  5745  0065BC                     
  5746                           ;game.c: 85:     setPixel(snake[0].x, snake[0].y, 1);
  5747  0065BC  C002  F061         	movff	_snake+1,setPixel@y
  5748  0065C0  0E01               	movlw	1
  5749  0065C2  6E62               	movwf	setPixel@val^0,c
  5750  0065C4  5001               	movf	_snake^0,w,c
  5751  0065C6  EC8A  F038         	call	_setPixel
  5752  0065CA                     
  5753                           ;game.c: 86:     setPixel(snake[1].x, snake[1].y, 1);
  5754  0065CA  C004  F061         	movff	_snake+3,setPixel@y
  5755  0065CE  0E01               	movlw	1
  5756  0065D0  6E62               	movwf	setPixel@val^0,c
  5757  0065D2  5003               	movf	(_snake+2)^0,w,c
  5758  0065D4  EC8A  F038         	call	_setPixel
  5759  0065D8                     
  5760                           ;game.c: 89:     setPixel(food.x, food.y, 1);
  5761  0065D8  C02C  F061         	movff	_food+1,setPixel@y
  5762  0065DC  0E01               	movlw	1
  5763  0065DE  6E62               	movwf	setPixel@val^0,c
  5764  0065E0  502B               	movf	_food^0,w,c
  5765  0065E2  EC8A  F038         	call	_setPixel
  5766  0065E6  0012               	return		;funcret
  5767  0065E8                     __end_of_newGame:
  5768                           	callstack 0
  5769                           
  5770 ;; *************** function _resetPoints *****************
  5771 ;; Defined at:
  5772 ;;		line 47 in file "game.c"
  5773 ;; Parameters:    Size  Location     Type
  5774 ;;		None
  5775 ;; Auto vars:     Size  Location     Type
  5776 ;;  i               2    0[COMRAM] int 
  5777 ;; Return value:  Size  Location     Type
  5778 ;;                  1    wreg      void 
  5779 ;; Registers used:
  5780 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5781 ;; Tracked objects:
  5782 ;;		On entry : 0/0
  5783 ;;		On exit  : 0/0
  5784 ;;		Unchanged: 0/0
  5785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5786 ;;      Params:         0       0       0       0       0       0       0
  5787 ;;      Locals:         2       0       0       0       0       0       0
  5788 ;;      Temps:          0       0       0       0       0       0       0
  5789 ;;      Totals:         2       0       0       0       0       0       0
  5790 ;;Total ram usage:        2 bytes
  5791 ;; Hardware stack levels used:    1
  5792 ;; This function calls:
  5793 ;;		Nothing
  5794 ;; This function is called by:
  5795 ;;		_newGame
  5796 ;; This function uses a non-reentrant model
  5797 ;;
  5798                           
  5799                           	psect	text43
  5800  006366                     __ptext43:
  5801                           	callstack 0
  5802  006366                     _resetPoints:
  5803                           	callstack 29
  5804  006366                     
  5805                           ;game.c: 48:     for (int i = 0; i < 5; i ++) {
  5806  006366  0E00               	movlw	0
  5807  006368  6E54               	movwf	(resetPoints@i+1)^0,c
  5808  00636A  0E00               	movlw	0
  5809  00636C  6E53               	movwf	resetPoints@i^0,c
  5810  00636E                     l1854:
  5811                           
  5812                           ;game.c: 49:         points[i] = '0';
  5813  00636E  0E6F               	movlw	low _points
  5814  006370  2453               	addwf	resetPoints@i^0,w,c
  5815  006372  6ED9               	movwf	fsr2l,c
  5816  006374  0E00               	movlw	high _points
  5817  006376  2054               	addwfc	(resetPoints@i+1)^0,w,c
  5818  006378  6EDA               	movwf	fsr2h,c
  5819  00637A  0E30               	movlw	48
  5820  00637C  6EDF               	movwf	indf2,c
  5821  00637E                     
  5822                           ;game.c: 50:     }
  5823  00637E  4A53               	infsnz	resetPoints@i^0,f,c
  5824  006380  2A54               	incf	(resetPoints@i+1)^0,f,c
  5825  006382  BE54               	btfsc	(resetPoints@i+1)^0,7,c
  5826  006384  EFCD  F031         	goto	u901
  5827  006388  5054               	movf	(resetPoints@i+1)^0,w,c
  5828  00638A  E109               	bnz	u900
  5829  00638C  0E05               	movlw	5
  5830  00638E  5C53               	subwf	resetPoints@i^0,w,c
  5831  006390  A0D8               	btfss	status,0,c
  5832  006392  EFCD  F031         	goto	u901
  5833  006396  EFCF  F031         	goto	u900
  5834  00639A                     u901:
  5835  00639A  EFB7  F031         	goto	l1854
  5836  00639E                     u900:
  5837  00639E  0012               	return		;funcret
  5838  0063A0                     __end_of_resetPoints:
  5839                           	callstack 0
  5840                           
  5841 ;; *************** function _replaceFood *****************
  5842 ;; Defined at:
  5843 ;;		line 31 in file "game.c"
  5844 ;; Parameters:    Size  Location     Type
  5845 ;;		None
  5846 ;; Auto vars:     Size  Location     Type
  5847 ;;		None
  5848 ;; Return value:  Size  Location     Type
  5849 ;;                  1    wreg      void 
  5850 ;; Registers used:
  5851 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5852 ;; Tracked objects:
  5853 ;;		On entry : 0/0
  5854 ;;		On exit  : 0/0
  5855 ;;		Unchanged: 0/0
  5856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5857 ;;      Params:         0       0       0       0       0       0       0
  5858 ;;      Locals:         0       0       0       0       0       0       0
  5859 ;;      Temps:          0       0       0       0       0       0       0
  5860 ;;      Totals:         0       0       0       0       0       0       0
  5861 ;;Total ram usage:        0 bytes
  5862 ;; Hardware stack levels used:    1
  5863 ;; Hardware stack levels required when called:    2
  5864 ;; This function calls:
  5865 ;;		___lwmod
  5866 ;;		_random
  5867 ;; This function is called by:
  5868 ;;		_newGame
  5869 ;;		_checkFood
  5870 ;; This function uses a non-reentrant model
  5871 ;;
  5872                           
  5873                           	psect	text44
  5874  0061DC                     __ptext44:
  5875                           	callstack 0
  5876  0061DC                     _replaceFood:
  5877                           	callstack 27
  5878  0061DC                     
  5879                           ;game.c: 32:     food.x = random() % (3*5);
  5880  0061DC  EC1B  F033         	call	_random	;wreg free
  5881  0061E0  C059  F05D         	movff	?_random,___lwmod@dividend
  5882  0061E4  C05A  F05E         	movff	?_random+1,___lwmod@dividend+1
  5883  0061E8  0E00               	movlw	0
  5884  0061EA  6E60               	movwf	(___lwmod@divisor+1)^0,c
  5885  0061EC  0E0F               	movlw	15
  5886  0061EE  6E5F               	movwf	___lwmod@divisor^0,c
  5887  0061F0  ECF6  F033         	call	___lwmod	;wreg free
  5888  0061F4  505D               	movf	?___lwmod^0,w,c
  5889  0061F6  6E2B               	movwf	_food^0,c
  5890                           
  5891                           ;game.c: 33:     food.y = random() % (2*8);
  5892  0061F8  EC1B  F033         	call	_random	;wreg free
  5893  0061FC  5059               	movf	?_random^0,w,c
  5894  0061FE  0B0F               	andlw	15
  5895  006200  6E2C               	movwf	(_food+1)^0,c
  5896  006202  0012               	return		;funcret
  5897  006204                     __end_of_replaceFood:
  5898                           	callstack 0
  5899                           
  5900 ;; *************** function _random *****************
  5901 ;; Defined at:
  5902 ;;		line 25 in file "game.c"
  5903 ;; Parameters:    Size  Location     Type
  5904 ;;		None
  5905 ;; Auto vars:     Size  Location     Type
  5906 ;;		None
  5907 ;; Return value:  Size  Location     Type
  5908 ;;                  2    6[COMRAM] unsigned int 
  5909 ;; Registers used:
  5910 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5911 ;; Tracked objects:
  5912 ;;		On entry : 0/0
  5913 ;;		On exit  : 0/0
  5914 ;;		Unchanged: 0/0
  5915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5916 ;;      Params:         2       0       0       0       0       0       0
  5917 ;;      Locals:         0       0       0       0       0       0       0
  5918 ;;      Temps:          2       0       0       0       0       0       0
  5919 ;;      Totals:         4       0       0       0       0       0       0
  5920 ;;Total ram usage:        4 bytes
  5921 ;; Hardware stack levels used:    1
  5922 ;; Hardware stack levels required when called:    1
  5923 ;; This function calls:
  5924 ;;		___wmul
  5925 ;; This function is called by:
  5926 ;;		_replaceFood
  5927 ;; This function uses a non-reentrant model
  5928 ;;
  5929                           
  5930                           	psect	text45
  5931  006636                     __ptext45:
  5932                           	callstack 0
  5933  006636                     _random:
  5934                           	callstack 27
  5935  006636                     
  5936                           ;game.c: 26:     random_seed = (random_seed << 3) >> 6;
  5937  006636  C072  F05B         	movff	_random_seed,??_random
  5938  00663A  C073  F05C         	movff	_random_seed+1,??_random+1
  5939  00663E  90D8               	bcf	status,0,c
  5940  006640  325C               	rrcf	(??_random+1)^0,f,c
  5941  006642  325B               	rrcf	??_random^0,f,c
  5942  006644  90D8               	bcf	status,0,c
  5943  006646  325C               	rrcf	(??_random+1)^0,f,c
  5944  006648  325B               	rrcf	??_random^0,f,c
  5945  00664A  90D8               	bcf	status,0,c
  5946  00664C  325C               	rrcf	(??_random+1)^0,f,c
  5947  00664E  325B               	rrcf	??_random^0,f,c
  5948  006650  0EFF               	movlw	255
  5949  006652  145B               	andwf	??_random^0,w,c
  5950  006654  6E72               	movwf	_random_seed^0,c
  5951  006656  0E03               	movlw	3
  5952  006658  145C               	andwf	(??_random+1)^0,w,c
  5953  00665A  6E73               	movwf	(_random_seed+1)^0,c
  5954  00665C                     
  5955                           ;game.c: 27:     random_seed = (random_seed + 191) * random_seed;
  5956  00665C  0EBF               	movlw	191
  5957  00665E  2472               	addwf	_random_seed^0,w,c
  5958  006660  6E53               	movwf	___wmul@multiplier^0,c
  5959  006662  0E00               	movlw	0
  5960  006664  2073               	addwfc	(_random_seed+1)^0,w,c
  5961  006666  6E54               	movwf	(___wmul@multiplier+1)^0,c
  5962  006668  C072  F055         	movff	_random_seed,___wmul@multiplicand
  5963  00666C  C073  F056         	movff	_random_seed+1,___wmul@multiplicand+1
  5964  006670  ECB5  F030         	call	___wmul	;wreg free
  5965  006674  C053  F072         	movff	?___wmul,_random_seed
  5966  006678  C054  F073         	movff	?___wmul+1,_random_seed+1
  5967  00667C                     
  5968                           ;game.c: 28:     return random_seed;
  5969  00667C  C072  F059         	movff	_random_seed,?_random
  5970  006680  C073  F05A         	movff	_random_seed+1,?_random+1
  5971  006684  0012               	return		;funcret
  5972  006686                     __end_of_random:
  5973                           	callstack 0
  5974                           
  5975 ;; *************** function ___wmul *****************
  5976 ;; Defined at:
  5977 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\Umul16.c"
  5978 ;; Parameters:    Size  Location     Type
  5979 ;;  multiplier      2    0[COMRAM] unsigned int 
  5980 ;;  multiplicand    2    2[COMRAM] unsigned int 
  5981 ;; Auto vars:     Size  Location     Type
  5982 ;;  product         2    4[COMRAM] unsigned int 
  5983 ;; Return value:  Size  Location     Type
  5984 ;;                  2    0[COMRAM] unsigned int 
  5985 ;; Registers used:
  5986 ;;		wreg, status,2, status,0, prodl, prodh
  5987 ;; Tracked objects:
  5988 ;;		On entry : 0/0
  5989 ;;		On exit  : 0/0
  5990 ;;		Unchanged: 0/0
  5991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5992 ;;      Params:         4       0       0       0       0       0       0
  5993 ;;      Locals:         2       0       0       0       0       0       0
  5994 ;;      Temps:          0       0       0       0       0       0       0
  5995 ;;      Totals:         6       0       0       0       0       0       0
  5996 ;;Total ram usage:        6 bytes
  5997 ;; Hardware stack levels used:    1
  5998 ;; This function calls:
  5999 ;;		Nothing
  6000 ;; This function is called by:
  6001 ;;		_random
  6002 ;;		_pwmSet
  6003 ;; This function uses a non-reentrant model
  6004 ;;
  6005                           
  6006                           	psect	text46
  6007  00616A                     __ptext46:
  6008                           	callstack 0
  6009  00616A                     ___wmul:
  6010                           	callstack 27
  6011  00616A  5053               	movf	___wmul@multiplier^0,w,c
  6012  00616C  0255               	mulwf	___wmul@multiplicand^0,c
  6013  00616E  CFF3 F057          	movff	prodl,___wmul@product
  6014  006172  CFF4 F058          	movff	prodh,___wmul@product+1
  6015  006176  5053               	movf	___wmul@multiplier^0,w,c
  6016  006178  0256               	mulwf	(___wmul@multiplicand+1)^0,c
  6017  00617A  50F3               	movf	243,w,c
  6018  00617C  2658               	addwf	(___wmul@product+1)^0,f,c
  6019  00617E  5054               	movf	(___wmul@multiplier+1)^0,w,c
  6020  006180  0255               	mulwf	___wmul@multiplicand^0,c
  6021  006182  50F3               	movf	243,w,c
  6022  006184  2658               	addwf	(___wmul@product+1)^0,f,c
  6023  006186  C057  F053         	movff	___wmul@product,?___wmul
  6024  00618A  C058  F054         	movff	___wmul@product+1,?___wmul+1
  6025  00618E  0012               	return		;funcret
  6026  006190                     __end_of___wmul:
  6027                           	callstack 0
  6028                           
  6029 ;; *************** function ___lwmod *****************
  6030 ;; Defined at:
  6031 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\lwmod.c"
  6032 ;; Parameters:    Size  Location     Type
  6033 ;;  dividend        2   10[COMRAM] unsigned int 
  6034 ;;  divisor         2   12[COMRAM] unsigned int 
  6035 ;; Auto vars:     Size  Location     Type
  6036 ;;  counter         1   14[COMRAM] unsigned char 
  6037 ;; Return value:  Size  Location     Type
  6038 ;;                  2   10[COMRAM] unsigned int 
  6039 ;; Registers used:
  6040 ;;		wreg, status,2, status,0
  6041 ;; Tracked objects:
  6042 ;;		On entry : 0/0
  6043 ;;		On exit  : 0/0
  6044 ;;		Unchanged: 0/0
  6045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6046 ;;      Params:         4       0       0       0       0       0       0
  6047 ;;      Locals:         1       0       0       0       0       0       0
  6048 ;;      Temps:          0       0       0       0       0       0       0
  6049 ;;      Totals:         5       0       0       0       0       0       0
  6050 ;;Total ram usage:        5 bytes
  6051 ;; Hardware stack levels used:    1
  6052 ;; This function calls:
  6053 ;;		Nothing
  6054 ;; This function is called by:
  6055 ;;		_replaceFood
  6056 ;;		_lcdNumber
  6057 ;; This function uses a non-reentrant model
  6058 ;;
  6059                           
  6060                           	psect	text47
  6061  0067EC                     __ptext47:
  6062                           	callstack 0
  6063  0067EC                     ___lwmod:
  6064                           	callstack 28
  6065  0067EC  505F               	movf	___lwmod@divisor^0,w,c
  6066  0067EE  1060               	iorwf	(___lwmod@divisor+1)^0,w,c
  6067  0067F0  B4D8               	btfsc	status,2,c
  6068  0067F2  EFFD  F033         	goto	u2181
  6069  0067F6  EFFF  F033         	goto	u2180
  6070  0067FA                     u2181:
  6071  0067FA  EF23  F034         	goto	l1178
  6072  0067FE                     u2180:
  6073  0067FE  0E01               	movlw	1
  6074  006800  6E61               	movwf	___lwmod@counter^0,c
  6075  006802  EF07  F034         	goto	l2724
  6076  006806                     l2722:
  6077  006806  90D8               	bcf	status,0,c
  6078  006808  365F               	rlcf	___lwmod@divisor^0,f,c
  6079  00680A  3660               	rlcf	(___lwmod@divisor+1)^0,f,c
  6080  00680C  2A61               	incf	___lwmod@counter^0,f,c
  6081  00680E                     l2724:
  6082  00680E  AE60               	btfss	(___lwmod@divisor+1)^0,7,c
  6083  006810  EF0C  F034         	goto	u2191
  6084  006814  EF0E  F034         	goto	u2190
  6085  006818                     u2191:
  6086  006818  EF03  F034         	goto	l2722
  6087  00681C                     u2190:
  6088  00681C                     l2726:
  6089  00681C  505F               	movf	___lwmod@divisor^0,w,c
  6090  00681E  5C5D               	subwf	___lwmod@dividend^0,w,c
  6091  006820  5060               	movf	(___lwmod@divisor+1)^0,w,c
  6092  006822  585E               	subwfb	(___lwmod@dividend+1)^0,w,c
  6093  006824  A0D8               	btfss	status,0,c
  6094  006826  EF17  F034         	goto	u2201
  6095  00682A  EF19  F034         	goto	u2200
  6096  00682E                     u2201:
  6097  00682E  EF1D  F034         	goto	l2730
  6098  006832                     u2200:
  6099  006832  505F               	movf	___lwmod@divisor^0,w,c
  6100  006834  5E5D               	subwf	___lwmod@dividend^0,f,c
  6101  006836  5060               	movf	(___lwmod@divisor+1)^0,w,c
  6102  006838  5A5E               	subwfb	(___lwmod@dividend+1)^0,f,c
  6103  00683A                     l2730:
  6104  00683A  90D8               	bcf	status,0,c
  6105  00683C  3260               	rrcf	(___lwmod@divisor+1)^0,f,c
  6106  00683E  325F               	rrcf	___lwmod@divisor^0,f,c
  6107  006840  2E61               	decfsz	___lwmod@counter^0,f,c
  6108  006842  EF0E  F034         	goto	l2726
  6109  006846                     l1178:
  6110  006846  C05D  F05D         	movff	___lwmod@dividend,?___lwmod
  6111  00684A  C05E  F05E         	movff	___lwmod@dividend+1,?___lwmod+1
  6112  00684E  0012               	return		;funcret
  6113  006850                     __end_of___lwmod:
  6114                           	callstack 0
  6115                           
  6116 ;; *************** function _cleanScreean *****************
  6117 ;; Defined at:
  6118 ;;		line 43 in file "renderer.c"
  6119 ;; Parameters:    Size  Location     Type
  6120 ;;		None
  6121 ;; Auto vars:     Size  Location     Type
  6122 ;;  y               1   24[COMRAM] unsigned char 
  6123 ;;  x               1   23[COMRAM] unsigned char 
  6124 ;; Return value:  Size  Location     Type
  6125 ;;                  1    wreg      void 
  6126 ;; Registers used:
  6127 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6128 ;; Tracked objects:
  6129 ;;		On entry : 0/0
  6130 ;;		On exit  : 0/0
  6131 ;;		Unchanged: 0/0
  6132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6133 ;;      Params:         0       0       0       0       0       0       0
  6134 ;;      Locals:         2       0       0       0       0       0       0
  6135 ;;      Temps:          0       0       0       0       0       0       0
  6136 ;;      Totals:         2       0       0       0       0       0       0
  6137 ;;Total ram usage:        2 bytes
  6138 ;; Hardware stack levels used:    1
  6139 ;; Hardware stack levels required when called:    6
  6140 ;; This function calls:
  6141 ;;		_setPixel
  6142 ;; This function is called by:
  6143 ;;		_rendererInit
  6144 ;;		_newGame
  6145 ;; This function uses a non-reentrant model
  6146 ;;
  6147                           
  6148                           	psect	text48
  6149  0063DA                     __ptext48:
  6150                           	callstack 0
  6151  0063DA                     _cleanScreean:
  6152                           	callstack 23
  6153  0063DA                     
  6154                           ;renderer.c: 44:     for (char x = 0; x < (3*5); x++) {
  6155  0063DA  0E00               	movlw	0
  6156  0063DC  6E6A               	movwf	cleanScreean@x^0,c
  6157  0063DE                     l2834:
  6158                           
  6159                           ;renderer.c: 45:         for (char y = 0; y < (2*8); y++) {
  6160  0063DE  0E00               	movlw	0
  6161  0063E0  6E6B               	movwf	cleanScreean@y^0,c
  6162  0063E2                     l2840:
  6163                           
  6164                           ;renderer.c: 46:             setPixel(x, y, 0);
  6165  0063E2  C06B  F061         	movff	cleanScreean@y,setPixel@y
  6166  0063E6  0E00               	movlw	0
  6167  0063E8  6E62               	movwf	setPixel@val^0,c
  6168  0063EA  506A               	movf	cleanScreean@x^0,w,c
  6169  0063EC  EC8A  F038         	call	_setPixel
  6170  0063F0                     
  6171                           ;renderer.c: 47:         }
  6172  0063F0  2A6B               	incf	cleanScreean@y^0,f,c
  6173  0063F2  0E0F               	movlw	15
  6174  0063F4  646B               	cpfsgt	cleanScreean@y^0,c
  6175  0063F6  EFFF  F031         	goto	u2331
  6176  0063FA  EF01  F032         	goto	u2330
  6177  0063FE                     u2331:
  6178  0063FE  EFF1  F031         	goto	l2840
  6179  006402                     u2330:
  6180  006402                     
  6181                           ;renderer.c: 48:     }
  6182  006402  2A6A               	incf	cleanScreean@x^0,f,c
  6183  006404  0E0E               	movlw	14
  6184  006406  646A               	cpfsgt	cleanScreean@x^0,c
  6185  006408  EF08  F032         	goto	u2341
  6186  00640C  EF0A  F032         	goto	u2340
  6187  006410                     u2341:
  6188  006410  EFEF  F031         	goto	l2834
  6189  006414                     u2340:
  6190  006414  0012               	return		;funcret
  6191  006416                     __end_of_cleanScreean:
  6192                           	callstack 0
  6193                           
  6194 ;; *************** function _setPixel *****************
  6195 ;; Defined at:
  6196 ;;		line 7 in file "renderer.c"
  6197 ;; Parameters:    Size  Location     Type
  6198 ;;  x               1    wreg     unsigned char 
  6199 ;;  y               1   14[COMRAM] unsigned char 
  6200 ;;  val             1   15[COMRAM] unsigned char 
  6201 ;; Auto vars:     Size  Location     Type
  6202 ;;  x               1   22[COMRAM] unsigned char 
  6203 ;;  i               2   20[COMRAM] int 
  6204 ;;  x_              1   19[COMRAM] unsigned char 
  6205 ;; Return value:  Size  Location     Type
  6206 ;;                  1    wreg      void 
  6207 ;; Registers used:
  6208 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6209 ;; Tracked objects:
  6210 ;;		On entry : 0/0
  6211 ;;		On exit  : 0/0
  6212 ;;		Unchanged: 0/0
  6213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6214 ;;      Params:         2       0       0       0       0       0       0
  6215 ;;      Locals:         4       0       0       0       0       0       0
  6216 ;;      Temps:          3       0       0       0       0       0       0
  6217 ;;      Totals:         9       0       0       0       0       0       0
  6218 ;;Total ram usage:        9 bytes
  6219 ;; Hardware stack levels used:    1
  6220 ;; Hardware stack levels required when called:    5
  6221 ;; This function calls:
  6222 ;;		_lcdChar
  6223 ;;		_lcdCommand
  6224 ;; This function is called by:
  6225 ;;		_cleanScreean
  6226 ;;		_newGame
  6227 ;;		_checkFood
  6228 ;;		_gameUpdate
  6229 ;; This function uses a non-reentrant model
  6230 ;;
  6231                           
  6232                           	psect	text49
  6233  007114                     __ptext49:
  6234                           	callstack 0
  6235  007114                     _setPixel:
  6236                           	callstack 24
  6237                           
  6238                           ;incstack = 0
  6239                           ;setPixel@x stored from wreg
  6240  007114  6E69               	movwf	setPixel@x^0,c
  6241  007116                     
  6242                           ;renderer.c: 8:     int i = 0;
  6243  007116  0E00               	movlw	0
  6244  007118  6E68               	movwf	(setPixel@i+1)^0,c
  6245  00711A  0E00               	movlw	0
  6246  00711C  6E67               	movwf	setPixel@i^0,c
  6247  00711E                     
  6248                           ;renderer.c: 9:     unsigned char x_ = x;
  6249  00711E  C069  F066         	movff	setPixel@x,setPixel@x_
  6250  007122                     
  6251                           ;renderer.c: 11:     if (x > 9) {
  6252  007122  0E09               	movlw	9
  6253  007124  6469               	cpfsgt	setPixel@x^0,c
  6254  007126  EF97  F038         	goto	u2101
  6255  00712A  EF99  F038         	goto	u2100
  6256  00712E                     u2101:
  6257  00712E  EFA2  F038         	goto	l2666
  6258  007132                     u2100:
  6259  007132                     
  6260                           ;renderer.c: 12:         i += 32;
  6261  007132  0E20               	movlw	32
  6262  007134  2667               	addwf	setPixel@i^0,f,c
  6263  007136  0E00               	movlw	0
  6264  007138  2268               	addwfc	(setPixel@i+1)^0,f,c
  6265                           
  6266                           ;renderer.c: 13:         x_ = x - 10;
  6267  00713A  5069               	movf	setPixel@x^0,w,c
  6268  00713C  0FF6               	addlw	246
  6269  00713E  6E66               	movwf	setPixel@x_^0,c
  6270                           
  6271                           ;renderer.c: 14:     }
  6272  007140  EFB1  F038         	goto	l273
  6273  007144                     l2666:
  6274  007144  0E04               	movlw	4
  6275  007146  6469               	cpfsgt	setPixel@x^0,c
  6276  007148  EFA8  F038         	goto	u2111
  6277  00714C  EFAA  F038         	goto	u2110
  6278  007150                     u2111:
  6279  007150  EFB1  F038         	goto	l273
  6280  007154                     u2110:
  6281  007154                     
  6282                           ;renderer.c: 16:         i += 16;
  6283  007154  0E10               	movlw	16
  6284  007156  2667               	addwf	setPixel@i^0,f,c
  6285  007158  0E00               	movlw	0
  6286  00715A  2268               	addwfc	(setPixel@i+1)^0,f,c
  6287                           
  6288                           ;renderer.c: 17:         x_ = x - 5;
  6289  00715C  5069               	movf	setPixel@x^0,w,c
  6290  00715E  0FFB               	addlw	251
  6291  007160  6E66               	movwf	setPixel@x_^0,c
  6292  007162                     l273:
  6293                           
  6294                           ;renderer.c: 19:     i += y;
  6295  007162  5061               	movf	setPixel@y^0,w,c
  6296  007164  2667               	addwf	setPixel@i^0,f,c
  6297  007166  0E00               	movlw	0
  6298  007168  2268               	addwfc	(setPixel@i+1)^0,f,c
  6299  00716A                     
  6300                           ;renderer.c: 20:     if (val) {
  6301  00716A  5062               	movf	setPixel@val^0,w,c
  6302  00716C  B4D8               	btfsc	status,2,c
  6303  00716E  EFBB  F038         	goto	u2121
  6304  007172  EFBD  F038         	goto	u2120
  6305  007176                     u2121:
  6306  007176  EFD4  F038         	goto	l2674
  6307  00717A                     u2120:
  6308  00717A                     
  6309                           ;renderer.c: 21:         ((screen[i]) |= (1<<(4 - x_)));
  6310  00717A  5066               	movf	setPixel@x_^0,w,c
  6311  00717C  0804               	sublw	4
  6312  00717E  6E63               	movwf	??_setPixel^0,c
  6313  007180  0E01               	movlw	1
  6314  007182  6E64               	movwf	(??_setPixel+1)^0,c
  6315  007184  2A63               	incf	??_setPixel^0,f,c
  6316  007186  EFC7  F038         	goto	u2134
  6317  00718A                     u2135:
  6318  00718A  90D8               	bcf	status,0,c
  6319  00718C  3664               	rlcf	(??_setPixel+1)^0,f,c
  6320  00718E                     u2134:
  6321  00718E  2E63               	decfsz	??_setPixel^0,f,c
  6322  007190  EFC5  F038         	goto	u2135
  6323  007194  0E00               	movlw	low _screen
  6324  007196  2467               	addwf	setPixel@i^0,w,c
  6325  007198  6ED9               	movwf	fsr2l,c
  6326  00719A  0E01               	movlw	high _screen
  6327  00719C  2068               	addwfc	(setPixel@i+1)^0,w,c
  6328  00719E  6EDA               	movwf	fsr2h,c
  6329  0071A0  5064               	movf	(??_setPixel+1)^0,w,c
  6330  0071A2  12DF               	iorwf	indf2,f,c
  6331                           
  6332                           ;renderer.c: 22:     }
  6333  0071A4  EFEC  F038         	goto	l2676
  6334  0071A8                     l2674:
  6335                           
  6336                           ;renderer.c: 24:         ((screen[i]) &= ~(1<<(4 - x_)));
  6337  0071A8  5066               	movf	setPixel@x_^0,w,c
  6338  0071AA  0804               	sublw	4
  6339  0071AC  6E63               	movwf	??_setPixel^0,c
  6340  0071AE  0E01               	movlw	1
  6341  0071B0  6E64               	movwf	(??_setPixel+1)^0,c
  6342  0071B2  2A63               	incf	??_setPixel^0,f,c
  6343  0071B4  EFDE  F038         	goto	u2144
  6344  0071B8                     u2145:
  6345  0071B8  90D8               	bcf	status,0,c
  6346  0071BA  3664               	rlcf	(??_setPixel+1)^0,f,c
  6347  0071BC                     u2144:
  6348  0071BC  2E63               	decfsz	??_setPixel^0,f,c
  6349  0071BE  EFDC  F038         	goto	u2145
  6350  0071C2  5064               	movf	(??_setPixel+1)^0,w,c
  6351  0071C4  0AFF               	xorlw	255
  6352  0071C6  6E65               	movwf	(??_setPixel+2)^0,c
  6353  0071C8  0E00               	movlw	low _screen
  6354  0071CA  2467               	addwf	setPixel@i^0,w,c
  6355  0071CC  6ED9               	movwf	fsr2l,c
  6356  0071CE  0E01               	movlw	high _screen
  6357  0071D0  2068               	addwfc	(setPixel@i+1)^0,w,c
  6358  0071D2  6EDA               	movwf	fsr2h,c
  6359  0071D4  5065               	movf	(??_setPixel+2)^0,w,c
  6360  0071D6  16DF               	andwf	indf2,f,c
  6361  0071D8                     l2676:
  6362                           
  6363                           ;renderer.c: 27:     lcdCommand(0x40 + i);
  6364  0071D8  5067               	movf	setPixel@i^0,w,c
  6365  0071DA  0F40               	addlw	64
  6366  0071DC  EC82  F030         	call	_lcdCommand
  6367  0071E0                     
  6368                           ;renderer.c: 28:     lcdChar(screen[i]);
  6369  0071E0  0E00               	movlw	low _screen
  6370  0071E2  2467               	addwf	setPixel@i^0,w,c
  6371  0071E4  6ED9               	movwf	fsr2l,c
  6372  0071E6  0E01               	movlw	high _screen
  6373  0071E8  2068               	addwfc	(setPixel@i+1)^0,w,c
  6374  0071EA  6EDA               	movwf	fsr2h,c
  6375  0071EC  50DF               	movf	indf2,w,c
  6376  0071EE  EC73  F030         	call	_lcdChar
  6377  0071F2  0012               	return		;funcret
  6378  0071F4                     __end_of_setPixel:
  6379                           	callstack 0
  6380                           
  6381 ;; *************** function _lcdCommand *****************
  6382 ;; Defined at:
  6383 ;;		line 40 in file "lcd.c"
  6384 ;; Parameters:    Size  Location     Type
  6385 ;;  value           1    wreg     unsigned char 
  6386 ;; Auto vars:     Size  Location     Type
  6387 ;;  value           1   13[COMRAM] unsigned char 
  6388 ;; Return value:  Size  Location     Type
  6389 ;;                  1    wreg      void 
  6390 ;; Registers used:
  6391 ;;		wreg, status,2, status,0, cstack
  6392 ;; Tracked objects:
  6393 ;;		On entry : 0/0
  6394 ;;		On exit  : 0/0
  6395 ;;		Unchanged: 0/0
  6396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6397 ;;      Params:         0       0       0       0       0       0       0
  6398 ;;      Locals:         1       0       0       0       0       0       0
  6399 ;;      Temps:          0       0       0       0       0       0       0
  6400 ;;      Totals:         1       0       0       0       0       0       0
  6401 ;;Total ram usage:        1 bytes
  6402 ;; Hardware stack levels used:    1
  6403 ;; Hardware stack levels required when called:    4
  6404 ;; This function calls:
  6405 ;;		_delayMili
  6406 ;;		_pushByte
  6407 ;; This function is called by:
  6408 ;;		_lcdPosition
  6409 ;;		_lcdInit
  6410 ;;		_displayMenu
  6411 ;;		_setPixel
  6412 ;;		_displayScreen
  6413 ;;		_rendererInit
  6414 ;;		_gameOver
  6415 ;;		_gameUpdate
  6416 ;;		_displayPoints
  6417 ;; This function uses a non-reentrant model
  6418 ;;
  6419                           
  6420                           	psect	text50
  6421  006104                     __ptext50:
  6422                           	callstack 0
  6423  006104                     _lcdCommand:
  6424                           	callstack 24
  6425                           
  6426                           ;incstack = 0
  6427                           ;lcdCommand@value stored from wreg
  6428  006104  6E60               	movwf	lcdCommand@value^0,c
  6429  006106                     
  6430                           ;lcd.c: 41:  pushByte(value, 0);
  6431  006106  0E00               	movlw	0
  6432  006108  6E5D               	movwf	(pushByte@rs+1)^0,c
  6433  00610A  0E00               	movlw	0
  6434  00610C  6E5C               	movwf	pushByte@rs^0,c
  6435  00610E  5060               	movf	lcdCommand@value^0,w,c
  6436  006110  EC6D  F033         	call	_pushByte
  6437                           
  6438                           ;lcd.c: 42:  delayMili(2);
  6439  006114  0E00               	movlw	0
  6440  006116  6E54               	movwf	(delayMili@a+1)^0,c
  6441  006118  0E02               	movlw	2
  6442  00611A  6E53               	movwf	delayMili@a^0,c
  6443  00611C  EC82  F031         	call	_delayMili	;wreg free
  6444  006120  0012               	return		;funcret
  6445  006122                     __end_of_lcdCommand:
  6446                           	callstack 0
  6447                           
  6448 ;; *************** function _delayMili *****************
  6449 ;; Defined at:
  6450 ;;		line 10 in file "lcd.c"
  6451 ;; Parameters:    Size  Location     Type
  6452 ;;  a               2    0[COMRAM] int 
  6453 ;; Auto vars:     Size  Location     Type
  6454 ;;  i               2    3[COMRAM] volatile int 
  6455 ;; Return value:  Size  Location     Type
  6456 ;;                  1    wreg      void 
  6457 ;; Registers used:
  6458 ;;		wreg, status,2, status,0
  6459 ;; Tracked objects:
  6460 ;;		On entry : 0/0
  6461 ;;		On exit  : 0/0
  6462 ;;		Unchanged: 0/0
  6463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6464 ;;      Params:         2       0       0       0       0       0       0
  6465 ;;      Locals:         2       0       0       0       0       0       0
  6466 ;;      Temps:          1       0       0       0       0       0       0
  6467 ;;      Totals:         5       0       0       0       0       0       0
  6468 ;;Total ram usage:        5 bytes
  6469 ;; Hardware stack levels used:    1
  6470 ;; This function calls:
  6471 ;;		Nothing
  6472 ;; This function is called by:
  6473 ;;		_lcdCommand
  6474 ;;		_lcdInit
  6475 ;; This function uses a non-reentrant model
  6476 ;;
  6477                           
  6478                           	psect	text51
  6479  006304                     __ptext51:
  6480                           	callstack 0
  6481  006304                     _delayMili:
  6482                           	callstack 27
  6483  006304                     
  6484                           ;lcd.c: 11:  volatile int i;;lcd.c: 12:  for (i = 0; i < a; i++) {
  6485  006304  0E00               	movlw	0
  6486  006306  6E57               	movwf	(delayMili@i+1)^0,c	;volatile
  6487  006308  0E00               	movlw	0
  6488  00630A  6E56               	movwf	delayMili@i^0,c	;volatile
  6489  00630C  EF8A  F031         	goto	l2486
  6490  006310                     l2484:
  6491                           
  6492                           ;lcd.c: 15:  }
  6493  006310  4A56               	infsnz	delayMili@i^0,f,c	;volatile
  6494  006312  2A57               	incf	(delayMili@i+1)^0,f,c	;volatile
  6495  006314                     l2486:
  6496  006314  5053               	movf	delayMili@a^0,w,c
  6497  006316  5C56               	subwf	delayMili@i^0,w,c	;volatile
  6498  006318  5057               	movf	(delayMili@i+1)^0,w,c	;volatile
  6499  00631A  0A80               	xorlw	128
  6500  00631C  6E55               	movwf	??_delayMili^0,c
  6501  00631E  5054               	movf	(delayMili@a+1)^0,w,c
  6502  006320  0A80               	xorlw	128
  6503  006322  5855               	subwfb	??_delayMili^0,w,c
  6504  006324  A0D8               	btfss	status,0,c
  6505  006326  EF97  F031         	goto	u1711
  6506  00632A  EF99  F031         	goto	u1710
  6507  00632E                     u1711:
  6508  00632E  EF88  F031         	goto	l2484
  6509  006332                     u1710:
  6510  006332  0012               	return		;funcret
  6511  006334                     __end_of_delayMili:
  6512                           	callstack 0
  6513                           
  6514 ;; *************** function _lcdChar *****************
  6515 ;; Defined at:
  6516 ;;		line 52 in file "lcd.c"
  6517 ;; Parameters:    Size  Location     Type
  6518 ;;  value           1    wreg     unsigned char 
  6519 ;; Auto vars:     Size  Location     Type
  6520 ;;  value           1   13[COMRAM] unsigned char 
  6521 ;; Return value:  Size  Location     Type
  6522 ;;                  1    wreg      void 
  6523 ;; Registers used:
  6524 ;;		wreg, status,2, status,0, cstack
  6525 ;; Tracked objects:
  6526 ;;		On entry : 0/0
  6527 ;;		On exit  : 0/0
  6528 ;;		Unchanged: 0/0
  6529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6530 ;;      Params:         0       0       0       0       0       0       0
  6531 ;;      Locals:         1       0       0       0       0       0       0
  6532 ;;      Temps:          0       0       0       0       0       0       0
  6533 ;;      Totals:         1       0       0       0       0       0       0
  6534 ;;Total ram usage:        1 bytes
  6535 ;; Hardware stack levels used:    1
  6536 ;; Hardware stack levels required when called:    4
  6537 ;; This function calls:
  6538 ;;		_delayMicro
  6539 ;;		_pushByte
  6540 ;; This function is called by:
  6541 ;;		_lcdString
  6542 ;;		_displayMenu
  6543 ;;		_setPixel
  6544 ;;		_displayScreen
  6545 ;;		_rendererInit
  6546 ;;		_rendererStart
  6547 ;;		_gameOver
  6548 ;;		_gameUpdate
  6549 ;;		_lcdNumber
  6550 ;;		_displayPoints
  6551 ;; This function uses a non-reentrant model
  6552 ;;
  6553                           
  6554                           	psect	text52
  6555  0060E6                     __ptext52:
  6556                           	callstack 0
  6557  0060E6                     _lcdChar:
  6558                           	callstack 24
  6559                           
  6560                           ;incstack = 0
  6561                           ;lcdChar@value stored from wreg
  6562  0060E6  6E60               	movwf	lcdChar@value^0,c
  6563  0060E8                     
  6564                           ;lcd.c: 53:  pushByte(value, 1);
  6565  0060E8  0E00               	movlw	0
  6566  0060EA  6E5D               	movwf	(pushByte@rs+1)^0,c
  6567  0060EC  0E01               	movlw	1
  6568  0060EE  6E5C               	movwf	pushByte@rs^0,c
  6569  0060F0  5060               	movf	lcdChar@value^0,w,c
  6570  0060F2  EC6D  F033         	call	_pushByte
  6571  0060F6                     
  6572                           ;lcd.c: 54:  delayMicro(80);
  6573  0060F6  0E00               	movlw	0
  6574  0060F8  6E54               	movwf	(delayMicro@a+1)^0,c
  6575  0060FA  0E50               	movlw	80
  6576  0060FC  6E53               	movwf	delayMicro@a^0,c
  6577  0060FE  EC15  F030         	call	_delayMicro	;wreg free
  6578  006102  0012               	return		;funcret
  6579  006104                     __end_of_lcdChar:
  6580                           	callstack 0
  6581                           
  6582 ;; *************** function _pushByte *****************
  6583 ;; Defined at:
  6584 ;;		line 31 in file "lcd.c"
  6585 ;; Parameters:    Size  Location     Type
  6586 ;;  value           1    wreg     unsigned char 
  6587 ;;  rs              2    9[COMRAM] int 
  6588 ;; Auto vars:     Size  Location     Type
  6589 ;;  value           1   12[COMRAM] unsigned char 
  6590 ;; Return value:  Size  Location     Type
  6591 ;;                  1    wreg      void 
  6592 ;; Registers used:
  6593 ;;		wreg, status,2, status,0, cstack
  6594 ;; Tracked objects:
  6595 ;;		On entry : 0/0
  6596 ;;		On exit  : 0/0
  6597 ;;		Unchanged: 0/0
  6598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6599 ;;      Params:         2       0       0       0       0       0       0
  6600 ;;      Locals:         1       0       0       0       0       0       0
  6601 ;;      Temps:          1       0       0       0       0       0       0
  6602 ;;      Totals:         4       0       0       0       0       0       0
  6603 ;;Total ram usage:        4 bytes
  6604 ;; Hardware stack levels used:    1
  6605 ;; Hardware stack levels required when called:    3
  6606 ;; This function calls:
  6607 ;;		_digitalWrite
  6608 ;;		_pulseEnablePin
  6609 ;;		_soWrite
  6610 ;; This function is called by:
  6611 ;;		_lcdCommand
  6612 ;;		_lcdChar
  6613 ;; This function uses a non-reentrant model
  6614 ;;
  6615                           
  6616                           	psect	text53
  6617  0066DA                     __ptext53:
  6618                           	callstack 0
  6619  0066DA                     _pushByte:
  6620                           	callstack 24
  6621                           
  6622                           ;incstack = 0
  6623                           ;pushByte@value stored from wreg
  6624  0066DA  6E5F               	movwf	pushByte@value^0,c
  6625  0066DC                     
  6626                           ;lcd.c: 32:  soWrite(value >> 4);
  6627  0066DC  C05F  F05E         	movff	pushByte@value,??_pushByte
  6628  0066E0  3A5E               	swapf	??_pushByte^0,f,c
  6629  0066E2  0E0F               	movlw	15
  6630  0066E4  165E               	andwf	??_pushByte^0,f,c
  6631  0066E6  505E               	movf	??_pushByte^0,w,c
  6632  0066E8  6E59               	movwf	soWrite@value^0,c
  6633  0066EA  6A5A               	clrf	(soWrite@value+1)^0,c
  6634  0066EC  ECF4  F032         	call	_soWrite	;wreg free
  6635                           
  6636                           ;lcd.c: 33:  digitalWrite(PIN_D5, rs);
  6637  0066F0  0E00               	movlw	0
  6638  0066F2  6E54               	movwf	(digitalWrite@pin+1)^0,c
  6639  0066F4  0E1D               	movlw	29
  6640  0066F6  6E53               	movwf	digitalWrite@pin^0,c
  6641  0066F8  C05C  F055         	movff	pushByte@rs,digitalWrite@value
  6642  0066FC  C05D  F056         	movff	pushByte@rs+1,digitalWrite@value+1
  6643  006700  ECB1  F03D         	call	_digitalWrite	;wreg free
  6644                           
  6645                           ;lcd.c: 34:  pulseEnablePin();
  6646  006704  EC68  F032         	call	_pulseEnablePin	;wreg free
  6647                           
  6648                           ;lcd.c: 36:  soWrite(value & 0x0F);
  6649  006708  C05F  F05E         	movff	pushByte@value,??_pushByte
  6650  00670C  0E0F               	movlw	15
  6651  00670E  165E               	andwf	??_pushByte^0,f,c
  6652  006710  505E               	movf	??_pushByte^0,w,c
  6653  006712  6E59               	movwf	soWrite@value^0,c
  6654  006714  6A5A               	clrf	(soWrite@value+1)^0,c
  6655  006716  ECF4  F032         	call	_soWrite	;wreg free
  6656                           
  6657                           ;lcd.c: 37:  digitalWrite(PIN_D5, rs);
  6658  00671A  0E00               	movlw	0
  6659  00671C  6E54               	movwf	(digitalWrite@pin+1)^0,c
  6660  00671E  0E1D               	movlw	29
  6661  006720  6E53               	movwf	digitalWrite@pin^0,c
  6662  006722  C05C  F055         	movff	pushByte@rs,digitalWrite@value
  6663  006726  C05D  F056         	movff	pushByte@rs+1,digitalWrite@value+1
  6664  00672A  ECB1  F03D         	call	_digitalWrite	;wreg free
  6665                           
  6666                           ;lcd.c: 38:  pulseEnablePin();
  6667  00672E  EC68  F032         	call	_pulseEnablePin	;wreg free
  6668  006732  0012               	return		;funcret
  6669  006734                     __end_of_pushByte:
  6670                           	callstack 0
  6671                           
  6672 ;; *************** function _soWrite *****************
  6673 ;; Defined at:
  6674 ;;		line 18 in file "so.c"
  6675 ;; Parameters:    Size  Location     Type
  6676 ;;  value           2    6[COMRAM] int 
  6677 ;; Auto vars:     Size  Location     Type
  6678 ;;  i               1    8[COMRAM] unsigned char 
  6679 ;; Return value:  Size  Location     Type
  6680 ;;                  1    wreg      void 
  6681 ;; Registers used:
  6682 ;;		wreg, status,2, status,0, cstack
  6683 ;; Tracked objects:
  6684 ;;		On entry : 0/0
  6685 ;;		On exit  : 0/0
  6686 ;;		Unchanged: 0/0
  6687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6688 ;;      Params:         2       0       0       0       0       0       0
  6689 ;;      Locals:         1       0       0       0       0       0       0
  6690 ;;      Temps:          0       0       0       0       0       0       0
  6691 ;;      Totals:         3       0       0       0       0       0       0
  6692 ;;Total ram usage:        3 bytes
  6693 ;; Hardware stack levels used:    1
  6694 ;; Hardware stack levels required when called:    2
  6695 ;; This function calls:
  6696 ;;		_PulseClockData
  6697 ;;		_PulseEnClock
  6698 ;;		_digitalWrite
  6699 ;; This function is called by:
  6700 ;;		_kpDebounce
  6701 ;;		_pushNibble
  6702 ;;		_pushByte
  6703 ;; This function uses a non-reentrant model
  6704 ;;
  6705                           
  6706                           	psect	text54
  6707  0065E8                     __ptext54:
  6708                           	callstack 0
  6709  0065E8                     _soWrite:
  6710                           	callstack 24
  6711  0065E8                     
  6712                           ;so.c: 19:  char i;;so.c: 20:  digitalWrite(PIN_B0, 0);
  6713  0065E8  0E00               	movlw	0
  6714  0065EA  6E54               	movwf	(digitalWrite@pin+1)^0,c
  6715  0065EC  0E08               	movlw	8
  6716  0065EE  6E53               	movwf	digitalWrite@pin^0,c
  6717  0065F0  0E00               	movlw	0
  6718  0065F2  6E56               	movwf	(digitalWrite@value+1)^0,c
  6719  0065F4  0E00               	movlw	0
  6720  0065F6  6E55               	movwf	digitalWrite@value^0,c
  6721  0065F8  ECB1  F03D         	call	_digitalWrite	;wreg free
  6722  0065FC                     
  6723                           ;so.c: 21:  for (i = 0; i < 8; i++) {
  6724  0065FC  0E00               	movlw	0
  6725  0065FE  6E5B               	movwf	soWrite@i^0,c
  6726  006600                     l2466:
  6727                           
  6728                           ;so.c: 22:   digitalWrite(PIN_D6, value & 0x80);
  6729  006600  0E00               	movlw	0
  6730  006602  6E54               	movwf	(digitalWrite@pin+1)^0,c
  6731  006604  0E1E               	movlw	30
  6732  006606  6E53               	movwf	digitalWrite@pin^0,c
  6733  006608  0E80               	movlw	128
  6734  00660A  1459               	andwf	soWrite@value^0,w,c
  6735  00660C  6E55               	movwf	digitalWrite@value^0,c
  6736  00660E  6A56               	clrf	(digitalWrite@value+1)^0,c
  6737  006610  ECB1  F03D         	call	_digitalWrite	;wreg free
  6738                           
  6739                           ;so.c: 23:   PulseClockData();
  6740  006614  EC16  F031         	call	_PulseClockData	;wreg free
  6741  006618                     
  6742                           ;so.c: 24:   value <<= 1;
  6743  006618  90D8               	bcf	status,0,c
  6744  00661A  3659               	rlcf	soWrite@value^0,f,c
  6745  00661C  365A               	rlcf	(soWrite@value+1)^0,f,c
  6746  00661E                     
  6747                           ;so.c: 25:  }
  6748  00661E  2A5B               	incf	soWrite@i^0,f,c
  6749  006620  0E07               	movlw	7
  6750  006622  645B               	cpfsgt	soWrite@i^0,c
  6751  006624  EF16  F033         	goto	u1701
  6752  006628  EF18  F033         	goto	u1700
  6753  00662C                     u1701:
  6754  00662C  EF00  F033         	goto	l2466
  6755  006630                     u1700:
  6756  006630                     
  6757                           ;so.c: 26:  PulseEnClock();
  6758  006630  EC2B  F031         	call	_PulseEnClock	;wreg free
  6759  006634  0012               	return		;funcret
  6760  006636                     __end_of_soWrite:
  6761                           	callstack 0
  6762                           
  6763 ;; *************** function _PulseEnClock *****************
  6764 ;; Defined at:
  6765 ;;		line 9 in file "so.c"
  6766 ;; Parameters:    Size  Location     Type
  6767 ;;		None
  6768 ;; Auto vars:     Size  Location     Type
  6769 ;;		None
  6770 ;; Return value:  Size  Location     Type
  6771 ;;                  1    wreg      void 
  6772 ;; Registers used:
  6773 ;;		wreg, status,2, status,0, cstack
  6774 ;; Tracked objects:
  6775 ;;		On entry : 0/0
  6776 ;;		On exit  : 0/0
  6777 ;;		Unchanged: 0/0
  6778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6779 ;;      Params:         0       0       0       0       0       0       0
  6780 ;;      Locals:         0       0       0       0       0       0       0
  6781 ;;      Temps:          0       0       0       0       0       0       0
  6782 ;;      Totals:         0       0       0       0       0       0       0
  6783 ;;Total ram usage:        0 bytes
  6784 ;; Hardware stack levels used:    1
  6785 ;; Hardware stack levels required when called:    1
  6786 ;; This function calls:
  6787 ;;		_digitalWrite
  6788 ;; This function is called by:
  6789 ;;		_soWrite
  6790 ;; This function uses a non-reentrant model
  6791 ;;
  6792                           
  6793                           	psect	text55
  6794  006256                     __ptext55:
  6795                           	callstack 0
  6796  006256                     _PulseEnClock:
  6797                           	callstack 24
  6798  006256                     
  6799                           ;so.c: 10:  digitalWrite(PIN_D7, 1);
  6800  006256  0E00               	movlw	0
  6801  006258  6E54               	movwf	(digitalWrite@pin+1)^0,c
  6802  00625A  0E1F               	movlw	31
  6803  00625C  6E53               	movwf	digitalWrite@pin^0,c
  6804  00625E  0E00               	movlw	0
  6805  006260  6E56               	movwf	(digitalWrite@value+1)^0,c
  6806  006262  0E01               	movlw	1
  6807  006264  6E55               	movwf	digitalWrite@value^0,c
  6808  006266  ECB1  F03D         	call	_digitalWrite	;wreg free
  6809                           
  6810                           ;so.c: 11:  digitalWrite(PIN_D7, 0);
  6811  00626A  0E00               	movlw	0
  6812  00626C  6E54               	movwf	(digitalWrite@pin+1)^0,c
  6813  00626E  0E1F               	movlw	31
  6814  006270  6E53               	movwf	digitalWrite@pin^0,c
  6815  006272  0E00               	movlw	0
  6816  006274  6E56               	movwf	(digitalWrite@value+1)^0,c
  6817  006276  0E00               	movlw	0
  6818  006278  6E55               	movwf	digitalWrite@value^0,c
  6819  00627A  ECB1  F03D         	call	_digitalWrite	;wreg free
  6820  00627E  0012               	return		;funcret
  6821  006280                     __end_of_PulseEnClock:
  6822                           	callstack 0
  6823                           
  6824 ;; *************** function _PulseClockData *****************
  6825 ;; Defined at:
  6826 ;;		line 14 in file "so.c"
  6827 ;; Parameters:    Size  Location     Type
  6828 ;;		None
  6829 ;; Auto vars:     Size  Location     Type
  6830 ;;		None
  6831 ;; Return value:  Size  Location     Type
  6832 ;;                  1    wreg      void 
  6833 ;; Registers used:
  6834 ;;		wreg, status,2, status,0, cstack
  6835 ;; Tracked objects:
  6836 ;;		On entry : 0/0
  6837 ;;		On exit  : 0/0
  6838 ;;		Unchanged: 0/0
  6839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6840 ;;      Params:         0       0       0       0       0       0       0
  6841 ;;      Locals:         0       0       0       0       0       0       0
  6842 ;;      Temps:          0       0       0       0       0       0       0
  6843 ;;      Totals:         0       0       0       0       0       0       0
  6844 ;;Total ram usage:        0 bytes
  6845 ;; Hardware stack levels used:    1
  6846 ;; Hardware stack levels required when called:    1
  6847 ;; This function calls:
  6848 ;;		_digitalWrite
  6849 ;; This function is called by:
  6850 ;;		_soWrite
  6851 ;; This function uses a non-reentrant model
  6852 ;;
  6853                           
  6854                           	psect	text56
  6855  00622C                     __ptext56:
  6856                           	callstack 0
  6857  00622C                     _PulseClockData:
  6858                           	callstack 24
  6859  00622C                     
  6860                           ;so.c: 15:  digitalWrite(PIN_B0, 1);
  6861  00622C  0E00               	movlw	0
  6862  00622E  6E54               	movwf	(digitalWrite@pin+1)^0,c
  6863  006230  0E08               	movlw	8
  6864  006232  6E53               	movwf	digitalWrite@pin^0,c
  6865  006234  0E00               	movlw	0
  6866  006236  6E56               	movwf	(digitalWrite@value+1)^0,c
  6867  006238  0E01               	movlw	1
  6868  00623A  6E55               	movwf	digitalWrite@value^0,c
  6869  00623C  ECB1  F03D         	call	_digitalWrite	;wreg free
  6870                           
  6871                           ;so.c: 16:  digitalWrite(PIN_B0, 0);
  6872  006240  0E00               	movlw	0
  6873  006242  6E54               	movwf	(digitalWrite@pin+1)^0,c
  6874  006244  0E08               	movlw	8
  6875  006246  6E53               	movwf	digitalWrite@pin^0,c
  6876  006248  0E00               	movlw	0
  6877  00624A  6E56               	movwf	(digitalWrite@value+1)^0,c
  6878  00624C  0E00               	movlw	0
  6879  00624E  6E55               	movwf	digitalWrite@value^0,c
  6880  006250  ECB1  F03D         	call	_digitalWrite	;wreg free
  6881  006254  0012               	return		;funcret
  6882  006256                     __end_of_PulseClockData:
  6883                           	callstack 0
  6884                           
  6885 ;; *************** function _pulseEnablePin *****************
  6886 ;; Defined at:
  6887 ;;		line 18 in file "lcd.c"
  6888 ;; Parameters:    Size  Location     Type
  6889 ;;		None
  6890 ;; Auto vars:     Size  Location     Type
  6891 ;;		None
  6892 ;; Return value:  Size  Location     Type
  6893 ;;                  1    wreg      void 
  6894 ;; Registers used:
  6895 ;;		wreg, status,2, status,0, cstack
  6896 ;; Tracked objects:
  6897 ;;		On entry : 0/0
  6898 ;;		On exit  : 0/0
  6899 ;;		Unchanged: 0/0
  6900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6901 ;;      Params:         0       0       0       0       0       0       0
  6902 ;;      Locals:         0       0       0       0       0       0       0
  6903 ;;      Temps:          0       0       0       0       0       0       0
  6904 ;;      Totals:         0       0       0       0       0       0       0
  6905 ;;Total ram usage:        0 bytes
  6906 ;; Hardware stack levels used:    1
  6907 ;; Hardware stack levels required when called:    1
  6908 ;; This function calls:
  6909 ;;		_delayMicro
  6910 ;;		_digitalWrite
  6911 ;; This function is called by:
  6912 ;;		_pushNibble
  6913 ;;		_pushByte
  6914 ;; This function uses a non-reentrant model
  6915 ;;
  6916                           
  6917                           	psect	text57
  6918  0064D0                     __ptext57:
  6919                           	callstack 0
  6920  0064D0                     _pulseEnablePin:
  6921                           	callstack 25
  6922  0064D0                     
  6923                           ;lcd.c: 19:  digitalWrite(PIN_D4, 1);
  6924  0064D0  0E00               	movlw	0
  6925  0064D2  6E54               	movwf	(digitalWrite@pin+1)^0,c
  6926  0064D4  0E1C               	movlw	28
  6927  0064D6  6E53               	movwf	digitalWrite@pin^0,c
  6928  0064D8  0E00               	movlw	0
  6929  0064DA  6E56               	movwf	(digitalWrite@value+1)^0,c
  6930  0064DC  0E01               	movlw	1
  6931  0064DE  6E55               	movwf	digitalWrite@value^0,c
  6932  0064E0  ECB1  F03D         	call	_digitalWrite	;wreg free
  6933  0064E4                     
  6934                           ;lcd.c: 20:  delayMicro(5);
  6935  0064E4  0E00               	movlw	0
  6936  0064E6  6E54               	movwf	(delayMicro@a+1)^0,c
  6937  0064E8  0E05               	movlw	5
  6938  0064EA  6E53               	movwf	delayMicro@a^0,c
  6939  0064EC  EC15  F030         	call	_delayMicro	;wreg free
  6940  0064F0                     
  6941                           ;lcd.c: 21:  digitalWrite(PIN_D4, 0);
  6942  0064F0  0E00               	movlw	0
  6943  0064F2  6E54               	movwf	(digitalWrite@pin+1)^0,c
  6944  0064F4  0E1C               	movlw	28
  6945  0064F6  6E53               	movwf	digitalWrite@pin^0,c
  6946  0064F8  0E00               	movlw	0
  6947  0064FA  6E56               	movwf	(digitalWrite@value+1)^0,c
  6948  0064FC  0E00               	movlw	0
  6949  0064FE  6E55               	movwf	digitalWrite@value^0,c
  6950  006500  ECB1  F03D         	call	_digitalWrite	;wreg free
  6951                           
  6952                           ;lcd.c: 22:  delayMicro(5);
  6953  006504  0E00               	movlw	0
  6954  006506  6E54               	movwf	(delayMicro@a+1)^0,c
  6955  006508  0E05               	movlw	5
  6956  00650A  6E53               	movwf	delayMicro@a^0,c
  6957  00650C  EC15  F030         	call	_delayMicro	;wreg free
  6958  006510  0012               	return		;funcret
  6959  006512                     __end_of_pulseEnablePin:
  6960                           	callstack 0
  6961                           
  6962 ;; *************** function _digitalWrite *****************
  6963 ;; Defined at:
  6964 ;;		line 14 in file "io.c"
  6965 ;; Parameters:    Size  Location     Type
  6966 ;;  pin             2    0[COMRAM] int 
  6967 ;;  value           2    2[COMRAM] int 
  6968 ;; Auto vars:     Size  Location     Type
  6969 ;;		None
  6970 ;; Return value:  Size  Location     Type
  6971 ;;                  1    wreg      void 
  6972 ;; Registers used:
  6973 ;;		wreg, status,2, status,0
  6974 ;; Tracked objects:
  6975 ;;		On entry : 0/0
  6976 ;;		On exit  : 0/0
  6977 ;;		Unchanged: 0/0
  6978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6979 ;;      Params:         4       0       0       0       0       0       0
  6980 ;;      Locals:         0       0       0       0       0       0       0
  6981 ;;      Temps:          2       0       0       0       0       0       0
  6982 ;;      Totals:         6       0       0       0       0       0       0
  6983 ;;Total ram usage:        6 bytes
  6984 ;; Hardware stack levels used:    1
  6985 ;; This function calls:
  6986 ;;		Nothing
  6987 ;; This function is called by:
  6988 ;;		_pulseEnablePin
  6989 ;;		_pushNibble
  6990 ;;		_pushByte
  6991 ;;		_PulseEnClock
  6992 ;;		_PulseClockData
  6993 ;;		_soWrite
  6994 ;; This function uses a non-reentrant model
  6995 ;;
  6996                           
  6997                           	psect	text58
  6998  007B62                     __ptext58:
  6999                           	callstack 0
  7000  007B62                     _digitalWrite:
  7001                           	callstack 25
  7002  007B62                     
  7003                           ;io.c: 16:     if(pin <8){
  7004  007B62  BE54               	btfsc	(digitalWrite@pin+1)^0,7,c
  7005  007B64  EFBF  F03D         	goto	u1500
  7006  007B68  5054               	movf	(digitalWrite@pin+1)^0,w,c
  7007  007B6A  E107               	bnz	u1501
  7008  007B6C  0E08               	movlw	8
  7009  007B6E  5C53               	subwf	digitalWrite@pin^0,w,c
  7010  007B70  B0D8               	btfsc	status,0,c
  7011  007B72  EFBD  F03D         	goto	u1501
  7012  007B76  EFBF  F03D         	goto	u1500
  7013  007B7A                     u1501:
  7014  007B7A  EFE9  F03D         	goto	l2422
  7015  007B7E                     u1500:
  7016  007B7E                     
  7017                           ;io.c: 17:         if (value){ ((PORTA) |= (1<<(pin)));}
  7018  007B7E  5055               	movf	digitalWrite@value^0,w,c
  7019  007B80  1056               	iorwf	(digitalWrite@value+1)^0,w,c
  7020  007B82  B4D8               	btfsc	status,2,c
  7021  007B84  EFC6  F03D         	goto	u1511
  7022  007B88  EFC8  F03D         	goto	u1510
  7023  007B8C                     u1511:
  7024  007B8C  EFD8  F03D         	goto	l2420
  7025  007B90                     u1510:
  7026  007B90  C053  F057         	movff	digitalWrite@pin,??_digitalWrite
  7027  007B94  0E01               	movlw	1
  7028  007B96  6E58               	movwf	(??_digitalWrite+1)^0,c
  7029  007B98  2A57               	incf	??_digitalWrite^0,f,c
  7030  007B9A  EFD1  F03D         	goto	u1524
  7031  007B9E                     u1525:
  7032  007B9E  90D8               	bcf	status,0,c
  7033  007BA0  3658               	rlcf	(??_digitalWrite+1)^0,f,c
  7034  007BA2                     u1524:
  7035  007BA2  2E57               	decfsz	??_digitalWrite^0,f,c
  7036  007BA4  EFCF  F03D         	goto	u1525
  7037  007BA8  5058               	movf	(??_digitalWrite+1)^0,w,c
  7038  007BAA  1280               	iorwf	128,f,c	;volatile
  7039  007BAC  EFD7  F03E         	goto	l42
  7040  007BB0                     l2420:
  7041  007BB0  C053  F057         	movff	digitalWrite@pin,??_digitalWrite
  7042  007BB4  0E01               	movlw	1
  7043  007BB6  6E58               	movwf	(??_digitalWrite+1)^0,c
  7044  007BB8  2A57               	incf	??_digitalWrite^0,f,c
  7045  007BBA  EFE1  F03D         	goto	u1534
  7046  007BBE                     u1535:
  7047  007BBE  90D8               	bcf	status,0,c
  7048  007BC0  3658               	rlcf	(??_digitalWrite+1)^0,f,c
  7049  007BC2                     u1534:
  7050  007BC2  2E57               	decfsz	??_digitalWrite^0,f,c
  7051  007BC4  EFDF  F03D         	goto	u1535
  7052  007BC8  5058               	movf	(??_digitalWrite+1)^0,w,c
  7053  007BCA  0AFF               	xorlw	255
  7054  007BCC  1680               	andwf	128,f,c	;volatile
  7055  007BCE  EFD7  F03E         	goto	l42
  7056  007BD2                     l2422:
  7057  007BD2  BE54               	btfsc	(digitalWrite@pin+1)^0,7,c
  7058  007BD4  EFF7  F03D         	goto	u1540
  7059  007BD8  5054               	movf	(digitalWrite@pin+1)^0,w,c
  7060  007BDA  E107               	bnz	u1541
  7061  007BDC  0E10               	movlw	16
  7062  007BDE  5C53               	subwf	digitalWrite@pin^0,w,c
  7063  007BE0  B0D8               	btfsc	status,0,c
  7064  007BE2  EFF5  F03D         	goto	u1541
  7065  007BE6  EFF7  F03D         	goto	u1540
  7066  007BEA                     u1541:
  7067  007BEA  EF25  F03E         	goto	l2430
  7068  007BEE                     u1540:
  7069  007BEE                     
  7070                           ;io.c: 20:         pin -=8;
  7071  007BEE  0EF8               	movlw	248
  7072  007BF0  2653               	addwf	digitalWrite@pin^0,f,c
  7073  007BF2  0EFF               	movlw	255
  7074  007BF4  2254               	addwfc	(digitalWrite@pin+1)^0,f,c
  7075                           
  7076                           ;io.c: 21:         if (value){ ((PORTB) |= (1<<(pin)));}
  7077  007BF6  5055               	movf	digitalWrite@value^0,w,c
  7078  007BF8  1056               	iorwf	(digitalWrite@value+1)^0,w,c
  7079  007BFA  B4D8               	btfsc	status,2,c
  7080  007BFC  EF02  F03E         	goto	u1551
  7081  007C00  EF04  F03E         	goto	u1550
  7082  007C04                     u1551:
  7083  007C04  EF14  F03E         	goto	l2428
  7084  007C08                     u1550:
  7085  007C08  C053  F057         	movff	digitalWrite@pin,??_digitalWrite
  7086  007C0C  0E01               	movlw	1
  7087  007C0E  6E58               	movwf	(??_digitalWrite+1)^0,c
  7088  007C10  2A57               	incf	??_digitalWrite^0,f,c
  7089  007C12  EF0D  F03E         	goto	u1564
  7090  007C16                     u1565:
  7091  007C16  90D8               	bcf	status,0,c
  7092  007C18  3658               	rlcf	(??_digitalWrite+1)^0,f,c
  7093  007C1A                     u1564:
  7094  007C1A  2E57               	decfsz	??_digitalWrite^0,f,c
  7095  007C1C  EF0B  F03E         	goto	u1565
  7096  007C20  5058               	movf	(??_digitalWrite+1)^0,w,c
  7097  007C22  1281               	iorwf	129,f,c	;volatile
  7098  007C24  EFD7  F03E         	goto	l42
  7099  007C28                     l2428:
  7100  007C28  C053  F057         	movff	digitalWrite@pin,??_digitalWrite
  7101  007C2C  0E01               	movlw	1
  7102  007C2E  6E58               	movwf	(??_digitalWrite+1)^0,c
  7103  007C30  2A57               	incf	??_digitalWrite^0,f,c
  7104  007C32  EF1D  F03E         	goto	u1574
  7105  007C36                     u1575:
  7106  007C36  90D8               	bcf	status,0,c
  7107  007C38  3658               	rlcf	(??_digitalWrite+1)^0,f,c
  7108  007C3A                     u1574:
  7109  007C3A  2E57               	decfsz	??_digitalWrite^0,f,c
  7110  007C3C  EF1B  F03E         	goto	u1575
  7111  007C40  5058               	movf	(??_digitalWrite+1)^0,w,c
  7112  007C42  0AFF               	xorlw	255
  7113  007C44  1681               	andwf	129,f,c	;volatile
  7114  007C46  EFD7  F03E         	goto	l42
  7115  007C4A                     l2430:
  7116  007C4A  BE54               	btfsc	(digitalWrite@pin+1)^0,7,c
  7117  007C4C  EF33  F03E         	goto	u1580
  7118  007C50  5054               	movf	(digitalWrite@pin+1)^0,w,c
  7119  007C52  E107               	bnz	u1581
  7120  007C54  0E18               	movlw	24
  7121  007C56  5C53               	subwf	digitalWrite@pin^0,w,c
  7122  007C58  B0D8               	btfsc	status,0,c
  7123  007C5A  EF31  F03E         	goto	u1581
  7124  007C5E  EF33  F03E         	goto	u1580
  7125  007C62                     u1581:
  7126  007C62  EF61  F03E         	goto	l2438
  7127  007C66                     u1580:
  7128  007C66                     
  7129                           ;io.c: 24:         pin -=16;
  7130  007C66  0EF0               	movlw	240
  7131  007C68  2653               	addwf	digitalWrite@pin^0,f,c
  7132  007C6A  0EFF               	movlw	255
  7133  007C6C  2254               	addwfc	(digitalWrite@pin+1)^0,f,c
  7134                           
  7135                           ;io.c: 25:         if (value){ ((PORTC) |= (1<<(pin)));}
  7136  007C6E  5055               	movf	digitalWrite@value^0,w,c
  7137  007C70  1056               	iorwf	(digitalWrite@value+1)^0,w,c
  7138  007C72  B4D8               	btfsc	status,2,c
  7139  007C74  EF3E  F03E         	goto	u1591
  7140  007C78  EF40  F03E         	goto	u1590
  7141  007C7C                     u1591:
  7142  007C7C  EF50  F03E         	goto	l2436
  7143  007C80                     u1590:
  7144  007C80  C053  F057         	movff	digitalWrite@pin,??_digitalWrite
  7145  007C84  0E01               	movlw	1
  7146  007C86  6E58               	movwf	(??_digitalWrite+1)^0,c
  7147  007C88  2A57               	incf	??_digitalWrite^0,f,c
  7148  007C8A  EF49  F03E         	goto	u1604
  7149  007C8E                     u1605:
  7150  007C8E  90D8               	bcf	status,0,c
  7151  007C90  3658               	rlcf	(??_digitalWrite+1)^0,f,c
  7152  007C92                     u1604:
  7153  007C92  2E57               	decfsz	??_digitalWrite^0,f,c
  7154  007C94  EF47  F03E         	goto	u1605
  7155  007C98  5058               	movf	(??_digitalWrite+1)^0,w,c
  7156  007C9A  1282               	iorwf	130,f,c	;volatile
  7157  007C9C  EFD7  F03E         	goto	l42
  7158  007CA0                     l2436:
  7159  007CA0  C053  F057         	movff	digitalWrite@pin,??_digitalWrite
  7160  007CA4  0E01               	movlw	1
  7161  007CA6  6E58               	movwf	(??_digitalWrite+1)^0,c
  7162  007CA8  2A57               	incf	??_digitalWrite^0,f,c
  7163  007CAA  EF59  F03E         	goto	u1614
  7164  007CAE                     u1615:
  7165  007CAE  90D8               	bcf	status,0,c
  7166  007CB0  3658               	rlcf	(??_digitalWrite+1)^0,f,c
  7167  007CB2                     u1614:
  7168  007CB2  2E57               	decfsz	??_digitalWrite^0,f,c
  7169  007CB4  EF57  F03E         	goto	u1615
  7170  007CB8  5058               	movf	(??_digitalWrite+1)^0,w,c
  7171  007CBA  0AFF               	xorlw	255
  7172  007CBC  1682               	andwf	130,f,c	;volatile
  7173  007CBE  EFD7  F03E         	goto	l42
  7174  007CC2                     l2438:
  7175  007CC2  BE54               	btfsc	(digitalWrite@pin+1)^0,7,c
  7176  007CC4  EF6F  F03E         	goto	u1620
  7177  007CC8  5054               	movf	(digitalWrite@pin+1)^0,w,c
  7178  007CCA  E107               	bnz	u1621
  7179  007CCC  0E20               	movlw	32
  7180  007CCE  5C53               	subwf	digitalWrite@pin^0,w,c
  7181  007CD0  B0D8               	btfsc	status,0,c
  7182  007CD2  EF6D  F03E         	goto	u1621
  7183  007CD6  EF6F  F03E         	goto	u1620
  7184  007CDA                     u1621:
  7185  007CDA  EF9D  F03E         	goto	l2446
  7186  007CDE                     u1620:
  7187  007CDE                     
  7188                           ;io.c: 28:         pin -=24;
  7189  007CDE  0EE8               	movlw	232
  7190  007CE0  2653               	addwf	digitalWrite@pin^0,f,c
  7191  007CE2  0EFF               	movlw	255
  7192  007CE4  2254               	addwfc	(digitalWrite@pin+1)^0,f,c
  7193                           
  7194                           ;io.c: 29:         if (value){ ((PORTD) |= (1<<(pin)));}
  7195  007CE6  5055               	movf	digitalWrite@value^0,w,c
  7196  007CE8  1056               	iorwf	(digitalWrite@value+1)^0,w,c
  7197  007CEA  B4D8               	btfsc	status,2,c
  7198  007CEC  EF7A  F03E         	goto	u1631
  7199  007CF0  EF7C  F03E         	goto	u1630
  7200  007CF4                     u1631:
  7201  007CF4  EF8C  F03E         	goto	l2444
  7202  007CF8                     u1630:
  7203  007CF8  C053  F057         	movff	digitalWrite@pin,??_digitalWrite
  7204  007CFC  0E01               	movlw	1
  7205  007CFE  6E58               	movwf	(??_digitalWrite+1)^0,c
  7206  007D00  2A57               	incf	??_digitalWrite^0,f,c
  7207  007D02  EF85  F03E         	goto	u1644
  7208  007D06                     u1645:
  7209  007D06  90D8               	bcf	status,0,c
  7210  007D08  3658               	rlcf	(??_digitalWrite+1)^0,f,c
  7211  007D0A                     u1644:
  7212  007D0A  2E57               	decfsz	??_digitalWrite^0,f,c
  7213  007D0C  EF83  F03E         	goto	u1645
  7214  007D10  5058               	movf	(??_digitalWrite+1)^0,w,c
  7215  007D12  1283               	iorwf	131,f,c	;volatile
  7216  007D14  EFD7  F03E         	goto	l42
  7217  007D18                     l2444:
  7218  007D18  C053  F057         	movff	digitalWrite@pin,??_digitalWrite
  7219  007D1C  0E01               	movlw	1
  7220  007D1E  6E58               	movwf	(??_digitalWrite+1)^0,c
  7221  007D20  2A57               	incf	??_digitalWrite^0,f,c
  7222  007D22  EF95  F03E         	goto	u1654
  7223  007D26                     u1655:
  7224  007D26  90D8               	bcf	status,0,c
  7225  007D28  3658               	rlcf	(??_digitalWrite+1)^0,f,c
  7226  007D2A                     u1654:
  7227  007D2A  2E57               	decfsz	??_digitalWrite^0,f,c
  7228  007D2C  EF93  F03E         	goto	u1655
  7229  007D30  5058               	movf	(??_digitalWrite+1)^0,w,c
  7230  007D32  0AFF               	xorlw	255
  7231  007D34  1683               	andwf	131,f,c	;volatile
  7232  007D36  EFD7  F03E         	goto	l42
  7233  007D3A                     l2446:
  7234  007D3A  BE54               	btfsc	(digitalWrite@pin+1)^0,7,c
  7235  007D3C  EFAB  F03E         	goto	u1660
  7236  007D40  5054               	movf	(digitalWrite@pin+1)^0,w,c
  7237  007D42  E107               	bnz	u1661
  7238  007D44  0E28               	movlw	40
  7239  007D46  5C53               	subwf	digitalWrite@pin^0,w,c
  7240  007D48  B0D8               	btfsc	status,0,c
  7241  007D4A  EFA9  F03E         	goto	u1661
  7242  007D4E  EFAB  F03E         	goto	u1660
  7243  007D52                     u1661:
  7244  007D52  EFD7  F03E         	goto	l42
  7245  007D56                     u1660:
  7246  007D56                     
  7247                           ;io.c: 32:         pin -=32;
  7248  007D56  0EE0               	movlw	224
  7249  007D58  2653               	addwf	digitalWrite@pin^0,f,c
  7250  007D5A  0EFF               	movlw	255
  7251  007D5C  2254               	addwfc	(digitalWrite@pin+1)^0,f,c
  7252                           
  7253                           ;io.c: 33:         if (value){ ((PORTE) |= (1<<(pin)));}
  7254  007D5E  5055               	movf	digitalWrite@value^0,w,c
  7255  007D60  1056               	iorwf	(digitalWrite@value+1)^0,w,c
  7256  007D62  B4D8               	btfsc	status,2,c
  7257  007D64  EFB6  F03E         	goto	u1671
  7258  007D68  EFB8  F03E         	goto	u1670
  7259  007D6C                     u1671:
  7260  007D6C  EFC8  F03E         	goto	l2452
  7261  007D70                     u1670:
  7262  007D70  C053  F057         	movff	digitalWrite@pin,??_digitalWrite
  7263  007D74  0E01               	movlw	1
  7264  007D76  6E58               	movwf	(??_digitalWrite+1)^0,c
  7265  007D78  2A57               	incf	??_digitalWrite^0,f,c
  7266  007D7A  EFC1  F03E         	goto	u1684
  7267  007D7E                     u1685:
  7268  007D7E  90D8               	bcf	status,0,c
  7269  007D80  3658               	rlcf	(??_digitalWrite+1)^0,f,c
  7270  007D82                     u1684:
  7271  007D82  2E57               	decfsz	??_digitalWrite^0,f,c
  7272  007D84  EFBF  F03E         	goto	u1685
  7273  007D88  5058               	movf	(??_digitalWrite+1)^0,w,c
  7274  007D8A  1284               	iorwf	132,f,c	;volatile
  7275  007D8C  EFD7  F03E         	goto	l42
  7276  007D90                     l2452:
  7277  007D90  C053  F057         	movff	digitalWrite@pin,??_digitalWrite
  7278  007D94  0E01               	movlw	1
  7279  007D96  6E58               	movwf	(??_digitalWrite+1)^0,c
  7280  007D98  2A57               	incf	??_digitalWrite^0,f,c
  7281  007D9A  EFD1  F03E         	goto	u1694
  7282  007D9E                     u1695:
  7283  007D9E  90D8               	bcf	status,0,c
  7284  007DA0  3658               	rlcf	(??_digitalWrite+1)^0,f,c
  7285  007DA2                     u1694:
  7286  007DA2  2E57               	decfsz	??_digitalWrite^0,f,c
  7287  007DA4  EFCF  F03E         	goto	u1695
  7288  007DA8  5058               	movf	(??_digitalWrite+1)^0,w,c
  7289  007DAA  0AFF               	xorlw	255
  7290  007DAC  1684               	andwf	132,f,c	;volatile
  7291  007DAE                     l42:
  7292  007DAE  0012               	return		;funcret
  7293  007DB0                     __end_of_digitalWrite:
  7294                           	callstack 0
  7295                           
  7296 ;; *************** function _delayMicro *****************
  7297 ;; Defined at:
  7298 ;;		line 5 in file "lcd.c"
  7299 ;; Parameters:    Size  Location     Type
  7300 ;;  a               2    0[COMRAM] int 
  7301 ;; Auto vars:     Size  Location     Type
  7302 ;;  i               2    0        volatile int 
  7303 ;; Return value:  Size  Location     Type
  7304 ;;                  1    wreg      void 
  7305 ;; Registers used:
  7306 ;;		None
  7307 ;; Tracked objects:
  7308 ;;		On entry : 0/0
  7309 ;;		On exit  : 0/0
  7310 ;;		Unchanged: 0/0
  7311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7312 ;;      Params:         2       0       0       0       0       0       0
  7313 ;;      Locals:         0       0       0       0       0       0       0
  7314 ;;      Temps:          0       0       0       0       0       0       0
  7315 ;;      Totals:         2       0       0       0       0       0       0
  7316 ;;Total ram usage:        2 bytes
  7317 ;; Hardware stack levels used:    1
  7318 ;; This function calls:
  7319 ;;		Nothing
  7320 ;; This function is called by:
  7321 ;;		_pulseEnablePin
  7322 ;;		_lcdChar
  7323 ;;		_lcdInit
  7324 ;; This function uses a non-reentrant model
  7325 ;;
  7326                           
  7327                           	psect	text59
  7328  00602A                     __ptext59:
  7329                           	callstack 0
  7330  00602A                     _delayMicro:
  7331                           	callstack 25
  7332  00602A  0012               	return		;funcret
  7333  00602C                     __end_of_delayMicro:
  7334                           	callstack 0
  7335                           
  7336 ;; *************** function _mixerInit *****************
  7337 ;; Defined at:
  7338 ;;		line 15 in file "mixer.c"
  7339 ;; Parameters:    Size  Location     Type
  7340 ;;		None
  7341 ;; Auto vars:     Size  Location     Type
  7342 ;;		None
  7343 ;; Return value:  Size  Location     Type
  7344 ;;                  1    wreg      void 
  7345 ;; Registers used:
  7346 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7347 ;; Tracked objects:
  7348 ;;		On entry : 0/0
  7349 ;;		On exit  : 0/0
  7350 ;;		Unchanged: 0/0
  7351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7352 ;;      Params:         0       0       0       0       0       0       0
  7353 ;;      Locals:         0       0       0       0       0       0       0
  7354 ;;      Temps:          0       0       0       0       0       0       0
  7355 ;;      Totals:         0       0       0       0       0       0       0
  7356 ;;Total ram usage:        0 bytes
  7357 ;; Hardware stack levels used:    1
  7358 ;; Hardware stack levels required when called:    3
  7359 ;; This function calls:
  7360 ;;		_pwmInit
  7361 ;;		_serialInit
  7362 ;; This function is called by:
  7363 ;;		_gameInit
  7364 ;; This function uses a non-reentrant model
  7365 ;;
  7366                           
  7367                           	psect	text60
  7368  00678E                     __ptext60:
  7369                           	callstack 0
  7370  00678E                     _mixerInit:
  7371                           	callstack 26
  7372  00678E                     
  7373                           ;mixer.c: 16:     serialInit();
  7374  00678E  EC66  F030         	call	_serialInit	;wreg free
  7375                           
  7376                           ;mixer.c: 17:     pwmInit();
  7377  006792  EC59  F030         	call	_pwmInit	;wreg free
  7378  006796                     
  7379                           ;mixer.c: 19:     playlist[0] = pacman_song;
  7380  006796  EE20  F0E9         	lfsr	2,_pacman_song
  7381  00679A  EE10  F080         	lfsr	1,_playlist
  7382  00679E  0E14               	movlw	20
  7383  0067A0                     u2531:
  7384  0067A0  CFDB FFE3          	movff	plusw2,plusw1
  7385  0067A4  06E8               	decf	wreg,f,c
  7386  0067A6  E2FC               	bc	u2531
  7387  0067A8                     
  7388                           ;mixer.c: 20:     playlist[1] = tetris_song;
  7389  0067A8  EE20  F0D4         	lfsr	2,_tetris_song
  7390  0067AC  EE10  F095         	lfsr	1,_playlist+21
  7391  0067B0  0E14               	movlw	20
  7392  0067B2                     u2541:
  7393  0067B2  CFDB FFE3          	movff	plusw2,plusw1
  7394  0067B6  06E8               	decf	wreg,f,c
  7395  0067B8  E2FC               	bc	u2541
  7396  0067BA                     
  7397                           ;mixer.c: 21:     playlist[2] = sw_song;
  7398  0067BA  EE20  F0BF         	lfsr	2,_sw_song
  7399  0067BE  EE10  F0AA         	lfsr	1,_playlist+42
  7400  0067C2  0E14               	movlw	20
  7401  0067C4                     u2551:
  7402  0067C4  CFDB FFE3          	movff	plusw2,plusw1
  7403  0067C8  06E8               	decf	wreg,f,c
  7404  0067CA  E2FC               	bc	u2551
  7405  0067CC                     
  7406                           ;mixer.c: 23:     song = playlist[song_idx];
  7407  0067CC  5036               	movf	_song_idx^0,w,c
  7408  0067CE  0D15               	mullw	21
  7409  0067D0  0E80               	movlw	low _playlist
  7410  0067D2  24F3               	addwf	243,w,c
  7411  0067D4  6ED9               	movwf	fsr2l,c
  7412  0067D6  0E00               	movlw	high _playlist
  7413  0067D8  20F4               	addwfc	prodh,w,c
  7414  0067DA  6EDA               	movwf	fsr2h,c
  7415  0067DC  EE10  F03E         	lfsr	1,_song
  7416  0067E0  0E14               	movlw	20
  7417  0067E2                     u2561:
  7418  0067E2  CFDB FFE3          	movff	plusw2,plusw1
  7419  0067E6  06E8               	decf	wreg,f,c
  7420  0067E8  E2FC               	bc	u2561
  7421  0067EA  0012               	return		;funcret
  7422  0067EC                     __end_of_mixerInit:
  7423                           	callstack 0
  7424                           
  7425 ;; *************** function _serialInit *****************
  7426 ;; Defined at:
  7427 ;;		line 48 in file "serial.c"
  7428 ;; Parameters:    Size  Location     Type
  7429 ;;		None
  7430 ;; Auto vars:     Size  Location     Type
  7431 ;;		None
  7432 ;; Return value:  Size  Location     Type
  7433 ;;                  1    wreg      void 
  7434 ;; Registers used:
  7435 ;;		wreg, status,2, status,0
  7436 ;; Tracked objects:
  7437 ;;		On entry : 0/0
  7438 ;;		On exit  : 0/0
  7439 ;;		Unchanged: 0/0
  7440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7441 ;;      Params:         0       0       0       0       0       0       0
  7442 ;;      Locals:         0       0       0       0       0       0       0
  7443 ;;      Temps:          0       0       0       0       0       0       0
  7444 ;;      Totals:         0       0       0       0       0       0       0
  7445 ;;Total ram usage:        0 bytes
  7446 ;; Hardware stack levels used:    1
  7447 ;; This function calls:
  7448 ;;		Nothing
  7449 ;; This function is called by:
  7450 ;;		_mixerInit
  7451 ;; This function uses a non-reentrant model
  7452 ;;
  7453                           
  7454                           	psect	text61
  7455  0060CC                     __ptext61:
  7456                           	callstack 0
  7457  0060CC                     _serialInit:
  7458                           	callstack 28
  7459  0060CC                     
  7460                           ;serial.c: 49:     TXSTA = 0b00101100;
  7461  0060CC  0E2C               	movlw	44
  7462  0060CE  6EAC               	movwf	172,c	;volatile
  7463                           
  7464                           ;serial.c: 50:     RCSTA = 0b10010000;
  7465  0060D0  0E90               	movlw	144
  7466  0060D2  6EAB               	movwf	171,c	;volatile
  7467                           
  7468                           ;serial.c: 51:     BAUDCON = 0b00001000;
  7469  0060D4  0E08               	movlw	8
  7470  0060D6  6EB8               	movwf	184,c	;volatile
  7471                           
  7472                           ;serial.c: 52:     SPBRGH = 0;
  7473  0060D8  0E00               	movlw	0
  7474  0060DA  6EB0               	movwf	176,c	;volatile
  7475                           
  7476                           ;serial.c: 53:     SPBRG = 34;
  7477  0060DC  0E22               	movlw	34
  7478  0060DE  6EAF               	movwf	175,c	;volatile
  7479  0060E0                     
  7480                           ;serial.c: 54:     ((TRISC) |= (1<<(6)));
  7481  0060E0  8C94               	bsf	148,6,c	;volatile
  7482  0060E2                     
  7483                           ;serial.c: 55:     ((TRISC) |= (1<<(7)));
  7484  0060E2  8E94               	bsf	148,7,c	;volatile
  7485  0060E4  0012               	return		;funcret
  7486  0060E6                     __end_of_serialInit:
  7487                           	callstack 0
  7488                           
  7489 ;; *************** function _pwmInit *****************
  7490 ;; Defined at:
  7491 ;;		line 51 in file "pwm.c"
  7492 ;; Parameters:    Size  Location     Type
  7493 ;;		None
  7494 ;; Auto vars:     Size  Location     Type
  7495 ;;		None
  7496 ;; Return value:  Size  Location     Type
  7497 ;;                  1    wreg      void 
  7498 ;; Registers used:
  7499 ;;		wreg, status,2, status,0, cstack
  7500 ;; Tracked objects:
  7501 ;;		On entry : 0/0
  7502 ;;		On exit  : 0/0
  7503 ;;		Unchanged: 0/0
  7504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7505 ;;      Params:         0       0       0       0       0       0       0
  7506 ;;      Locals:         0       0       0       0       0       0       0
  7507 ;;      Temps:          0       0       0       0       0       0       0
  7508 ;;      Totals:         0       0       0       0       0       0       0
  7509 ;;Total ram usage:        0 bytes
  7510 ;; Hardware stack levels used:    1
  7511 ;; Hardware stack levels required when called:    2
  7512 ;; This function calls:
  7513 ;;		_pwmFrequency
  7514 ;; This function is called by:
  7515 ;;		_mixerInit
  7516 ;; This function uses a non-reentrant model
  7517 ;;
  7518                           
  7519                           	psect	text62
  7520  0060B2                     __ptext62:
  7521                           	callstack 0
  7522  0060B2                     _pwmInit:
  7523                           	callstack 26
  7524  0060B2                     
  7525                           ;pwm.c: 53:  ((TRISC) &= ~(1<<(1)));
  7526  0060B2  9294               	bcf	148,1,c	;volatile
  7527  0060B4                     
  7528                           ;pwm.c: 55:  T2CON |= 0b00000011;
  7529  0060B4  0E03               	movlw	3
  7530  0060B6  12CA               	iorwf	202,f,c	;volatile
  7531  0060B8                     
  7532                           ;pwm.c: 56:  ((T2CON) |= (1<<(2)));
  7533  0060B8  84CA               	bsf	202,2,c	;volatile
  7534  0060BA                     
  7535                           ;pwm.c: 58:  CCP2CON = 0b00001100;
  7536  0060BA  0E0C               	movlw	12
  7537  0060BC  6EBA               	movwf	186,c	;volatile
  7538  0060BE                     
  7539                           ;pwm.c: 60:     pwmFrequency(100);
  7540  0060BE  0E00               	movlw	0
  7541  0060C0  6E62               	movwf	(pwmFrequency@freq+1)^0,c
  7542  0060C2  0E64               	movlw	100
  7543  0060C4  6E61               	movwf	pwmFrequency@freq^0,c
  7544  0060C6  ECA2  F030         	call	_pwmFrequency	;wreg free
  7545  0060CA  0012               	return		;funcret
  7546  0060CC                     __end_of_pwmInit:
  7547                           	callstack 0
  7548                           
  7549 ;; *************** function _pwmFrequency *****************
  7550 ;; Defined at:
  7551 ;;		line 44 in file "pwm.c"
  7552 ;; Parameters:    Size  Location     Type
  7553 ;;  freq            2   14[COMRAM] unsigned int 
  7554 ;; Auto vars:     Size  Location     Type
  7555 ;;		None
  7556 ;; Return value:  Size  Location     Type
  7557 ;;                  1    wreg      void 
  7558 ;; Registers used:
  7559 ;;		wreg, status,2, status,0, cstack
  7560 ;; Tracked objects:
  7561 ;;		On entry : 0/0
  7562 ;;		On exit  : 0/0
  7563 ;;		Unchanged: 0/0
  7564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7565 ;;      Params:         2       0       0       0       0       0       0
  7566 ;;      Locals:         0       0       0       0       0       0       0
  7567 ;;      Temps:          0       0       0       0       0       0       0
  7568 ;;      Totals:         2       0       0       0       0       0       0
  7569 ;;Total ram usage:        2 bytes
  7570 ;; Hardware stack levels used:    1
  7571 ;; Hardware stack levels required when called:    1
  7572 ;; This function calls:
  7573 ;;		___aldiv
  7574 ;; This function is called by:
  7575 ;;		_startNote
  7576 ;;		_stopNote
  7577 ;;		_pwmInit
  7578 ;; This function uses a non-reentrant model
  7579 ;;
  7580                           
  7581                           	psect	text63
  7582  006144                     __ptext63:
  7583                           	callstack 0
  7584  006144                     _pwmFrequency:
  7585                           	callstack 25
  7586  006144                     
  7587                           ;pwm.c: 44: void pwmFrequency(unsigned int freq);pwm.c: 45: {;pwm.c: 48:  PR2 = (125000l
      +                          /(freq)) - 1;
  7588  006144  0E48               	movlw	72
  7589  006146  6E53               	movwf	___aldiv@dividend^0,c
  7590  006148  0EE8               	movlw	232
  7591  00614A  6E54               	movwf	(___aldiv@dividend+1)^0,c
  7592  00614C  0E01               	movlw	1
  7593  00614E  6E55               	movwf	(___aldiv@dividend+2)^0,c
  7594  006150  0E00               	movlw	0
  7595  006152  6E56               	movwf	(___aldiv@dividend+3)^0,c
  7596  006154  C061  F057         	movff	pwmFrequency@freq,___aldiv@divisor
  7597  006158  C062  F058         	movff	pwmFrequency@freq+1,___aldiv@divisor+1
  7598  00615C  6A59               	clrf	(___aldiv@divisor+2)^0,c
  7599  00615E  6A5A               	clrf	(___aldiv@divisor+3)^0,c
  7600  006160  EC71  F039         	call	___aldiv	;wreg free
  7601  006164  0453               	decf	?___aldiv^0,w,c
  7602  006166  6ECB               	movwf	203,c	;volatile
  7603  006168  0012               	return		;funcret
  7604  00616A                     __end_of_pwmFrequency:
  7605                           	callstack 0
  7606                           
  7607 ;; *************** function ___aldiv *****************
  7608 ;; Defined at:
  7609 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\aldiv.c"
  7610 ;; Parameters:    Size  Location     Type
  7611 ;;  dividend        4    0[COMRAM] long 
  7612 ;;  divisor         4    4[COMRAM] long 
  7613 ;; Auto vars:     Size  Location     Type
  7614 ;;  quotient        4   10[COMRAM] long 
  7615 ;;  sign            1    9[COMRAM] unsigned char 
  7616 ;;  counter         1    8[COMRAM] unsigned char 
  7617 ;; Return value:  Size  Location     Type
  7618 ;;                  4    0[COMRAM] long 
  7619 ;; Registers used:
  7620 ;;		wreg, status,2, status,0
  7621 ;; Tracked objects:
  7622 ;;		On entry : 0/0
  7623 ;;		On exit  : 0/0
  7624 ;;		Unchanged: 0/0
  7625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7626 ;;      Params:         8       0       0       0       0       0       0
  7627 ;;      Locals:         6       0       0       0       0       0       0
  7628 ;;      Temps:          0       0       0       0       0       0       0
  7629 ;;      Totals:        14       0       0       0       0       0       0
  7630 ;;Total ram usage:       14 bytes
  7631 ;; Hardware stack levels used:    1
  7632 ;; This function calls:
  7633 ;;		Nothing
  7634 ;; This function is called by:
  7635 ;;		_pwmFrequency
  7636 ;; This function uses a non-reentrant model
  7637 ;;
  7638                           
  7639                           	psect	text64
  7640  0072E2                     __ptext64:
  7641                           	callstack 0
  7642  0072E2                     ___aldiv:
  7643                           	callstack 25
  7644  0072E2  0E00               	movlw	0
  7645  0072E4  6E5C               	movwf	___aldiv@sign^0,c
  7646  0072E6  BE5A               	btfsc	(___aldiv@divisor+3)^0,7,c
  7647  0072E8  EF7A  F039         	goto	u1720
  7648  0072EC  EF78  F039         	goto	u1721
  7649  0072F0                     u1721:
  7650  0072F0  EF84  F039         	goto	l2498
  7651  0072F4                     u1720:
  7652  0072F4  1E5A               	comf	(___aldiv@divisor+3)^0,f,c
  7653  0072F6  1E59               	comf	(___aldiv@divisor+2)^0,f,c
  7654  0072F8  1E58               	comf	(___aldiv@divisor+1)^0,f,c
  7655  0072FA  6C57               	negf	___aldiv@divisor^0,c
  7656  0072FC  0E00               	movlw	0
  7657  0072FE  2258               	addwfc	(___aldiv@divisor+1)^0,f,c
  7658  007300  2259               	addwfc	(___aldiv@divisor+2)^0,f,c
  7659  007302  225A               	addwfc	(___aldiv@divisor+3)^0,f,c
  7660  007304  0E01               	movlw	1
  7661  007306  6E5C               	movwf	___aldiv@sign^0,c
  7662  007308                     l2498:
  7663  007308  BE56               	btfsc	(___aldiv@dividend+3)^0,7,c
  7664  00730A  EF8B  F039         	goto	u1730
  7665  00730E  EF89  F039         	goto	u1731
  7666  007312                     u1731:
  7667  007312  EF95  F039         	goto	l2504
  7668  007316                     u1730:
  7669  007316  1E56               	comf	(___aldiv@dividend+3)^0,f,c
  7670  007318  1E55               	comf	(___aldiv@dividend+2)^0,f,c
  7671  00731A  1E54               	comf	(___aldiv@dividend+1)^0,f,c
  7672  00731C  6C53               	negf	___aldiv@dividend^0,c
  7673  00731E  0E00               	movlw	0
  7674  007320  2254               	addwfc	(___aldiv@dividend+1)^0,f,c
  7675  007322  2255               	addwfc	(___aldiv@dividend+2)^0,f,c
  7676  007324  2256               	addwfc	(___aldiv@dividend+3)^0,f,c
  7677  007326  0E01               	movlw	1
  7678  007328  1A5C               	xorwf	___aldiv@sign^0,f,c
  7679  00732A                     l2504:
  7680  00732A  0E00               	movlw	0
  7681  00732C  6E5D               	movwf	___aldiv@quotient^0,c
  7682  00732E  0E00               	movlw	0
  7683  007330  6E5E               	movwf	(___aldiv@quotient+1)^0,c
  7684  007332  0E00               	movlw	0
  7685  007334  6E5F               	movwf	(___aldiv@quotient+2)^0,c
  7686  007336  0E00               	movlw	0
  7687  007338  6E60               	movwf	(___aldiv@quotient+3)^0,c
  7688  00733A  5057               	movf	___aldiv@divisor^0,w,c
  7689  00733C  1058               	iorwf	(___aldiv@divisor+1)^0,w,c
  7690  00733E  1059               	iorwf	(___aldiv@divisor+2)^0,w,c
  7691  007340  105A               	iorwf	(___aldiv@divisor+3)^0,w,c
  7692  007342  B4D8               	btfsc	status,2,c
  7693  007344  EFA6  F039         	goto	u1741
  7694  007348  EFA8  F039         	goto	u1740
  7695  00734C                     u1741:
  7696  00734C  EFDE  F039         	goto	l2526
  7697  007350                     u1740:
  7698  007350  0E01               	movlw	1
  7699  007352  6E5B               	movwf	___aldiv@counter^0,c
  7700  007354  EFB2  F039         	goto	l2512
  7701  007358                     l2510:
  7702  007358  90D8               	bcf	status,0,c
  7703  00735A  3657               	rlcf	___aldiv@divisor^0,f,c
  7704  00735C  3658               	rlcf	(___aldiv@divisor+1)^0,f,c
  7705  00735E  3659               	rlcf	(___aldiv@divisor+2)^0,f,c
  7706  007360  365A               	rlcf	(___aldiv@divisor+3)^0,f,c
  7707  007362  2A5B               	incf	___aldiv@counter^0,f,c
  7708  007364                     l2512:
  7709  007364  AE5A               	btfss	(___aldiv@divisor+3)^0,7,c
  7710  007366  EFB7  F039         	goto	u1751
  7711  00736A  EFB9  F039         	goto	u1750
  7712  00736E                     u1751:
  7713  00736E  EFAC  F039         	goto	l2510
  7714  007372                     u1750:
  7715  007372                     l2514:
  7716  007372  90D8               	bcf	status,0,c
  7717  007374  365D               	rlcf	___aldiv@quotient^0,f,c
  7718  007376  365E               	rlcf	(___aldiv@quotient+1)^0,f,c
  7719  007378  365F               	rlcf	(___aldiv@quotient+2)^0,f,c
  7720  00737A  3660               	rlcf	(___aldiv@quotient+3)^0,f,c
  7721  00737C  5057               	movf	___aldiv@divisor^0,w,c
  7722  00737E  5C53               	subwf	___aldiv@dividend^0,w,c
  7723  007380  5058               	movf	(___aldiv@divisor+1)^0,w,c
  7724  007382  5854               	subwfb	(___aldiv@dividend+1)^0,w,c
  7725  007384  5059               	movf	(___aldiv@divisor+2)^0,w,c
  7726  007386  5855               	subwfb	(___aldiv@dividend+2)^0,w,c
  7727  007388  505A               	movf	(___aldiv@divisor+3)^0,w,c
  7728  00738A  5856               	subwfb	(___aldiv@dividend+3)^0,w,c
  7729  00738C  A0D8               	btfss	status,0,c
  7730  00738E  EFCB  F039         	goto	u1761
  7731  007392  EFCD  F039         	goto	u1760
  7732  007396                     u1761:
  7733  007396  EFD6  F039         	goto	l2522
  7734  00739A                     u1760:
  7735  00739A  5057               	movf	___aldiv@divisor^0,w,c
  7736  00739C  5E53               	subwf	___aldiv@dividend^0,f,c
  7737  00739E  5058               	movf	(___aldiv@divisor+1)^0,w,c
  7738  0073A0  5A54               	subwfb	(___aldiv@dividend+1)^0,f,c
  7739  0073A2  5059               	movf	(___aldiv@divisor+2)^0,w,c
  7740  0073A4  5A55               	subwfb	(___aldiv@dividend+2)^0,f,c
  7741  0073A6  505A               	movf	(___aldiv@divisor+3)^0,w,c
  7742  0073A8  5A56               	subwfb	(___aldiv@dividend+3)^0,f,c
  7743  0073AA  805D               	bsf	___aldiv@quotient^0,0,c
  7744  0073AC                     l2522:
  7745  0073AC  90D8               	bcf	status,0,c
  7746  0073AE  325A               	rrcf	(___aldiv@divisor+3)^0,f,c
  7747  0073B0  3259               	rrcf	(___aldiv@divisor+2)^0,f,c
  7748  0073B2  3258               	rrcf	(___aldiv@divisor+1)^0,f,c
  7749  0073B4  3257               	rrcf	___aldiv@divisor^0,f,c
  7750  0073B6  2E5B               	decfsz	___aldiv@counter^0,f,c
  7751  0073B8  EFB9  F039         	goto	l2514
  7752  0073BC                     l2526:
  7753  0073BC  505C               	movf	___aldiv@sign^0,w,c
  7754  0073BE  B4D8               	btfsc	status,2,c
  7755  0073C0  EFE4  F039         	goto	u1771
  7756  0073C4  EFE6  F039         	goto	u1770
  7757  0073C8                     u1771:
  7758  0073C8  EFEE  F039         	goto	l2530
  7759  0073CC                     u1770:
  7760  0073CC  1E60               	comf	(___aldiv@quotient+3)^0,f,c
  7761  0073CE  1E5F               	comf	(___aldiv@quotient+2)^0,f,c
  7762  0073D0  1E5E               	comf	(___aldiv@quotient+1)^0,f,c
  7763  0073D2  6C5D               	negf	___aldiv@quotient^0,c
  7764  0073D4  0E00               	movlw	0
  7765  0073D6  225E               	addwfc	(___aldiv@quotient+1)^0,f,c
  7766  0073D8  225F               	addwfc	(___aldiv@quotient+2)^0,f,c
  7767  0073DA  2260               	addwfc	(___aldiv@quotient+3)^0,f,c
  7768  0073DC                     l2530:
  7769  0073DC  C05D  F053         	movff	___aldiv@quotient,?___aldiv
  7770  0073E0  C05E  F054         	movff	___aldiv@quotient+1,?___aldiv+1
  7771  0073E4  C05F  F055         	movff	___aldiv@quotient+2,?___aldiv+2
  7772  0073E8  C060  F056         	movff	___aldiv@quotient+3,?___aldiv+3
  7773  0073EC  0012               	return		;funcret
  7774  0073EE                     __end_of___aldiv:
  7775                           	callstack 0
  7776                           
  7777 ;; *************** function _kpInit *****************
  7778 ;; Defined at:
  7779 ;;		line 67 in file "keypad.c"
  7780 ;; Parameters:    Size  Location     Type
  7781 ;;		None
  7782 ;; Auto vars:     Size  Location     Type
  7783 ;;		None
  7784 ;; Return value:  Size  Location     Type
  7785 ;;                  1    wreg      void 
  7786 ;; Registers used:
  7787 ;;		wreg, status,2, status,0, cstack
  7788 ;; Tracked objects:
  7789 ;;		On entry : 0/0
  7790 ;;		On exit  : 0/0
  7791 ;;		Unchanged: 0/0
  7792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7793 ;;      Params:         0       0       0       0       0       0       0
  7794 ;;      Locals:         0       0       0       0       0       0       0
  7795 ;;      Temps:          0       0       0       0       0       0       0
  7796 ;;      Totals:         0       0       0       0       0       0       0
  7797 ;;Total ram usage:        0 bytes
  7798 ;; Hardware stack levels used:    1
  7799 ;; Hardware stack levels required when called:    2
  7800 ;; This function calls:
  7801 ;;		_pinMode
  7802 ;;		_soInit
  7803 ;; This function is called by:
  7804 ;;		_gameInit
  7805 ;; This function uses a non-reentrant model
  7806 ;;
  7807                           
  7808                           	psect	text65
  7809  006334                     __ptext65:
  7810                           	callstack 0
  7811  006334                     _kpInit:
  7812                           	callstack 27
  7813  006334                     
  7814                           ;keypad.c: 68:   soInit();
  7815  006334  EC29  F032         	call	_soInit	;wreg free
  7816                           
  7817                           ;keypad.c: 69:   pinMode(PIN_B2, 1);
  7818  006338  0E00               	movlw	0
  7819  00633A  6E54               	movwf	(pinMode@pin+1)^0,c
  7820  00633C  0E0A               	movlw	10
  7821  00633E  6E53               	movwf	pinMode@pin^0,c
  7822  006340  0E00               	movlw	0
  7823  006342  6E56               	movwf	(pinMode@type+1)^0,c
  7824  006344  0E01               	movlw	1
  7825  006346  6E55               	movwf	pinMode@type^0,c
  7826  006348  EC8A  F03C         	call	_pinMode	;wreg free
  7827                           
  7828                           ;keypad.c: 70:   pinMode(PIN_B1, 1);
  7829  00634C  0E00               	movlw	0
  7830  00634E  6E54               	movwf	(pinMode@pin+1)^0,c
  7831  006350  0E09               	movlw	9
  7832  006352  6E53               	movwf	pinMode@pin^0,c
  7833  006354  0E00               	movlw	0
  7834  006356  6E56               	movwf	(pinMode@type+1)^0,c
  7835  006358  0E01               	movlw	1
  7836  00635A  6E55               	movwf	pinMode@type^0,c
  7837  00635C  EC8A  F03C         	call	_pinMode	;wreg free
  7838  006360                     
  7839                           ;keypad.c: 71:   ADCON1 = 0b00001100;
  7840  006360  0E0C               	movlw	12
  7841  006362  6EC1               	movwf	193,c	;volatile
  7842  006364  0012               	return		;funcret
  7843  006366                     __end_of_kpInit:
  7844                           	callstack 0
  7845                           
  7846 ;; *************** function _soInit *****************
  7847 ;; Defined at:
  7848 ;;		line 3 in file "so.c"
  7849 ;; Parameters:    Size  Location     Type
  7850 ;;		None
  7851 ;; Auto vars:     Size  Location     Type
  7852 ;;		None
  7853 ;; Return value:  Size  Location     Type
  7854 ;;                  1    wreg      void 
  7855 ;; Registers used:
  7856 ;;		wreg, status,2, status,0, cstack
  7857 ;; Tracked objects:
  7858 ;;		On entry : 0/0
  7859 ;;		On exit  : 0/0
  7860 ;;		Unchanged: 0/0
  7861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7862 ;;      Params:         0       0       0       0       0       0       0
  7863 ;;      Locals:         0       0       0       0       0       0       0
  7864 ;;      Temps:          0       0       0       0       0       0       0
  7865 ;;      Totals:         0       0       0       0       0       0       0
  7866 ;;Total ram usage:        0 bytes
  7867 ;; Hardware stack levels used:    1
  7868 ;; Hardware stack levels required when called:    1
  7869 ;; This function calls:
  7870 ;;		_pinMode
  7871 ;; This function is called by:
  7872 ;;		_kpInit
  7873 ;;		_lcdInit
  7874 ;; This function uses a non-reentrant model
  7875 ;;
  7876                           
  7877                           	psect	text66
  7878  006452                     __ptext66:
  7879                           	callstack 0
  7880  006452                     _soInit:
  7881                           	callstack 26
  7882  006452                     
  7883                           ;so.c: 4:  pinMode(PIN_D7, 0);
  7884  006452  0E00               	movlw	0
  7885  006454  6E54               	movwf	(pinMode@pin+1)^0,c
  7886  006456  0E1F               	movlw	31
  7887  006458  6E53               	movwf	pinMode@pin^0,c
  7888  00645A  0E00               	movlw	0
  7889  00645C  6E56               	movwf	(pinMode@type+1)^0,c
  7890  00645E  0E00               	movlw	0
  7891  006460  6E55               	movwf	pinMode@type^0,c
  7892  006462  EC8A  F03C         	call	_pinMode	;wreg free
  7893                           
  7894                           ;so.c: 5:  pinMode(PIN_B0, 0);
  7895  006466  0E00               	movlw	0
  7896  006468  6E54               	movwf	(pinMode@pin+1)^0,c
  7897  00646A  0E08               	movlw	8
  7898  00646C  6E53               	movwf	pinMode@pin^0,c
  7899  00646E  0E00               	movlw	0
  7900  006470  6E56               	movwf	(pinMode@type+1)^0,c
  7901  006472  0E00               	movlw	0
  7902  006474  6E55               	movwf	pinMode@type^0,c
  7903  006476  EC8A  F03C         	call	_pinMode	;wreg free
  7904                           
  7905                           ;so.c: 6:  pinMode(PIN_D6, 0);
  7906  00647A  0E00               	movlw	0
  7907  00647C  6E54               	movwf	(pinMode@pin+1)^0,c
  7908  00647E  0E1E               	movlw	30
  7909  006480  6E53               	movwf	pinMode@pin^0,c
  7910  006482  0E00               	movlw	0
  7911  006484  6E56               	movwf	(pinMode@type+1)^0,c
  7912  006486  0E00               	movlw	0
  7913  006488  6E55               	movwf	pinMode@type^0,c
  7914  00648A  EC8A  F03C         	call	_pinMode	;wreg free
  7915  00648E  0012               	return		;funcret
  7916  006490                     __end_of_soInit:
  7917                           	callstack 0
  7918                           
  7919 ;; *************** function _pinMode *****************
  7920 ;; Defined at:
  7921 ;;		line 54 in file "io.c"
  7922 ;; Parameters:    Size  Location     Type
  7923 ;;  pin             2    0[COMRAM] int 
  7924 ;;  type            2    2[COMRAM] int 
  7925 ;; Auto vars:     Size  Location     Type
  7926 ;;		None
  7927 ;; Return value:  Size  Location     Type
  7928 ;;                  1    wreg      void 
  7929 ;; Registers used:
  7930 ;;		wreg, status,2, status,0
  7931 ;; Tracked objects:
  7932 ;;		On entry : 0/0
  7933 ;;		On exit  : 0/0
  7934 ;;		Unchanged: 0/0
  7935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7936 ;;      Params:         4       0       0       0       0       0       0
  7937 ;;      Locals:         0       0       0       0       0       0       0
  7938 ;;      Temps:          2       0       0       0       0       0       0
  7939 ;;      Totals:         6       0       0       0       0       0       0
  7940 ;;Total ram usage:        6 bytes
  7941 ;; Hardware stack levels used:    1
  7942 ;; This function calls:
  7943 ;;		Nothing
  7944 ;; This function is called by:
  7945 ;;		_kpInit
  7946 ;;		_lcdInit
  7947 ;;		_soInit
  7948 ;; This function uses a non-reentrant model
  7949 ;;
  7950                           
  7951                           	psect	text67
  7952  007914                     __ptext67:
  7953                           	callstack 0
  7954  007914                     _pinMode:
  7955                           	callstack 26
  7956  007914                     
  7957                           ;io.c: 56:     if(pin <8){
  7958  007914  BE54               	btfsc	(pinMode@pin+1)^0,7,c
  7959  007916  EF98  F03C         	goto	u1780
  7960  00791A  5054               	movf	(pinMode@pin+1)^0,w,c
  7961  00791C  E107               	bnz	u1781
  7962  00791E  0E08               	movlw	8
  7963  007920  5C53               	subwf	pinMode@pin^0,w,c
  7964  007922  B0D8               	btfsc	status,0,c
  7965  007924  EF96  F03C         	goto	u1781
  7966  007928  EF98  F03C         	goto	u1780
  7967  00792C                     u1781:
  7968  00792C  EFC2  F03C         	goto	l2542
  7969  007930                     u1780:
  7970  007930                     
  7971                           ;io.c: 57:         if (type){ ((TRISA) |= (1<<(pin)));}
  7972  007930  5055               	movf	pinMode@type^0,w,c
  7973  007932  1056               	iorwf	(pinMode@type+1)^0,w,c
  7974  007934  B4D8               	btfsc	status,2,c
  7975  007936  EF9F  F03C         	goto	u1791
  7976  00793A  EFA1  F03C         	goto	u1790
  7977  00793E                     u1791:
  7978  00793E  EFB1  F03C         	goto	l2540
  7979  007942                     u1790:
  7980  007942  C053  F057         	movff	pinMode@pin,??_pinMode
  7981  007946  0E01               	movlw	1
  7982  007948  6E58               	movwf	(??_pinMode+1)^0,c
  7983  00794A  2A57               	incf	??_pinMode^0,f,c
  7984  00794C  EFAA  F03C         	goto	u1804
  7985  007950                     u1805:
  7986  007950  90D8               	bcf	status,0,c
  7987  007952  3658               	rlcf	(??_pinMode+1)^0,f,c
  7988  007954                     u1804:
  7989  007954  2E57               	decfsz	??_pinMode^0,f,c
  7990  007956  EFA8  F03C         	goto	u1805
  7991  00795A  5058               	movf	(??_pinMode+1)^0,w,c
  7992  00795C  1292               	iorwf	146,f,c	;volatile
  7993  00795E  EFB0  F03D         	goto	l76
  7994  007962                     l2540:
  7995  007962  C053  F057         	movff	pinMode@pin,??_pinMode
  7996  007966  0E01               	movlw	1
  7997  007968  6E58               	movwf	(??_pinMode+1)^0,c
  7998  00796A  2A57               	incf	??_pinMode^0,f,c
  7999  00796C  EFBA  F03C         	goto	u1814
  8000  007970                     u1815:
  8001  007970  90D8               	bcf	status,0,c
  8002  007972  3658               	rlcf	(??_pinMode+1)^0,f,c
  8003  007974                     u1814:
  8004  007974  2E57               	decfsz	??_pinMode^0,f,c
  8005  007976  EFB8  F03C         	goto	u1815
  8006  00797A  5058               	movf	(??_pinMode+1)^0,w,c
  8007  00797C  0AFF               	xorlw	255
  8008  00797E  1692               	andwf	146,f,c	;volatile
  8009  007980  EFB0  F03D         	goto	l76
  8010  007984                     l2542:
  8011  007984  BE54               	btfsc	(pinMode@pin+1)^0,7,c
  8012  007986  EFD0  F03C         	goto	u1820
  8013  00798A  5054               	movf	(pinMode@pin+1)^0,w,c
  8014  00798C  E107               	bnz	u1821
  8015  00798E  0E10               	movlw	16
  8016  007990  5C53               	subwf	pinMode@pin^0,w,c
  8017  007992  B0D8               	btfsc	status,0,c
  8018  007994  EFCE  F03C         	goto	u1821
  8019  007998  EFD0  F03C         	goto	u1820
  8020  00799C                     u1821:
  8021  00799C  EFFE  F03C         	goto	l2550
  8022  0079A0                     u1820:
  8023  0079A0                     
  8024                           ;io.c: 60:         if (type){ ((TRISB) |= (1<<(pin-8)));}
  8025  0079A0  5055               	movf	pinMode@type^0,w,c
  8026  0079A2  1056               	iorwf	(pinMode@type+1)^0,w,c
  8027  0079A4  B4D8               	btfsc	status,2,c
  8028  0079A6  EFD7  F03C         	goto	u1831
  8029  0079AA  EFD9  F03C         	goto	u1830
  8030  0079AE                     u1831:
  8031  0079AE  EFEB  F03C         	goto	l2548
  8032  0079B2                     u1830:
  8033  0079B2  C053  F057         	movff	pinMode@pin,??_pinMode
  8034  0079B6  0EF8               	movlw	-8
  8035  0079B8  2657               	addwf	??_pinMode^0,f,c
  8036  0079BA  0E01               	movlw	1
  8037  0079BC  6E58               	movwf	(??_pinMode+1)^0,c
  8038  0079BE  2A57               	incf	??_pinMode^0,f,c
  8039  0079C0  EFE4  F03C         	goto	u1844
  8040  0079C4                     u1845:
  8041  0079C4  90D8               	bcf	status,0,c
  8042  0079C6  3658               	rlcf	(??_pinMode+1)^0,f,c
  8043  0079C8                     u1844:
  8044  0079C8  2E57               	decfsz	??_pinMode^0,f,c
  8045  0079CA  EFE2  F03C         	goto	u1845
  8046  0079CE  5058               	movf	(??_pinMode+1)^0,w,c
  8047  0079D0  1293               	iorwf	147,f,c	;volatile
  8048  0079D2  EFB0  F03D         	goto	l76
  8049  0079D6                     l2548:
  8050  0079D6  C053  F057         	movff	pinMode@pin,??_pinMode
  8051  0079DA  0EF8               	movlw	-8
  8052  0079DC  2657               	addwf	??_pinMode^0,f,c
  8053  0079DE  0E01               	movlw	1
  8054  0079E0  6E58               	movwf	(??_pinMode+1)^0,c
  8055  0079E2  2A57               	incf	??_pinMode^0,f,c
  8056  0079E4  EFF6  F03C         	goto	u1854
  8057  0079E8                     u1855:
  8058  0079E8  90D8               	bcf	status,0,c
  8059  0079EA  3658               	rlcf	(??_pinMode+1)^0,f,c
  8060  0079EC                     u1854:
  8061  0079EC  2E57               	decfsz	??_pinMode^0,f,c
  8062  0079EE  EFF4  F03C         	goto	u1855
  8063  0079F2  5058               	movf	(??_pinMode+1)^0,w,c
  8064  0079F4  0AFF               	xorlw	255
  8065  0079F6  1693               	andwf	147,f,c	;volatile
  8066  0079F8  EFB0  F03D         	goto	l76
  8067  0079FC                     l2550:
  8068  0079FC  BE54               	btfsc	(pinMode@pin+1)^0,7,c
  8069  0079FE  EF0C  F03D         	goto	u1860
  8070  007A02  5054               	movf	(pinMode@pin+1)^0,w,c
  8071  007A04  E107               	bnz	u1861
  8072  007A06  0E18               	movlw	24
  8073  007A08  5C53               	subwf	pinMode@pin^0,w,c
  8074  007A0A  B0D8               	btfsc	status,0,c
  8075  007A0C  EF0A  F03D         	goto	u1861
  8076  007A10  EF0C  F03D         	goto	u1860
  8077  007A14                     u1861:
  8078  007A14  EF3A  F03D         	goto	l2558
  8079  007A18                     u1860:
  8080  007A18                     
  8081                           ;io.c: 63:         if (type){ ((TRISC) |= (1<<(pin-16)));}
  8082  007A18  5055               	movf	pinMode@type^0,w,c
  8083  007A1A  1056               	iorwf	(pinMode@type+1)^0,w,c
  8084  007A1C  B4D8               	btfsc	status,2,c
  8085  007A1E  EF13  F03D         	goto	u1871
  8086  007A22  EF15  F03D         	goto	u1870
  8087  007A26                     u1871:
  8088  007A26  EF27  F03D         	goto	l2556
  8089  007A2A                     u1870:
  8090  007A2A  C053  F057         	movff	pinMode@pin,??_pinMode
  8091  007A2E  0EF0               	movlw	-16
  8092  007A30  2657               	addwf	??_pinMode^0,f,c
  8093  007A32  0E01               	movlw	1
  8094  007A34  6E58               	movwf	(??_pinMode+1)^0,c
  8095  007A36  2A57               	incf	??_pinMode^0,f,c
  8096  007A38  EF20  F03D         	goto	u1884
  8097  007A3C                     u1885:
  8098  007A3C  90D8               	bcf	status,0,c
  8099  007A3E  3658               	rlcf	(??_pinMode+1)^0,f,c
  8100  007A40                     u1884:
  8101  007A40  2E57               	decfsz	??_pinMode^0,f,c
  8102  007A42  EF1E  F03D         	goto	u1885
  8103  007A46  5058               	movf	(??_pinMode+1)^0,w,c
  8104  007A48  1294               	iorwf	148,f,c	;volatile
  8105  007A4A  EFB0  F03D         	goto	l76
  8106  007A4E                     l2556:
  8107  007A4E  C053  F057         	movff	pinMode@pin,??_pinMode
  8108  007A52  0EF0               	movlw	-16
  8109  007A54  2657               	addwf	??_pinMode^0,f,c
  8110  007A56  0E01               	movlw	1
  8111  007A58  6E58               	movwf	(??_pinMode+1)^0,c
  8112  007A5A  2A57               	incf	??_pinMode^0,f,c
  8113  007A5C  EF32  F03D         	goto	u1894
  8114  007A60                     u1895:
  8115  007A60  90D8               	bcf	status,0,c
  8116  007A62  3658               	rlcf	(??_pinMode+1)^0,f,c
  8117  007A64                     u1894:
  8118  007A64  2E57               	decfsz	??_pinMode^0,f,c
  8119  007A66  EF30  F03D         	goto	u1895
  8120  007A6A  5058               	movf	(??_pinMode+1)^0,w,c
  8121  007A6C  0AFF               	xorlw	255
  8122  007A6E  1694               	andwf	148,f,c	;volatile
  8123  007A70  EFB0  F03D         	goto	l76
  8124  007A74                     l2558:
  8125  007A74  BE54               	btfsc	(pinMode@pin+1)^0,7,c
  8126  007A76  EF48  F03D         	goto	u1900
  8127  007A7A  5054               	movf	(pinMode@pin+1)^0,w,c
  8128  007A7C  E107               	bnz	u1901
  8129  007A7E  0E20               	movlw	32
  8130  007A80  5C53               	subwf	pinMode@pin^0,w,c
  8131  007A82  B0D8               	btfsc	status,0,c
  8132  007A84  EF46  F03D         	goto	u1901
  8133  007A88  EF48  F03D         	goto	u1900
  8134  007A8C                     u1901:
  8135  007A8C  EF76  F03D         	goto	l2566
  8136  007A90                     u1900:
  8137  007A90                     
  8138                           ;io.c: 66:         if (type){ ((TRISD) |= (1<<(pin-24)));}
  8139  007A90  5055               	movf	pinMode@type^0,w,c
  8140  007A92  1056               	iorwf	(pinMode@type+1)^0,w,c
  8141  007A94  B4D8               	btfsc	status,2,c
  8142  007A96  EF4F  F03D         	goto	u1911
  8143  007A9A  EF51  F03D         	goto	u1910
  8144  007A9E                     u1911:
  8145  007A9E  EF63  F03D         	goto	l2564
  8146  007AA2                     u1910:
  8147  007AA2  C053  F057         	movff	pinMode@pin,??_pinMode
  8148  007AA6  0EE8               	movlw	-24
  8149  007AA8  2657               	addwf	??_pinMode^0,f,c
  8150  007AAA  0E01               	movlw	1
  8151  007AAC  6E58               	movwf	(??_pinMode+1)^0,c
  8152  007AAE  2A57               	incf	??_pinMode^0,f,c
  8153  007AB0  EF5C  F03D         	goto	u1924
  8154  007AB4                     u1925:
  8155  007AB4  90D8               	bcf	status,0,c
  8156  007AB6  3658               	rlcf	(??_pinMode+1)^0,f,c
  8157  007AB8                     u1924:
  8158  007AB8  2E57               	decfsz	??_pinMode^0,f,c
  8159  007ABA  EF5A  F03D         	goto	u1925
  8160  007ABE  5058               	movf	(??_pinMode+1)^0,w,c
  8161  007AC0  1295               	iorwf	149,f,c	;volatile
  8162  007AC2  EFB0  F03D         	goto	l76
  8163  007AC6                     l2564:
  8164  007AC6  C053  F057         	movff	pinMode@pin,??_pinMode
  8165  007ACA  0EE8               	movlw	-24
  8166  007ACC  2657               	addwf	??_pinMode^0,f,c
  8167  007ACE  0E01               	movlw	1
  8168  007AD0  6E58               	movwf	(??_pinMode+1)^0,c
  8169  007AD2  2A57               	incf	??_pinMode^0,f,c
  8170  007AD4  EF6E  F03D         	goto	u1934
  8171  007AD8                     u1935:
  8172  007AD8  90D8               	bcf	status,0,c
  8173  007ADA  3658               	rlcf	(??_pinMode+1)^0,f,c
  8174  007ADC                     u1934:
  8175  007ADC  2E57               	decfsz	??_pinMode^0,f,c
  8176  007ADE  EF6C  F03D         	goto	u1935
  8177  007AE2  5058               	movf	(??_pinMode+1)^0,w,c
  8178  007AE4  0AFF               	xorlw	255
  8179  007AE6  1695               	andwf	149,f,c	;volatile
  8180  007AE8  EFB0  F03D         	goto	l76
  8181  007AEC                     l2566:
  8182  007AEC  BE54               	btfsc	(pinMode@pin+1)^0,7,c
  8183  007AEE  EF84  F03D         	goto	u1940
  8184  007AF2  5054               	movf	(pinMode@pin+1)^0,w,c
  8185  007AF4  E107               	bnz	u1941
  8186  007AF6  0E28               	movlw	40
  8187  007AF8  5C53               	subwf	pinMode@pin^0,w,c
  8188  007AFA  B0D8               	btfsc	status,0,c
  8189  007AFC  EF82  F03D         	goto	u1941
  8190  007B00  EF84  F03D         	goto	u1940
  8191  007B04                     u1941:
  8192  007B04  EFB0  F03D         	goto	l76
  8193  007B08                     u1940:
  8194  007B08                     
  8195                           ;io.c: 69:         if (type){ ((TRISE) |= (1<<(pin-32)));}
  8196  007B08  5055               	movf	pinMode@type^0,w,c
  8197  007B0A  1056               	iorwf	(pinMode@type+1)^0,w,c
  8198  007B0C  B4D8               	btfsc	status,2,c
  8199  007B0E  EF8B  F03D         	goto	u1951
  8200  007B12  EF8D  F03D         	goto	u1950
  8201  007B16                     u1951:
  8202  007B16  EF9F  F03D         	goto	l2572
  8203  007B1A                     u1950:
  8204  007B1A  C053  F057         	movff	pinMode@pin,??_pinMode
  8205  007B1E  0EE0               	movlw	-32
  8206  007B20  2657               	addwf	??_pinMode^0,f,c
  8207  007B22  0E01               	movlw	1
  8208  007B24  6E58               	movwf	(??_pinMode+1)^0,c
  8209  007B26  2A57               	incf	??_pinMode^0,f,c
  8210  007B28  EF98  F03D         	goto	u1964
  8211  007B2C                     u1965:
  8212  007B2C  90D8               	bcf	status,0,c
  8213  007B2E  3658               	rlcf	(??_pinMode+1)^0,f,c
  8214  007B30                     u1964:
  8215  007B30  2E57               	decfsz	??_pinMode^0,f,c
  8216  007B32  EF96  F03D         	goto	u1965
  8217  007B36  5058               	movf	(??_pinMode+1)^0,w,c
  8218  007B38  1296               	iorwf	150,f,c	;volatile
  8219  007B3A  EFB0  F03D         	goto	l76
  8220  007B3E                     l2572:
  8221  007B3E  C053  F057         	movff	pinMode@pin,??_pinMode
  8222  007B42  0EE0               	movlw	-32
  8223  007B44  2657               	addwf	??_pinMode^0,f,c
  8224  007B46  0E01               	movlw	1
  8225  007B48  6E58               	movwf	(??_pinMode+1)^0,c
  8226  007B4A  2A57               	incf	??_pinMode^0,f,c
  8227  007B4C  EFAA  F03D         	goto	u1974
  8228  007B50                     u1975:
  8229  007B50  90D8               	bcf	status,0,c
  8230  007B52  3658               	rlcf	(??_pinMode+1)^0,f,c
  8231  007B54                     u1974:
  8232  007B54  2E57               	decfsz	??_pinMode^0,f,c
  8233  007B56  EFA8  F03D         	goto	u1975
  8234  007B5A  5058               	movf	(??_pinMode+1)^0,w,c
  8235  007B5C  0AFF               	xorlw	255
  8236  007B5E  1696               	andwf	150,f,c	;volatile
  8237  007B60                     l76:
  8238  007B60  0012               	return		;funcret
  8239  007B62                     __end_of_pinMode:
  8240                           	callstack 0
  8241                           
  8242                           	psect	rparam
  8243  0000                     
  8244                           	psect	idloc
  8245                           
  8246                           ;Config register IDLOC0 @ 0x200000
  8247                           ;	unspecified, using default values
  8248  200000                     	org	2097152
  8249  200000  FF                 	db	255
  8250                           
  8251                           ;Config register IDLOC1 @ 0x200001
  8252                           ;	unspecified, using default values
  8253  200001                     	org	2097153
  8254  200001  FF                 	db	255
  8255                           
  8256                           ;Config register IDLOC2 @ 0x200002
  8257                           ;	unspecified, using default values
  8258  200002                     	org	2097154
  8259  200002  FF                 	db	255
  8260                           
  8261                           ;Config register IDLOC3 @ 0x200003
  8262                           ;	unspecified, using default values
  8263  200003                     	org	2097155
  8264  200003  FF                 	db	255
  8265                           
  8266                           ;Config register IDLOC4 @ 0x200004
  8267                           ;	unspecified, using default values
  8268  200004                     	org	2097156
  8269  200004  FF                 	db	255
  8270                           
  8271                           ;Config register IDLOC5 @ 0x200005
  8272                           ;	unspecified, using default values
  8273  200005                     	org	2097157
  8274  200005  FF                 	db	255
  8275                           
  8276                           ;Config register IDLOC6 @ 0x200006
  8277                           ;	unspecified, using default values
  8278  200006                     	org	2097158
  8279  200006  FF                 	db	255
  8280                           
  8281                           ;Config register IDLOC7 @ 0x200007
  8282                           ;	unspecified, using default values
  8283  200007                     	org	2097159
  8284  200007  FF                 	db	255
  8285                           
  8286                           	psect	config
  8287                           
  8288                           ; Padding undefined space
  8289  300000                     	org	3145728
  8290  300000  FF                 	db	255
  8291                           
  8292                           ;Config register CONFIG1H @ 0x300001
  8293                           ;	unspecified, using default values
  8294                           ;	Oscillator Selection bits
  8295                           ;	OSC = 0x7, unprogrammed default
  8296                           ;	Fail-Safe Clock Monitor Enable bit
  8297                           ;	FCMEN = 0x0, unprogrammed default
  8298                           ;	Internal/External Oscillator Switchover bit
  8299                           ;	IESO = 0x0, unprogrammed default
  8300  300001                     	org	3145729
  8301  300001  07                 	db	7
  8302                           
  8303                           ;Config register CONFIG2L @ 0x300002
  8304                           ;	unspecified, using default values
  8305                           ;	Power-up Timer Enable bit
  8306                           ;	PWRT = 0x1, unprogrammed default
  8307                           ;	Brown-out Reset Enable bits
  8308                           ;	BOREN = 0x3, unprogrammed default
  8309                           ;	Brown Out Reset Voltage bits
  8310                           ;	BORV = 0x3, unprogrammed default
  8311  300002                     	org	3145730
  8312  300002  1F                 	db	31
  8313                           
  8314                           ;Config register CONFIG2H @ 0x300003
  8315                           ;	unspecified, using default values
  8316                           ;	Watchdog Timer Enable bit
  8317                           ;	WDT = 0x1, unprogrammed default
  8318                           ;	Watchdog Timer Postscale Select bits
  8319                           ;	WDTPS = 0xF, unprogrammed default
  8320  300003                     	org	3145731
  8321  300003  1F                 	db	31
  8322                           
  8323                           ; Padding undefined space
  8324  300004                     	org	3145732
  8325  300004  FF                 	db	255
  8326                           
  8327                           ;Config register CONFIG3H @ 0x300005
  8328                           ;	unspecified, using default values
  8329                           ;	CCP2 MUX bit
  8330                           ;	CCP2MX = 0x1, unprogrammed default
  8331                           ;	PORTB A/D Enable bit
  8332                           ;	PBADEN = 0x1, unprogrammed default
  8333                           ;	Low-Power Timer1 Oscillator Enable bit
  8334                           ;	LPT1OSC = 0x0, unprogrammed default
  8335                           ;	MCLR Pin Enable bit
  8336                           ;	MCLRE = 0x1, unprogrammed default
  8337  300005                     	org	3145733
  8338  300005  83                 	db	131
  8339                           
  8340                           ;Config register CONFIG4L @ 0x300006
  8341                           ;	unspecified, using default values
  8342                           ;	Stack Full/Underflow Reset Enable bit
  8343                           ;	STVREN = 0x1, unprogrammed default
  8344                           ;	Single-Supply ICSP Enable bit
  8345                           ;	LVP = 0x1, unprogrammed default
  8346                           ;	Extended Instruction Set Enable bit
  8347                           ;	XINST = 0x0, unprogrammed default
  8348                           ;	Background Debugger Enable bit
  8349                           ;	DEBUG = 0x1, unprogrammed default
  8350  300006                     	org	3145734
  8351  300006  85                 	db	133
  8352                           
  8353                           ; Padding undefined space
  8354  300007                     	org	3145735
  8355  300007  FF                 	db	255
  8356                           
  8357                           ;Config register CONFIG5L @ 0x300008
  8358                           ;	unspecified, using default values
  8359                           ;	Code Protection bit
  8360                           ;	CP0 = 0x1, unprogrammed default
  8361                           ;	Code Protection bit
  8362                           ;	CP1 = 0x1, unprogrammed default
  8363                           ;	Code Protection bit
  8364                           ;	CP2 = 0x1, unprogrammed default
  8365                           ;	Code Protection bit
  8366                           ;	CP3 = 0x1, unprogrammed default
  8367  300008                     	org	3145736
  8368  300008  0F                 	db	15
  8369                           
  8370                           ;Config register CONFIG5H @ 0x300009
  8371                           ;	unspecified, using default values
  8372                           ;	Boot Block Code Protection bit
  8373                           ;	CPB = 0x1, unprogrammed default
  8374                           ;	Data EEPROM Code Protection bit
  8375                           ;	CPD = 0x1, unprogrammed default
  8376  300009                     	org	3145737
  8377  300009  C0                 	db	192
  8378                           
  8379                           ;Config register CONFIG6L @ 0x30000A
  8380                           ;	unspecified, using default values
  8381                           ;	Write Protection bit
  8382                           ;	WRT0 = 0x1, unprogrammed default
  8383                           ;	Write Protection bit
  8384                           ;	WRT1 = 0x1, unprogrammed default
  8385                           ;	Write Protection bit
  8386                           ;	WRT2 = 0x1, unprogrammed default
  8387                           ;	Write Protection bit
  8388                           ;	WRT3 = 0x1, unprogrammed default
  8389  30000A                     	org	3145738
  8390  30000A  0F                 	db	15
  8391                           
  8392                           ;Config register CONFIG6H @ 0x30000B
  8393                           ;	unspecified, using default values
  8394                           ;	Configuration Register Write Protection bit
  8395                           ;	WRTC = 0x1, unprogrammed default
  8396                           ;	Boot Block Write Protection bit
  8397                           ;	WRTB = 0x1, unprogrammed default
  8398                           ;	Data EEPROM Write Protection bit
  8399                           ;	WRTD = 0x1, unprogrammed default
  8400  30000B                     	org	3145739
  8401  30000B  E0                 	db	224
  8402                           
  8403                           ;Config register CONFIG7L @ 0x30000C
  8404                           ;	unspecified, using default values
  8405                           ;	Table Read Protection bit
  8406                           ;	EBTR0 = 0x1, unprogrammed default
  8407                           ;	Table Read Protection bit
  8408                           ;	EBTR1 = 0x1, unprogrammed default
  8409                           ;	Table Read Protection bit
  8410                           ;	EBTR2 = 0x1, unprogrammed default
  8411                           ;	Table Read Protection bit
  8412                           ;	EBTR3 = 0x1, unprogrammed default
  8413  30000C                     	org	3145740
  8414  30000C  0F                 	db	15
  8415                           
  8416                           ;Config register CONFIG7H @ 0x30000D
  8417                           ;	unspecified, using default values
  8418                           ;	Boot Block Table Read Protection bit
  8419                           ;	EBTRB = 0x1, unprogrammed default
  8420  30000D                     	org	3145741
  8421  30000D  40                 	db	64
  8422                           tosu	equ	0xFFF
  8423                           tosh	equ	0xFFE
  8424                           tosl	equ	0xFFD
  8425                           stkptr	equ	0xFFC
  8426                           pclatu	equ	0xFFB
  8427                           pclath	equ	0xFFA
  8428                           pcl	equ	0xFF9
  8429                           tblptru	equ	0xFF8
  8430                           tblptrh	equ	0xFF7
  8431                           tblptrl	equ	0xFF6
  8432                           tablat	equ	0xFF5
  8433                           prodh	equ	0xFF4
  8434                           prodl	equ	0xFF3
  8435                           indf0	equ	0xFEF
  8436                           postinc0	equ	0xFEE
  8437                           postdec0	equ	0xFED
  8438                           preinc0	equ	0xFEC
  8439                           plusw0	equ	0xFEB
  8440                           fsr0h	equ	0xFEA
  8441                           fsr0l	equ	0xFE9
  8442                           wreg	equ	0xFE8
  8443                           indf1	equ	0xFE7
  8444                           postinc1	equ	0xFE6
  8445                           postdec1	equ	0xFE5
  8446                           preinc1	equ	0xFE4
  8447                           plusw1	equ	0xFE3
  8448                           fsr1h	equ	0xFE2
  8449                           fsr1l	equ	0xFE1
  8450                           bsr	equ	0xFE0
  8451                           indf2	equ	0xFDF
  8452                           postinc2	equ	0xFDE
  8453                           postdec2	equ	0xFDD
  8454                           preinc2	equ	0xFDC
  8455                           plusw2	equ	0xFDB
  8456                           fsr2h	equ	0xFDA
  8457                           fsr2l	equ	0xFD9
  8458                           status	equ	0xFD8

Data Sizes:
    Strings     80
    Constant    509
    Data        72
    BSS         193
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     28     119
    BANK0           128      0     126
    BANK1           256      0      48
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ?_mixerGetSongName.duration	PTR unsigned char  size(2) Largest target is 99
		 -> sw_duration(CODE[88]), tetris_duration(CODE[99]), pacman_duration(CODE[31]), 

    ?_mixerGetSongName.notes	PTR unsigned char  size(2) Largest target is 99
		 -> sw_notes(CODE[88]), tetris_notes(CODE[99]), pacman_notes(CODE[31]), 

    ?_mixerGetSongName.size	PTR unsigned char  size(2) Largest target is 1
		 -> sw_song_size(CODE[1]), tetris_song_size(CODE[1]), pacman_song_size(CODE[1]), 

    playlist.duration	PTR unsigned char  size(2) Largest target is 99
		 -> sw_duration(CODE[88]), tetris_duration(CODE[99]), pacman_duration(CODE[31]), 

    playlist.notes	PTR unsigned char  size(2) Largest target is 99
		 -> sw_notes(CODE[88]), tetris_notes(CODE[99]), pacman_notes(CODE[31]), 

    playlist.size	PTR unsigned char  size(2) Largest target is 1
		 -> sw_song_size(CODE[1]), tetris_song_size(CODE[1]), pacman_song_size(CODE[1]), 

    song.duration	PTR unsigned char  size(2) Largest target is 99
		 -> sw_duration(CODE[88]), tetris_duration(CODE[99]), pacman_duration(CODE[31]), 

    song.notes	PTR unsigned char  size(2) Largest target is 99
		 -> sw_notes(CODE[88]), tetris_notes(CODE[99]), pacman_notes(CODE[31]), 

    song.size	PTR unsigned char  size(2) Largest target is 1
		 -> sw_song_size(CODE[1]), tetris_song_size(CODE[1]), pacman_song_size(CODE[1]), 

    sw_song.duration	PTR unsigned char  size(2) Largest target is 99
		 -> sw_duration(CODE[88]), tetris_duration(CODE[99]), pacman_duration(CODE[31]), 

    sw_song.notes	PTR unsigned char  size(2) Largest target is 99
		 -> sw_notes(CODE[88]), tetris_notes(CODE[99]), pacman_notes(CODE[31]), 

    sw_song.size	PTR unsigned char  size(2) Largest target is 1
		 -> sw_song_size(CODE[1]), tetris_song_size(CODE[1]), pacman_song_size(CODE[1]), 

    tetris_song.duration	PTR unsigned char  size(2) Largest target is 99
		 -> sw_duration(CODE[88]), tetris_duration(CODE[99]), pacman_duration(CODE[31]), 

    tetris_song.notes	PTR unsigned char  size(2) Largest target is 99
		 -> sw_notes(CODE[88]), tetris_notes(CODE[99]), pacman_notes(CODE[31]), 

    tetris_song.size	PTR unsigned char  size(2) Largest target is 1
		 -> sw_song_size(CODE[1]), tetris_song_size(CODE[1]), pacman_song_size(CODE[1]), 

    S366$duration	PTR unsigned char  size(2) Largest target is 99
		 -> sw_duration(CODE[88]), tetris_duration(CODE[99]), pacman_duration(CODE[31]), 

    pacman_song.duration	PTR unsigned char  size(2) Largest target is 99
		 -> sw_duration(CODE[88]), tetris_duration(CODE[99]), pacman_duration(CODE[31]), 

    S366$notes	PTR unsigned char  size(2) Largest target is 99
		 -> sw_notes(CODE[88]), tetris_notes(CODE[99]), pacman_notes(CODE[31]), 

    pacman_song.notes	PTR unsigned char  size(2) Largest target is 99
		 -> sw_notes(CODE[88]), tetris_notes(CODE[99]), pacman_notes(CODE[31]), 

    S366$size	PTR unsigned char  size(2) Largest target is 1
		 -> sw_song_size(CODE[1]), tetris_song_size(CODE[1]), pacman_song_size(CODE[1]), 

    pacman_song.size	PTR unsigned char  size(2) Largest target is 1
		 -> sw_song_size(CODE[1]), tetris_song_size(CODE[1]), pacman_song_size(CODE[1]), 

    sp__mixerGetSongName	PTR unsigned char  size(2) Largest target is 24
		 -> song.name(COMRAM[15]), song(COMRAM[21]), 

    lcdString@msg	PTR unsigned char  size(2) Largest target is 24
		 -> STR_9(CODE[9]), STR_8(CODE[12]), song.name(COMRAM[15]), song(COMRAM[21]), 
		 -> STR_7(CODE[8]), STR_6(CODE[7]), STR_5(CODE[7]), STR_4(CODE[6]), 
		 -> STR_3(CODE[6]), STR_2(CODE[15]), STR_1(CODE[10]), 


Critical Paths under _main in COMRAM

    _main->_menuUpdate
    _menuUpdate->_displayMenu
    _mixerNextSong->___awmod
    _displayMenu->_displayMenuOption
    _displayMenuOption->_lcdString
    _gameUpdate->_readInput
    _updateSnake->___awmod
    _readSerialController->_serialRead
    _readSerialController->_serialSend
    _kpReadKeyDown->_kpReadKey
    _mixerUpdate->_startNote
    _stopNote->_pwmFrequency
    _startNote->_pwmFrequency
    _pwmSet->___lwdiv
    _kpDebounce->_soWrite
    _gameOver->_lcdString
    _checkFood->_setPixel
    _rendererStart->_lcdString
    _lcdString->_lcdChar
    _displayScreen->_lcdPosition
    _lcdPosition->_lcdCommand
    _gameInit->_rendererInit
    _rendererInit->_cleanScreean
    _lcdInit->_lcdCommand
    _pushNibble->_soWrite
    _newGame->_cleanScreean
    _replaceFood->___lwmod
    _random->___wmul
    ___lwmod->_random
    _cleanScreean->_setPixel
    _setPixel->_lcdChar
    _setPixel->_lcdCommand
    _lcdCommand->_pushByte
    _lcdChar->_pushByte
    _pushByte->_soWrite
    _soWrite->_digitalWrite
    _PulseEnClock->_digitalWrite
    _PulseClockData->_digitalWrite
    _pulseEnablePin->_digitalWrite
    _pwmInit->_pwmFrequency
    _pwmFrequency->___aldiv
    _kpInit->_pinMode
    _soInit->_pinMode

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  557303
                        _displayMenu
                           _gameInit
                          _gameStart
                         _gameUpdate
                         _menuUpdate
                            _newGame
 ---------------------------------------------------------------------------------
 (1) _menuUpdate                                           3     3      0  109941
                                             25 COMRAM     3     3      0
                        _displayMenu
                         _kpDebounce
                          _kpReadKey
                      _kpReadKeyDown
                     _mixerGetOutput
                      _mixerNextSong
                     _mixerSetOutput
                            _newGame
 ---------------------------------------------------------------------------------
 (2) _mixerSetOutput                                       1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _mixerNextSong                                        0     0      0     600
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) _displayMenu                                          2     0      2   50168
                                             23 COMRAM     2     0      2
                  _displayMenuOption
                            _lcdChar
                         _lcdCommand
                        _lcdPosition
 ---------------------------------------------------------------------------------
 (3) _displayMenuOption                                    3     3      0   12847
                                             20 COMRAM     3     3      0
                          _lcdString
                     _mixerGetOutput
                   _mixerGetSongName
 ---------------------------------------------------------------------------------
 (4) _mixerGetSongName                                     2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _mixerGetOutput                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _gameUpdate                                           0     0      0  137897
                     _checkCollision
                          _checkFood
                           _gameOver
                         _kpDebounce
                            _lcdChar
                         _lcdCommand
                        _mixerUpdate
                          _readInput
                           _setPixel
                         _timerReset
                          _timerWait
                        _updateSnake
 ---------------------------------------------------------------------------------
 (2) _updateSnake                                          3     3      0     690
                                              6 COMRAM     3     3      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     600
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _readInput                                           11    11      0    1224
                                             16 COMRAM    11    11      0
                      _kpReadKeyDown
                          _mixerStop
               _readSerialController
 ---------------------------------------------------------------------------------
 (3) _readSerialController                                 1     1      0     113
                                              1 COMRAM     1     1      0
                         _serialRead
                         _serialSend
 ---------------------------------------------------------------------------------
 (4) _serialRead                                           1     1      0      24
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _mixerStop                                            0     0      0     724
                           _stopNote
 ---------------------------------------------------------------------------------
 (2) _kpReadKeyDown                                        1     1      0     157
                                              5 COMRAM     1     1      0
                          _kpReadKey
 ---------------------------------------------------------------------------------
 (3) _kpReadKey                                            5     5      0      90
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _mixerUpdate                                          3     3      0    2512
                                             17 COMRAM     3     3      0
                          _startNote
                           _stopNote
 ---------------------------------------------------------------------------------
 (4) _stopNote                                             0     0      0     724
                       _pwmFrequency
                         _serialSend
 ---------------------------------------------------------------------------------
 (3) _startNote                                            1     1      0    1788
                                             16 COMRAM     1     1      0
                       _pwmFrequency
                             _pwmSet
                         _serialSend
 ---------------------------------------------------------------------------------
 (4) _serialSend                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _pwmSet                                               5     5      0    1020
                                              7 COMRAM     5     5      0
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     466
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _kpDebounce                                           5     5      0    7205
                                              9 COMRAM     5     5      0
                        _digitalRead
                            _soWrite
 ---------------------------------------------------------------------------------
 (3) _digitalRead                                          5     3      2     372
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _gameOver                                             4     4      0   50503
                                             20 COMRAM     4     4      0
                            _lcdChar
                         _lcdCommand
                        _lcdPosition
                          _lcdString
                         _timerReset
                          _timerWait
 ---------------------------------------------------------------------------------
 (2) _timerWait                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _timerReset                                           4     2      2     243
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _checkFood                                            0     0      0   26278
                           _addPoint
                        _replaceFood
                           _setPixel
 ---------------------------------------------------------------------------------
 (3) _addPoint                                             3     3      0      75
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _checkCollision                                       5     5      0      45
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (1) _gameStart                                            0     0      0   75522
                       _mixerRestart
                      _rendererStart
 ---------------------------------------------------------------------------------
 (2) _rendererStart                                        0     0      0   75522
                      _displayScreen
                            _lcdChar
                        _lcdPosition
                          _lcdString
 ---------------------------------------------------------------------------------
 (4) _lcdString                                            6     4      2   12825
                                             14 COMRAM     6     4      2
                            _lcdChar
                   _mixerGetSongName (ARG)
 ---------------------------------------------------------------------------------
 (3) _displayScreen                                        0     0      0   37321
                            _lcdChar
                         _lcdCommand
                        _lcdPosition
 ---------------------------------------------------------------------------------
 (3) _lcdPosition                                          4     0      4   13401
                                             14 COMRAM     4     0      4
                         _lcdCommand
 ---------------------------------------------------------------------------------
 (2) _mixerRestart                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _gameInit                                             0     0      0  132114
                             _kpInit
                          _mixerInit
                            _newGame
                       _rendererInit
                          _timerInit
 ---------------------------------------------------------------------------------
 (2) _timerInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _rendererInit                                         1     1      0   76743
                                             25 COMRAM     1     1      0
                       _cleanScreean
                            _lcdChar
                         _lcdCommand
                            _lcdInit
 ---------------------------------------------------------------------------------
 (3) _lcdInit                                              0     0      0   27364
                         _delayMicro
                          _delayMili
                         _lcdCommand
                            _pinMode
                         _pushNibble
                             _soInit
 ---------------------------------------------------------------------------------
 (4) _pushNibble                                           3     1      2   11681
                                              9 COMRAM     3     1      2
                       _digitalWrite
                     _pulseEnablePin
                            _soWrite
 ---------------------------------------------------------------------------------
 (1) _newGame                                              0     0      0   51661
                       _cleanScreean
                        _replaceFood
                        _resetPoints
                           _setPixel
 ---------------------------------------------------------------------------------
 (2) _resetPoints                                          2     2      0      45
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _replaceFood                                          0     0      0     926
                            ___lwmod
                             _random
 ---------------------------------------------------------------------------------
 (3) _random                                               4     2      2     463
                                              6 COMRAM     4     2      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     463
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     463
                                             10 COMRAM     5     1      4
                             _random (ARG)
 ---------------------------------------------------------------------------------
 (2) _cleanScreean                                         2     2      0   25413
                                             23 COMRAM     2     2      0
                           _setPixel
 ---------------------------------------------------------------------------------
 (2) _setPixel                                             9     7      2   25277
                                             14 COMRAM     9     7      2
                            _lcdChar
                         _lcdCommand
 ---------------------------------------------------------------------------------
 (3) _lcdCommand                                           1     1      0   11945
                                             13 COMRAM     1     1      0
                          _delayMili
                           _pushByte
 ---------------------------------------------------------------------------------
 (4) _delayMili                                            5     3      2     350
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (3) _lcdChar                                              1     1      0   11975
                                             13 COMRAM     1     1      0
                         _delayMicro
                           _pushByte
 ---------------------------------------------------------------------------------
 (4) _pushByte                                             4     2      2   11573
                                              9 COMRAM     4     2      2
                       _digitalWrite
                     _pulseEnablePin
                            _soWrite
 ---------------------------------------------------------------------------------
 (5) _soWrite                                              3     1      2    6721
                                              6 COMRAM     3     1      2
                     _PulseClockData
                       _PulseEnClock
                       _digitalWrite
 ---------------------------------------------------------------------------------
 (6) _PulseEnClock                                         0     0      0    2116
                       _digitalWrite
 ---------------------------------------------------------------------------------
 (6) _PulseClockData                                       0     0      0    2116
                       _digitalWrite
 ---------------------------------------------------------------------------------
 (5) _pulseEnablePin                                       0     0      0    2496
                         _delayMicro
                       _digitalWrite
 ---------------------------------------------------------------------------------
 (6) _digitalWrite                                         6     2      4    2116
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _delayMicro                                           4     2      2     380
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _mixerInit                                            0     0      0     702
                            _pwmInit
                         _serialInit
 ---------------------------------------------------------------------------------
 (3) _serialInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _pwmInit                                              0     0      0     702
                       _pwmFrequency
 ---------------------------------------------------------------------------------
 (5) _pwmFrequency                                         2     0      2     702
                                             14 COMRAM     2     0      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (6) ___aldiv                                             14     6      8     452
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (2) _kpInit                                               0     0      0    3008
                            _pinMode
                             _soInit
 ---------------------------------------------------------------------------------
 (4) _soInit                                               0     0      0    1504
                            _pinMode
 ---------------------------------------------------------------------------------
 (5) _pinMode                                              6     2      4    1504
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _displayMenu
     _displayMenuOption
       _lcdString
         _lcdChar
           _delayMicro
           _pushByte
             _digitalWrite
             _pulseEnablePin
               _delayMicro
               _digitalWrite
             _soWrite
               _PulseClockData
                 _digitalWrite
               _PulseEnClock
                 _digitalWrite
               _digitalWrite
         _mixerGetSongName (ARG)
       _mixerGetOutput
       _mixerGetSongName
     _lcdChar
       _delayMicro
       _pushByte
         _digitalWrite
         _pulseEnablePin
           _delayMicro
           _digitalWrite
         _soWrite
           _PulseClockData
             _digitalWrite
           _PulseEnClock
             _digitalWrite
           _digitalWrite
     _lcdCommand
       _delayMili
       _pushByte
         _digitalWrite
         _pulseEnablePin
           _delayMicro
           _digitalWrite
         _soWrite
           _PulseClockData
             _digitalWrite
           _PulseEnClock
             _digitalWrite
           _digitalWrite
     _lcdPosition
       _lcdCommand
         _delayMili
         _pushByte
           _digitalWrite
           _pulseEnablePin
             _delayMicro
             _digitalWrite
           _soWrite
             _PulseClockData
               _digitalWrite
             _PulseEnClock
               _digitalWrite
             _digitalWrite
   _gameInit
     _kpInit
       _pinMode
       _soInit
         _pinMode
     _mixerInit
       _pwmInit
         _pwmFrequency
           ___aldiv
       _serialInit
     _newGame
       _cleanScreean
         _setPixel
           _lcdChar
             _delayMicro
             _pushByte
               _digitalWrite
               _pulseEnablePin
                 _delayMicro
                 _digitalWrite
               _soWrite
                 _PulseClockData
                   _digitalWrite
                 _PulseEnClock
                   _digitalWrite
                 _digitalWrite
           _lcdCommand
             _delayMili
             _pushByte
               _digitalWrite
               _pulseEnablePin
                 _delayMicro
                 _digitalWrite
               _soWrite
                 _PulseClockData
                   _digitalWrite
                 _PulseEnClock
                   _digitalWrite
                 _digitalWrite
       _replaceFood
         ___lwmod
           _random (ARG)
             ___wmul
         _random
           ___wmul
       _resetPoints
       _setPixel
         _lcdChar
           _delayMicro
           _pushByte
             _digitalWrite
             _pulseEnablePin
               _delayMicro
               _digitalWrite
             _soWrite
               _PulseClockData
                 _digitalWrite
               _PulseEnClock
                 _digitalWrite
               _digitalWrite
         _lcdCommand
           _delayMili
           _pushByte
             _digitalWrite
             _pulseEnablePin
               _delayMicro
               _digitalWrite
             _soWrite
               _PulseClockData
                 _digitalWrite
               _PulseEnClock
                 _digitalWrite
               _digitalWrite
     _rendererInit
       _cleanScreean
         _setPixel
           _lcdChar
             _delayMicro
             _pushByte
               _digitalWrite
               _pulseEnablePin
                 _delayMicro
                 _digitalWrite
               _soWrite
                 _PulseClockData
                   _digitalWrite
                 _PulseEnClock
                   _digitalWrite
                 _digitalWrite
           _lcdCommand
             _delayMili
             _pushByte
               _digitalWrite
               _pulseEnablePin
                 _delayMicro
                 _digitalWrite
               _soWrite
                 _PulseClockData
                   _digitalWrite
                 _PulseEnClock
                   _digitalWrite
                 _digitalWrite
       _lcdChar
         _delayMicro
         _pushByte
           _digitalWrite
           _pulseEnablePin
             _delayMicro
             _digitalWrite
           _soWrite
             _PulseClockData
               _digitalWrite
             _PulseEnClock
               _digitalWrite
             _digitalWrite
       _lcdCommand
         _delayMili
         _pushByte
           _digitalWrite
           _pulseEnablePin
             _delayMicro
             _digitalWrite
           _soWrite
             _PulseClockData
               _digitalWrite
             _PulseEnClock
               _digitalWrite
             _digitalWrite
       _lcdInit
         _delayMicro
         _delayMili
         _lcdCommand
           _delayMili
           _pushByte
             _digitalWrite
             _pulseEnablePin
               _delayMicro
               _digitalWrite
             _soWrite
               _PulseClockData
                 _digitalWrite
               _PulseEnClock
                 _digitalWrite
               _digitalWrite
         _pinMode
         _pushNibble
           _digitalWrite
           _pulseEnablePin
             _delayMicro
             _digitalWrite
           _soWrite
             _PulseClockData
               _digitalWrite
             _PulseEnClock
               _digitalWrite
             _digitalWrite
         _soInit
           _pinMode
     _timerInit
   _gameStart
     _mixerRestart
     _rendererStart
       _displayScreen
         _lcdChar
           _delayMicro
           _pushByte
             _digitalWrite
             _pulseEnablePin
               _delayMicro
               _digitalWrite
             _soWrite
               _PulseClockData
                 _digitalWrite
               _PulseEnClock
                 _digitalWrite
               _digitalWrite
         _lcdCommand
           _delayMili
           _pushByte
             _digitalWrite
             _pulseEnablePin
               _delayMicro
               _digitalWrite
             _soWrite
               _PulseClockData
                 _digitalWrite
               _PulseEnClock
                 _digitalWrite
               _digitalWrite
         _lcdPosition
           _lcdCommand
             _delayMili
             _pushByte
               _digitalWrite
               _pulseEnablePin
                 _delayMicro
                 _digitalWrite
               _soWrite
                 _PulseClockData
                   _digitalWrite
                 _PulseEnClock
                   _digitalWrite
                 _digitalWrite
       _lcdChar
         _delayMicro
         _pushByte
           _digitalWrite
           _pulseEnablePin
             _delayMicro
             _digitalWrite
           _soWrite
             _PulseClockData
               _digitalWrite
             _PulseEnClock
               _digitalWrite
             _digitalWrite
       _lcdPosition
         _lcdCommand
           _delayMili
           _pushByte
             _digitalWrite
             _pulseEnablePin
               _delayMicro
               _digitalWrite
             _soWrite
               _PulseClockData
                 _digitalWrite
               _PulseEnClock
                 _digitalWrite
               _digitalWrite
       _lcdString
         _lcdChar
           _delayMicro
           _pushByte
             _digitalWrite
             _pulseEnablePin
               _delayMicro
               _digitalWrite
             _soWrite
               _PulseClockData
                 _digitalWrite
               _PulseEnClock
                 _digitalWrite
               _digitalWrite
         _mixerGetSongName (ARG)
   _gameUpdate
     _checkCollision
     _checkFood
       _addPoint
       _replaceFood
         ___lwmod
           _random (ARG)
             ___wmul
         _random
           ___wmul
       _setPixel
         _lcdChar
           _delayMicro
           _pushByte
             _digitalWrite
             _pulseEnablePin
               _delayMicro
               _digitalWrite
             _soWrite
               _PulseClockData
                 _digitalWrite
               _PulseEnClock
                 _digitalWrite
               _digitalWrite
         _lcdCommand
           _delayMili
           _pushByte
             _digitalWrite
             _pulseEnablePin
               _delayMicro
               _digitalWrite
             _soWrite
               _PulseClockData
                 _digitalWrite
               _PulseEnClock
                 _digitalWrite
               _digitalWrite
     _gameOver
       _lcdChar
         _delayMicro
         _pushByte
           _digitalWrite
           _pulseEnablePin
             _delayMicro
             _digitalWrite
           _soWrite
             _PulseClockData
               _digitalWrite
             _PulseEnClock
               _digitalWrite
             _digitalWrite
       _lcdCommand
         _delayMili
         _pushByte
           _digitalWrite
           _pulseEnablePin
             _delayMicro
             _digitalWrite
           _soWrite
             _PulseClockData
               _digitalWrite
             _PulseEnClock
               _digitalWrite
             _digitalWrite
       _lcdPosition
         _lcdCommand
           _delayMili
           _pushByte
             _digitalWrite
             _pulseEnablePin
               _delayMicro
               _digitalWrite
             _soWrite
               _PulseClockData
                 _digitalWrite
               _PulseEnClock
                 _digitalWrite
               _digitalWrite
       _lcdString
         _lcdChar
           _delayMicro
           _pushByte
             _digitalWrite
             _pulseEnablePin
               _delayMicro
               _digitalWrite
             _soWrite
               _PulseClockData
                 _digitalWrite
               _PulseEnClock
                 _digitalWrite
               _digitalWrite
         _mixerGetSongName (ARG)
       _timerReset
       _timerWait
     _kpDebounce
       _digitalRead
       _soWrite
         _PulseClockData
           _digitalWrite
         _PulseEnClock
           _digitalWrite
         _digitalWrite
     _lcdChar
       _delayMicro
       _pushByte
         _digitalWrite
         _pulseEnablePin
           _delayMicro
           _digitalWrite
         _soWrite
           _PulseClockData
             _digitalWrite
           _PulseEnClock
             _digitalWrite
           _digitalWrite
     _lcdCommand
       _delayMili
       _pushByte
         _digitalWrite
         _pulseEnablePin
           _delayMicro
           _digitalWrite
         _soWrite
           _PulseClockData
             _digitalWrite
           _PulseEnClock
             _digitalWrite
           _digitalWrite
     _mixerUpdate
       _startNote
         _pwmFrequency
           ___aldiv
         _pwmSet
           ___lwdiv
           ___wmul
         _serialSend
       _stopNote
         _pwmFrequency
           ___aldiv
         _serialSend
     _readInput
       _kpReadKeyDown
         _kpReadKey
       _mixerStop
         _stopNote
           _pwmFrequency
             ___aldiv
           _serialSend
       _readSerialController
         _serialRead
         _serialSend
     _setPixel
       _lcdChar
         _delayMicro
         _pushByte
           _digitalWrite
           _pulseEnablePin
             _delayMicro
             _digitalWrite
           _soWrite
             _PulseClockData
               _digitalWrite
             _PulseEnClock
               _digitalWrite
             _digitalWrite
       _lcdCommand
         _delayMili
         _pushByte
           _digitalWrite
           _pulseEnablePin
             _delayMicro
             _digitalWrite
           _soWrite
             _PulseClockData
               _digitalWrite
             _PulseEnClock
               _digitalWrite
             _digitalWrite
     _timerReset
     _timerWait
     _updateSnake
       ___awmod
   _menuUpdate
     _displayMenu
       _displayMenuOption
         _lcdString
           _lcdChar
             _delayMicro
             _pushByte
               _digitalWrite
               _pulseEnablePin
                 _delayMicro
                 _digitalWrite
               _soWrite
                 _PulseClockData
                   _digitalWrite
                 _PulseEnClock
                   _digitalWrite
                 _digitalWrite
           _mixerGetSongName (ARG)
         _mixerGetOutput
         _mixerGetSongName
       _lcdChar
         _delayMicro
         _pushByte
           _digitalWrite
           _pulseEnablePin
             _delayMicro
             _digitalWrite
           _soWrite
             _PulseClockData
               _digitalWrite
             _PulseEnClock
               _digitalWrite
             _digitalWrite
       _lcdCommand
         _delayMili
         _pushByte
           _digitalWrite
           _pulseEnablePin
             _delayMicro
             _digitalWrite
           _soWrite
             _PulseClockData
               _digitalWrite
             _PulseEnClock
               _digitalWrite
             _digitalWrite
       _lcdPosition
         _lcdCommand
           _delayMili
           _pushByte
             _digitalWrite
             _pulseEnablePin
               _delayMicro
               _digitalWrite
             _soWrite
               _PulseClockData
                 _digitalWrite
               _PulseEnClock
                 _digitalWrite
               _digitalWrite
     _kpDebounce
       _digitalRead
       _soWrite
         _PulseClockData
           _digitalWrite
         _PulseEnClock
           _digitalWrite
         _digitalWrite
     _kpReadKey
     _kpReadKeyDown
       _kpReadKey
     _mixerGetOutput
     _mixerNextSong
       ___awmod
     _mixerSetOutput
     _newGame
       _cleanScreean
         _setPixel
           _lcdChar
             _delayMicro
             _pushByte
               _digitalWrite
               _pulseEnablePin
                 _delayMicro
                 _digitalWrite
               _soWrite
                 _PulseClockData
                   _digitalWrite
                 _PulseEnClock
                   _digitalWrite
                 _digitalWrite
           _lcdCommand
             _delayMili
             _pushByte
               _digitalWrite
               _pulseEnablePin
                 _delayMicro
                 _digitalWrite
               _soWrite
                 _PulseClockData
                   _digitalWrite
                 _PulseEnClock
                   _digitalWrite
                 _digitalWrite
       _replaceFood
         ___lwmod
           _random (ARG)
             ___wmul
         _random
           ___wmul
       _resetPoints
       _setPixel
         _lcdChar
           _delayMicro
           _pushByte
             _digitalWrite
             _pulseEnablePin
               _delayMicro
               _digitalWrite
             _soWrite
               _PulseClockData
                 _digitalWrite
               _PulseEnClock
                 _digitalWrite
               _digitalWrite
         _lcdCommand
           _delayMili
           _pushByte
             _digitalWrite
             _pulseEnablePin
               _delayMicro
               _digitalWrite
             _soWrite
               _PulseClockData
                 _digitalWrite
               _PulseEnClock
                 _digitalWrite
               _digitalWrite
   _newGame
     _cleanScreean
       _setPixel
         _lcdChar
           _delayMicro
           _pushByte
             _digitalWrite
             _pulseEnablePin
               _delayMicro
               _digitalWrite
             _soWrite
               _PulseClockData
                 _digitalWrite
               _PulseEnClock
                 _digitalWrite
               _digitalWrite
         _lcdCommand
           _delayMili
           _pushByte
             _digitalWrite
             _pulseEnablePin
               _delayMicro
               _digitalWrite
             _soWrite
               _PulseClockData
                 _digitalWrite
               _PulseEnClock
                 _digitalWrite
               _digitalWrite
     _replaceFood
       ___lwmod
         _random (ARG)
           ___wmul
       _random
         ___wmul
     _resetPoints
     _setPixel
       _lcdChar
         _delayMicro
         _pushByte
           _digitalWrite
           _pulseEnablePin
             _delayMicro
             _digitalWrite
           _soWrite
             _PulseClockData
               _digitalWrite
             _PulseEnClock
               _digitalWrite
             _digitalWrite
       _lcdCommand
         _delayMili
         _pushByte
           _digitalWrite
           _pulseEnablePin
             _delayMicro
             _digitalWrite
           _soWrite
             _PulseClockData
               _digitalWrite
             _PulseEnClock
               _digitalWrite
             _digitalWrite

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      30       7       18.8%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      7E       5       98.4%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     1C      77       1       93.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     125      15        0.0%
DATA                 0      0     125       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Fri Dec 17 15:40:18 2021

                 ?_displayMenu 006A                 _pulseEnablePin 64D0                   lcdString@msg 0061  
                           l42 7DAE                             l51 790E                             l46 7912  
                           l47 790E                             l76 7B60            ___wmul@multiplicand 0055  
               ?_kpReadKeyDown 0053                            l101 6AEC                            l121 7522  
                          l105 61DA                            l124 6364                            l141 6332  
                          l221 6F6E                            l150 6732                            l135 602A  
                          l119 750A                            l144 6510                            l224 6554  
                          l161 6102                            l153 6120                            l250 6C88  
                          l147 61B4                            l235 72E0                            l340 6254  
                          l316 609E                            l324 62D6                            l334 648E  
                          l158 63D8                            l327 60E4                            l167 6B6A  
                          l319 60B0                            l176 6DF2                            l280 66D8  
                          l600 7560                            l337 627E                            l345 6634  
                          l273 7162                            l442 67EA                            l362 6072  
                          l602 7566                            l371 603C                            l611 75C4  
                          l451 602E                            l292 62AA                            l620 765A  
                          l277 71F2                            l541 6684                            l445 6084  
                          l461 622A                            l613 75CA                            l550 68B4  
                          l606 7592                            l287 6414                            l295 678C  
                          l631 6BF0                            l359 6064                            l544 6202  
                          l368 6142                            l456 659A                            l464 6034  
                          l616 75F6                            l608 7598                            l480 6062  
                          l448 6044                            l625 6A00                            l474 7040  
                          l618 75FC                            l555 639E                            l563 609A  
                          l580 7112                            l573 7090                            l477 6450  
                          l566 65E6                            l671 6168                            l639 77A8  
                          l569 6058                            l593 6302                            l921 6D3E  
                          l674 60CA                            l587 6EAC                            l756 73EC  
                          l668 6920                            l677 618E                    _sw_duration 7EBD  
                          _PR2 000FCB                            u900 639E                            u901 639A  
                          u860 6072                            u861 606E                            u880 6876  
                          u881 6872                            u890 68B4                            u891 68B0  
     __end_of_tetris_song_size 7FAD                   ___awmod@sign 0058                            prod 000FF3  
                          wreg 000FE8                 ?_displayScreen 0053                           l2006 6074  
                         l3000 6284                           l3010 6292                           l3002 6288  
                         l3020 678E                           l3012 6298                           l3004 628E  
                         l3100 6E3A                           l3022 6796                           l3014 629A  
                         l3110 6E58                           l3030 6F70                           l1175 6A74  
                         l3024 67A8                           l3016 6734                           l3120 6E88  
                         l3112 6E74                           l1168 6A6C                           l3040 6FA2  
                         l3032 6F80                           l3200 7218                           l1185 684E  
                         l3026 67BA                           l1178 6846                           l3018 6780  
                         l2170 6B6C                           l3122 6E8C                           l3106 6E42  
                         l3050 6FF8                           l3042 6FB2                           l3034 6F86  
                         l3130 753A                           l3202 721C                           l2500 7316  
                         l3028 67CC                           l2420 7BB0                           l2180 6BC6  
                         l2172 6B78                           l3124 6E90                           l3108 6E54  
                         l3052 7012                           l3044 6FB8                           l3036 6F96  
                         l3140 7588                           l3132 7544                           l3060 7046  
                         l3300 7706                           l3212 7234                           l3204 722A  
                         l2510 7358                           l2502 7326                           l2430 7C4A  
                         l2422 7BD2                           l2414 7B62                           l2174 6B9C  
                         l2182 6BCA                           l3118 6E7C                           l3054 7016  
                         l3046 6FD8                           l3038 6F9A                           l3150 75DA  
                         l3142 759C                           l3134 7556                           l3126 7524  
                         l3070 7098                           l3310 7734                           l3302 770A  
                         l3230 724C                           l3222 723E                           l3214 7238  
                         l3206 722C                           l2520 73AA                           l2512 7364  
                         l2504 732A                           l2440 7CDE                           l2432 7C66  
                         l2424 7BEE                           l2416 7B7E                           l2184 6BEE  
                         l2176 6BC0                           l2600 6A2C                           l3056 703E  
                         l3048 6FDC                           l3152 75EC                           l3144 75A8  
                         l3136 756A                           l3128 752A                           l3072 709E  
                         l3080 70B0                           l3064 705A                           l3320 778C  
                         l3312 7746                           l3232 7260                           l2530 73DC  
                         l2522 73AC                           l2514 7372                           l2506 733A  
                         l2450 7D70                           l2442 7CF8                           l2434 7C80  
                         l2426 7C08                           l2418 7B90                           l2610 6A60  
                         l2602 6A3A                           l3154 7600                           l3146 75BA  
                         l3138 7576                           l3074 70A4                           l3082 70EA  
                         l3066 708A                           l3058 7042                           l3322 779C  
                         l3314 7758                           l3306 7710                           l3410 72C2  
                         l3234 726A                           l3226 7246                           l2540 7962  
                         l2524 73B6                           l2516 737C                           l2508 7350  
                         l2452 7D90                           l2444 7D18                           l2436 7CA0  
                         l2428 7C28                           l2460 65FC                           l3332 6050  
                         l3180 69B4                           l2612 6A66                           l2604 6A40  
                         l2700 68FA                           l2620 6A7E                           l3156 760C  
                         l3148 75CE                           l3084 70F0                           l3076 70AA  
                         l3316 776A                           l3308 7722                           l3324 77A0  
                         l3412 6F48                           l3244 7274                           l2550 79FC  
                         l2542 7984                           l2534 7914                           l2518 739A  
                         l2526 73BC                           l2446 7D3A                           l2438 7CC2  
                         l2454 6256                           l2470 661E                           l2710 6636  
                         l3270 6096                           l3262 6086                           l3334 6054  
                         l3182 69B8                           l3190 69D2                           l3094 6DF4  
                         l2606 6A56                           l2702 6912                           l2630 6AEA  
                         l2622 6AB6                           l2614 6A76                           l3158 7610  
                         l3166 7616                           l3086 7106                           l3414 70C4  
                         l3326 77A2                           l3318 777A                           l3350 6C10  
                         l2560 7A90                           l2552 7A18                           l2544 79A0  
                         l2536 7930                           l2528 73CC                           l2448 7D56  
                         l2480 64F0                           l2456 622C                           l2472 6620  
                         l2720 67FE                           l2712 665C                           l2800 6DEC  
                         l3264 608A                           l2640 63B2                           l1840 685A  
                         l1832 6850                           l3184 69BC                           l3176 6990  
                         l3096 6E0E                           l2608 6A5E                           l2704 6204  
                         l3416 762A                           l3168 7658                           l3088 710C  
                         l3328 77A6                           l3280 768A                           l3272 765C  
                         l3408 7288                           l3248 72AE                           l3192 71F4  
                         l3360 6C48                           l3352 6C22                           l3344 6BF2  
                         l2570 7B1A                           l2562 7AA2                           l2554 7A2A  
                         l2546 79B2                           l2538 7942                           l2634 6452  
                         l2490 72E2                           l2474 6630                           l2466 6600  
                         l2458 65E8                           l2482 6304                           l2730 683A  
                         l2722 6806                           l2714 667C                           l3266 608E  
                         l2642 63BC                           l2650 6B2A                           l1842 6876  
                         l1834 6852                           l3186 69CC                           l3178 69A2  
                         l3098 6E1A                           l2706 6214                           l2626 6ACA  
                         l3290 76BE                           l3282 7692                           l3274 7668  
                         l1594 602C                           l2810 6EF4                           l2802 6EB0  
                         l3194 71F8                           l3362 6C5A                           l3354 6C2C  
                         l3346 6BF6                           l2572 7B3E                           l2564 7AC6  
                         l2556 7A4E                           l2548 79D6                           l2492 72E6  
                         l2476 64D0                           l2468 6618                           l2484 6310  
                         l2660 711E                           l2732 6840                           l2724 680E  
                         l2636 6192                           l3268 6092                           l2644 63CE  
                         l2652 6B2E                           l1844 6894                           l2580 609E  
                         l2708 621E                           l2628 6ACE                           l3292 76C6  
                         l3284 76A6                           l3276 766C                           l2812 6F00  
                         l2804 6EB4                           l2820 6F34                           l3196 720C  
                         l3364 6C66                           l3356 6C3C                           l3348 6C06  
                         l2566 7AEC                           l2558 7A74                           l2494 72F4  
                         l2478 64E4                           l2486 6314                           l2574 6106  
                         l2670 716A                           l2662 7122                           l2726 681C  
                         l2718 67EC                           l1854 636E                           l2638 63A0  
                         l2646 6AEE                           l1846 689A                           l2750 7836  
                         l2742 77EE                           l2734 77AA                           l2582 60AC  
                         l2902 6300                           l2910 6CA2                           l3294 76D8  
                         l3278 767C                           l2654 605A                           l2814 6F14  
                         l2806 6EC4                           l3198 7216                           l3366 6C6E  
                         l3358 6C40                           l2568 7B08                           l2496 7304  
                         l2584 6144                           l2488 66DC                           l2576 60E8  
                         l2672 717A                           l2664 7132                           l2840 63E2  
                         l2728 6832                           l1856 637E                           l1848 6366  
                         l2648 6AFA                           l2760 789A                           l2752 7852  
                         l2744 780A                           l2736 77C6                           l2592 6A02  
                         l2680 62AC                           l2920 6CD6                           l2912 6CAA  
                         l3296 76E0                           l3288 76AC                           l2816 6F24  
                         l2808 6ED4                           l3368 6C80                           l2498 7308  
                         l2850 60CC                           l2578 60F6                           l2674 71A8  
                         l2666 7144                           l2658 7116                           l2842 63F0  
                         l2834 63DE                           l2586 616A                           l1858 6382  
                         l2826 6686                           l2594 6A0A                           l2690 62D4  
                         l2682 62B0                           l2930 6D12                           l2922 6CDE  
                         l2914 6CAE                           l2906 6C90                           l3298 76F2  
                         l2852 60E0                           l2676 71D8                           l2668 7154  
                         l2844 63F2                           l2828 63DA                           l2588 6186  
                         l2860 6130                           l1796 6064                           l2596 6A1C  
                         l2772 61B6                           l2684 62BE                           l2932 6D18  
                         l2924 6CE6                           l2916 6CBC                           l2908 6C94  
                         l2870 60B4                           l2854 60E2                           l2678 71E0  
                         l2846 6402                           l2790 6DAC                           l2862 6138  
                         l2766 78C6                           l2758 787E                           l2950 746A  
                         l2942 73EE                           l2598 6A24                           l2694 68B8  
                         l2782 61D8                           l2774 61BC                           l2686 62C2  
                         l2926 6CF4                           l2934 6D1E                           l2918 6CC4  
                         l2872 60B8                           l2848 6404                           l2792 6DC6  
                         l1992 6036                           l2864 613C                           l2856 6122  
                         l2768 78E2                           l2952 7490                           l2960 74E0  
                         l2944 73FE                           l2696 68D6                           l2880 6568  
                         l2776 61CE                           l2688 62D0                           l2936 6D2E  
                         l2928 6D0A                           l1968 6040                           l2970 6334  
                         l2874 60BA                           l2794 6DD4                           l2786 6D40  
                         l1994 603A                           l2866 6140                           l2858 612C  
                         l2962 74F8                           l2954 74AE                           l2698 68F2  
                         l2882 6574                           l2778 61D2                           l2890 62D8  
                         l2938 6D36                           l2972 6360                           l2876 60BE  
                         l2868 60B2                           l2980 659C                           l2796 6DE0  
                         l2788 6DA0                           l2964 74FE                           l2956 74D8  
                         l2948 741E                           l2884 6594                           l2892 62DE  
                         l2990 65CA                           l2982 65B0                           l2798 6DE6  
                         l2966 7502                           l2878 6558                           l2886 6030  
                         l2894 62E4                           l2974 6512                           l2888 61DC  
                         l2992 65D8                           l2984 65B4                           l2968 751A  
                         l2896 62F6                           l2976 6532                           l2986 65B8  
                         l2898 62FA                           l2978 6538                           l2994 6416  
                         l2988 65BC                           l2996 6432                           l2998 6280  
                         STR_1 7FC9                           STR_2 7FAE                           STR_3 7FF8  
                         STR_4 7FF2                           STR_5 7FE4                           STR_6 7FEB  
                         STR_7 7FDC                           STR_8 7FBD                           STR_9 7FD3  
                         u2000 6A3A                           u2001 6A36                           u2010 6A56  
                         u2011 6A52                           u2100 7132                           u2101 712E  
                         u2110 7154                           u2030 6AB6                           u2111 7150  
                         u2031 6AB2                           u2120 717A                           u2200 6832  
                         u2040 6AEA                           u2024 6A96                           u2121 7176  
                         u2201 682E                           u2041 6AE6                           u2025 6A90  
                         u2050 63B2                           u2210 77C6                           u2051 63AE  
                         u2211 77C2                           u1500 7B7E                           u2060 63CE  
                         u1501 7B7A                           u2061 63CA                           u1510 7B90  
                         u2134 718E                           u2070 6B26                           u1270 6B9C  
                         u2230 780A                           u2310 61CE                           u2150 62BE  
                         u1511 7B8C                           u2135 718A                           u1271 6B98  
                         u2231 7806                           u2311 61CA                           u2151 62BA  
                         u2144 71BC                           u2080 6B5A                           u1280 6BC0  
                         u2304 78F8                           u2224 77D8                           u2160 62D0  
                         u2400 6CF4                           u2320 6F14                           u2145 71B8  
                         u1281 6BBC                           u2305 78F4                           u2225 77D4  
                         u2161 62CC                           u2401 6CF0                           u2321 6F10  
                         u2330 6402                           u2090 6B6A                           u1290 6BEE  
                         u2250 7852                           u2170 6214                           u2410 6D0A  
                         u2331 63FE                           u2091 6B66                           u1291 6BEA  
                         u2251 784E                           u2171 6210                           u2411 6D06  
                         u1620 7CDE                           u1604 7C92                           u1540 7BEE  
                         u1524 7BA2                           u1700 6630                           u2340 6414  
                         u2180 67FE                           u2244 7820                           u2500 751A  
                         u2420 6D2E                           u1621 7CDA                           u1605 7C8E  
                         u1541 7BEA                           u1525 7B9E                           u1701 662C  
                         u2341 6410                           u2181 67FA                           u2077 6B1C  
                         u2245 781C                           u2501 7516                           u2421 6D2A  
                         u1630 7CF8                           u1614 7CB2                           u1550 7C08  
                         u1534 7BC2                           u1710 6332                           u2190 681C  
                         u2270 789A                           u2430 741A                           u2350 6568  
                         u1631 7CF4                           u1615 7CAE                           u1551 7C04  
                         u1535 7BBE                           u1711 632E                           u2191 6818  
                         u2087 6B50                           u2271 7896                           u2431 7416  
                         u2351 6564                           u2511 6448                           u1720 72F4  
                         u2520 62AA                           u2264 7868                           u2600 6FD8  
                         u2360 62F6                           u1721 72F0                           u2521 62A6  
                         u2265 7864                           u2601 6FD4                           u2361 62F2  
                         u1730 7316                           u2290 78E2                           u2450 746A  
                         u2370 6CA2                           u2610 7056                           u1731 7312  
                         u2531 67A0                           u2291 78DE                           u2451 7466  
                         u2371 6C9E                           u2611 7052                           u1900 7A90  
                         u1820 79A0                           u1804 7954                           u1740 7350  
                         u1660 7D56                           u1644 7D0A                           u1580 7C66  
                         u1564 7C1A                           u2700 69B4                           u2620 6E74  
                         u2284 78B0                           u2444 743A                           u2380 6CBC  
                         u1901 7A8C                           u1821 799C                           u1805 7950  
                         u1741 734C                           u2541 67B2                           u1661 7D52  
                         u1645 7D06                           u1581 7C62                           u1565 7C16  
                         u2701 69B0                           u2621 6E70                           u2285 78AC  
                         u2445 7434                           u2381 6CB8                           u1910 7AA2  
                         u1830 79B2                           u1814 7974                           u1750 7372  
                         u1670 7D70                           u1654 7D2A                           u1590 7C80  
                         u1574 7C3A                           u2710 69CC                           u2630 6EAC  
                         u2470 74AE                           u2390 6CD6                           u1911 7A9E  
                         u1831 79AE                           u1815 7970                           u1751 736E  
                         u2551 67C4                           u1671 7D6C                           u1655 7D26  
                         u1591 7C7C                           u1575 7C36                           u2711 69C8  
                         u2631 6EA8                           u2471 74AA                           u2391 6CD2  
                         u1760 739A                           u2464 7482                           u2640 753A  
                         u2800 7706                           u2720 720C                           u1761 7396  
                         u2561 67E2                           u2465 747C                           u2641 7536  
                         u2801 7702                           u2721 7208                           u1770 73CC  
                         u2490 74F8                           u2570 6F80                           u2650 7556  
                         u2810 7722                           u2730 7260                           u1771 73C8  
                         u2491 74F4                           u2571 6F7C                           u2651 7552  
                         u2811 771E                           u2731 725C                           u1940 7B08  
                         u1924 7AB8                           u1860 7A18                           u1844 79C8  
                         u1780 7930                           u1684 7D82                           u2484 74CA  
                         u2580 6F96                           u2660 7588                           u2820 7746  
                         u2740 767C                           u2900 6C80                           u1941 7B04  
                         u1925 7AB4                           u1861 7A14                           u1845 79C4  
                         u1781 792C                           u1685 7D7E                           u2485 74C4  
                         u2581 6F92                           u2661 7584                           u2821 7742  
                         u2741 7678                           u2901 6C7C                           u1950 7B1A  
                         u1934 7ADC                           u1870 7A2A                           u1854 79EC  
                         u1790 7942                           u1694 7DA2                           u2590 6FB2  
                         u2670 75BA                           u2830 776A                           u2750 768A  
                         u1951 7B16                           u1935 7AD8                           u1871 7A26  
                         u1855 79E8                           u1791 793E                           u1695 7D9E  
                         u2591 6FAE                           u2671 75B6                           u2831 7766  
                         u2751 7686                           u2680 75EC                           u2840 778C  
                         u2760 76A6                           u2681 75E8                           u2841 7788  
                         u2761 76A2                           u2690 69A2                           u2770 76BE  
                         u2691 699E                           u2771 76BA                           u1964 7B30  
                         u1884 7A40                           u1980 60AC                           u2780 76D8  
                         u2860 6C06                           u1965 7B2C                           u1885 7A3C  
                         u1981 60A8                           u2781 76D4                           u2861 6C02  
                         u1974 7B54                           u1894 7A64                           u1990 6A1C  
                         u2790 76F2                           u2870 6C22                           u1975 7B50  
                         u1895 7A60                           u1991 6A18                           u2791 76EE  
                         u2871 6C1E                           u2880 6C3C                           u2881 6C38  
                         u2890 6C5A                           u2891 6C56                           _PIR1 000F9E  
              ?_checkCollision 0053                           _main 6BF2                           _food 002B  
                         _keys 0031               ??_PulseClockData 0059                           _song 003E  
                         fsr0h 000FEA                           indf0 000FEF                           fsr2h 000FDA  
                         fsr0l 000FE9                           indf2 000FDF                           fsr1l 000FE1  
                         fsr2l 000FD9                           prodh 000FF4                           prodl 000FF3  
                         start 0000                pushNibble@value 005E                   ___param_bank 000000  
       __end_of_pulseEnablePin 6512                 pwmSet@porcento 005C           __end_of_cleanScreean 6416  
               _mixerGetOutput 602C   readSerialController@last_key 0033                __end_of___aldiv 73EE  
                        ?_main 0053                __end_of___awmod 6D40                          _T0CON 000FD5  
                        _T2CON 000FCA          __end_of_mixerNextSong 6452                __end_of___lwdiv 6A76  
              __end_of___lwmod 6850                   _sw_song_size 7FAB                          _RCREG 000FAE  
                        _RCSTA 000FAB                          _TMR0H 000FD7                          _TMR0L 000FD6  
                        _SPBRG 000FAF                          _PORTA 000F80                          _PORTB 000F81  
                        _PORTC 000F82                          _PORTD 000F83                          _PORTE 000F84  
              __end_of_charKey 7DF7                          _TRISA 000F92                          _TRISB 000F93  
                        _TRISC 000F94                          _TRISD 000F95                          _TRISE 000F96  
                        _TXREG 000FAD                          _TXSTA 000FAC                __end_of_lcdChar 6104  
              __end_of_lcdInit 6DF4      __size_of_mixerGetSongName 000A                __end_of_newGame 65E8  
                        _count 0034                __end_of_pinMode 7B62                          _snake 0001  
              __end_of_soWrite 6636                          tablat 000FF5                __end_of_pwmInit 60CC  
                        plusw1 000FE3                          plusw2 000FDB                          status 000FD8  
        __end_of_rendererStart 678E                 _mixerSetOutput 603E                   updateSnake@i 005B  
                 pushNibble@rs 005C           __end_of_digitalWrite 7DB0                __initialization 6922  
       __end_of_mixerGetOutput 6030                ?_pulseEnablePin 0053                   __end_of_main 6C90  
              ??_kpReadKeyDown 0058                         ??_main 006F                  __activetblptr 000002  
         __size_of_digitalRead 016A                   ?_mixerUpdate 0053                ??_displayScreen 0065  
                       _ADCON1 000FC1                         _CCPR2L 000FBB                   ?_replaceFood 0053  
             __end_of_addPoint 68B6                         _INTCON 000FF2                         _SPBRGH 000FB0  
         __size_of_lcdPosition 003A         __end_of_mixerSetOutput 6046                   ?_resetPoints 0053  
             __end_of_gameInit 609C               __end_of_gameOver 6EAE                ?_mixerGetOutput 0053  
                    ??___aldiv 005B                         ___wmul 616A                      ??___awmod 0057  
                    ??___lwdiv 0057                      ??___lwmod 0061                         _kpInit 6334  
                       clear_0 6968                         clear_1 6974                         clear_2 6980  
                       _soInit 6452                         _random 6636                ___awmod@divisor 0055  
                       _screen 0100                      ??_lcdChar 0060                         _moving 0075  
                       _points 006F                      ??_lcdInit 0061                         _pwmSet 68B6  
              ___awmod@counter 0057           __size_of_displayMenu 0044                         _status 0077  
             __end_of_setPixel 71F4                      ??_newGame 006C                   __pdataCOMRAM 006F  
                    ??_pinMode 0057                   __mediumconst 7DB0        readSerialController@key 0054  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
                    ??_soWrite 005B                      ??_pwmInit 0063               __end_of_pushByte 6734  
             __end_of_sw_notes 7F6D               __end_of_stopNote 622C   __end_of_readSerialController 6304  
                   __accesstop 0080        __end_of__initialization 6986                ?_mixerSetOutput 0053  
                _readInput$570 0067                  _readInput$571 0069                  _readInput$572 006B  
                _readInput$569 0065          __size_of_cleanScreean 003C                  ___rparam_used 000001  
                pushByte@value 005F                   ?_updateSnake 0053                    pinMode@type 0055  
               __pcstackCOMRAM 0053                   __pidataBANK0 6491             __size_of_checkFood 0072  
           __size_of_delayMili 0030             __size_of_gameStart 000A             __size_of_lcdString 007E  
             _mixerGetSongName 605A             __size_of_kpReadKey 0078               ??_checkCollision 0053  
                 _cleanScreean 63DA                     __pbssBANK0 0080                     __pbssBANK1 0100  
                ?_mixerRestart 0053          __size_of_digitalWrite 024E             __size_of_readInput 0138  
                   _delayMicro 602A                  ?_rendererInit 0053                     _gameUpdate 765C  
         displayMenuOption@opt 0069                     _lcdCommand 6104                        ?___wmul 0053  
           __size_of_mixerInit 005E             __size_of_mixerStop 0006                        ?_kpInit 0053  
                      _CCP2CON 000FBA                        _BAUDCON 000FB8                        ?_soInit 0053  
                      ?_random 0059                     _kpDebounce 73EE                      ?_addPoint 0053  
                      ?_pwmSet 0053             __size_of_timerInit 0008             __size_of_timerWait 0010  
         __end_of_pacman_notes 7FAB                      ?_gameInit 0053                      ?_gameOver 0053  
            mixerSetOutput@out 0053           __size_of_mixerUpdate 00D2                   _digitalWrite 7B62  
           __size_of_startNote 0046              __end_of_checkFood 6A02                    setPixel@val 0062  
               ??_mixerRestart 0053              __end_of_delayMili 6334           __size_of_replaceFood 0028  
            __end_of_gameStart 605A               ??_pulseEnablePin 0059                 ??_rendererInit 006C  
                      __Hparam 0000                      ?_setPixel 0061                        __Lparam 0000  
         __size_of_resetPoints 003A              __end_of_lcdString 6B6C                   readInput@key 006D  
              kpDebounce@tempo 003C                        ___aldiv 72E2              __end_of_kpReadKey 6AEE  
                      ___awmod 6C90                      ?_pushByte 005C                __size_of___wmul 0026  
                      ___lwdiv 6A02                        ___lwmod 67EC                  startNote@note 0063  
              __size_of_kpInit 0032                        _charKey 7DED                      ?_stopNote 0053  
                      __pcinit 6922                     ??_addPoint 0053                     _menuUpdate 71F4  
               serialRead@resp 0053                        _lcdChar 60E6                        __ramtop 0600  
              __size_of_soInit 003E           _readSerialController 62D8                __size_of_random 0050  
                      _lcdInit 6D40                        __ptext0 6BF2                        __ptext1 71F4  
                      __ptext2 603E                        __ptext3 6416                        __ptext4 6512  
                      __ptext5 6EAE                        __ptext6 605A                        __ptext7 602C  
                      __ptext8 765C                        __ptext9 7042                __size_of_pwmSet 006C  
            __end_of_readInput 765C                        _newGame 659C                        _pinMode 7914  
             ___awmod@dividend 0053                    serialSend@c 0053               ___aldiv@dividend 0053  
                   ??_gameInit 006D                     ??_gameOver 0067                     delayMili@a 0053  
                   delayMili@i 0056                        _soWrite 65E8                        _pwmInit 60B2  
                      _sw_song 00BF               kpReadKeyDown@key 0058              __end_of_mixerInit 67EC  
                   _pause_time 0038           end_of_initialization 6986              __end_of_mixerStop 6036  
                ?_PulseEnClock 0053                  __Lmediumconst 7DB0                 digitalRead@pin 0053  
                ?_pwmFrequency 0061               ??_mixerGetOutput 0053                    ?_delayMicro 0053  
                rendererInit@i 006C              __end_of_timerInit 603E         __size_of_mixerNextSong 003C  
            __end_of_timerWait 6074                    ?_gameUpdate 0053                     ??_setPixel 0063  
                   _serialInit 60CC                     _serialRead 62AC                     _serialSend 609C  
             ___aldiv@quotient 005D                        postdec1 000FE5                        postdec2 000FDD  
                  ?_lcdCommand 0053                        postinc0 000FEE                        postinc1 000FE6  
                      postinc2 000FDE                     _snake_size 0076           __size_of_updateSnake 00D2  
                   ??_pushByte 005E                     _notes_freq 7DB1              __end_of_startNote 659C  
      __size_of_PulseClockData 002A                  ??_digitalRead 0055                     ??_stopNote 0063  
        ?_readSerialController 0053                     _timerReset 6122                    ?_kpDebounce 0053  
        __end_of_kpReadKeyDown 61DC                  cleanScreean@x 006A                  cleanScreean@y 006B  
       __size_of_rendererStart 005A                     _pushNibble 6190                  gameOver@i_559 0067  
                   lcdString@i 0065          __end_of_displayScreen 66DA               ??_mixerSetOutput 0053  
                ??_lcdPosition 0065                 ??_PulseEnClock 0059                 ??_pwmFrequency 0063  
                   kpReadKey@i 0056       __end_of_mixerGetSongName 6064                  ??_displayMenu 006C  
             _pacman_song_size 7FAD                 __end_of___wmul 6190              _displayMenuOption 6EAE  
                __pidataCOMRAM 6047           __end_of_mixerRestart 6086                    ?_menuUpdate 0053  
               __end_of_kpInit 6366                 __end_of_soInit 6490                 __end_of_random 6686  
           ?_displayMenuOption 0053                 __end_of_pwmSet 6922                  _mixerNextSong 6416  
         __end_of_rendererInit 62AC            __size_of_delayMicro 0002            start_initialization 6922  
          __end_of_digitalRead 7914            __size_of_gameUpdate 014E            ??_displayMenuOption 0067  
          __size_of_lcdCommand 001E            __size_of_kpDebounce 0136            __end_of_lcdPosition 63DA  
                 _pacman_notes 7F8C                    ?_serialInit 0053                    ?_serialRead 0053  
                  ?_serialSend 0053                  _rendererStart 6734              kpDebounce@oldRead 002D  
            kpDebounce@newRead 002F                       ??___wmul 0057      __end_of_displayMenuOption 6F70  
       ??_readSerialController 0054                       ??_kpInit 0059                    __pdataBANK0 00BF  
                  ?_timerReset 0053                       ??_soInit 0059                       ??_random 005B  
                     ??_pwmSet 005A                 ?_mixerNextSong 0053            __end_of_displayMenu 6556  
            __size_of_addPoint 0066                    __pbssCOMRAM 0001                    ?_pushNibble 005C  
                   pinMode@pin 0053              __size_of_gameInit 0016              __size_of_gameOver 00BA  
          __size_of_menuUpdate 00EE                      _checkFood 6990                      addPoint@i 0054  
                 _current_note 003A                 ?_rendererStart 0053                      _delayMili 6304  
             ___lwdiv@dividend 0053                      _gameStart 6050                  __pmediumconst 7DB0  
                     ?___aldiv 0053              __size_of_setPixel 00E0                       ?___awmod 0053  
               _PulseClockData 622C                       ?___lwdiv 0053                       ?___lwmod 005D  
         __end_of_PulseEnClock 6280                      _direction 0074                      _lcdString 6AEE  
                  _digitalRead 77AA                       ?_lcdChar 0053              __size_of_pushByte 005A  
                     ?_lcdInit 0053                      _kpReadKey 6A76           __end_of_pwmFrequency 616A  
                   setPixel@x_ 0066              __size_of_stopNote 0028                  ??_mixerUpdate 0064  
                     ?_newGame 0053                       ?_pinMode 0053                       ?_soWrite 0059  
                     ?_pwmInit 0053            __size_of_serialInit 001A            __size_of_serialRead 002C  
          __size_of_serialSend 0016                      _readInput 7524               ___lwdiv@quotient 0057  
                ??_replaceFood 0062                    _lcdPosition 63A0               pwmFrequency@freq 0061  
              ___aldiv@divisor 0057                ___aldiv@counter 005B                      gameOver@i 0069  
          __size_of_timerReset 0022                 ___wmul@product 0057                     ?_checkFood 0053  
                ??_resetPoints 0053                      _mixerInit 678E                   ??_delayMicro 0055  
                    _mixerStop 6030                   ??_gameUpdate 006E        __size_of_checkCollision 0086  
                   ?_delayMili 0053                     ?_gameStart 0053          __size_of_mixerRestart 0012  
       __end_of_PulseClockData 6256                      _note_time 0039            __size_of_pushNibble 0026  
                 ??_lcdCommand 0060     __size_of_displayMenuOption 00C2                      _timerInit 6036  
                    _timerWait 6064                    _displayMenu 6512                     ?_lcdString 0061  
                 ??_kpDebounce 005C          __size_of_rendererInit 002C                ??_mixerNextSong 0059  
              _pacman_duration 7F6D           __end_of_tetris_notes 7EBD                     ?_kpReadKey 0053  
            ___wmul@multiplier 0053                      _startNote 6556                lcdCommand@value 0060  
           __end_of_delayMicro 602C             __end_of_gameUpdate 77AA                     ?_readInput 0053  
             timerReset@ciclos 0055                      copy_data0 6936                      copy_data1 6956  
          __end_of_mixerUpdate 7042       __end_of_pacman_song_size 7FAE             __end_of_lcdCommand 6122  
                   pushByte@rs 005C                   lcdChar@value 0060                checkCollision@i 0056  
                 _mixerRestart 6074                ??_rendererStart 0067                     ?_mixerInit 0053  
             _tetris_song_size 7FAC             __end_of_kpDebounce 7524                     ?_mixerStop 0053  
          __end_of_replaceFood 6204                       __Hrparam 0000                  ??_updateSnake 0059  
                 _rendererInit 6280                    _pacman_song 00E9                       __Lrparam 0000  
              lcdPosition@line 0061                ?_PulseClockData 0053              ?_mixerGetSongName 0053  
                 _mixer_output 0035                     ?_timerInit 0053            __end_of_resetPoints 63A0  
                   ?_timerWait 0053               __size_of___aldiv 010C             ??_mixerGetSongName 0055  
             __size_of___awmod 00B0        __size_of_pulseEnablePin 0042               __size_of___lwdiv 0074  
                 ??_menuUpdate 006C               __size_of___lwmod 0064                       _addPoint 6850  
                   ?_startNote 0053               __size_of_lcdChar 001E               __size_of_lcdInit 00B4  
             __size_of_newGame 004C                   resetPoints@i 0053                       _gameInit 6086  
                     _gameOver 6DF4                   _playing_note 0037               __size_of_pinMode 024E  
              ___lwdiv@divisor 0055                ___lwdiv@counter 0059                       __ptext10 6C90  
                     __ptext11 7524                       __ptext20 609C                       __ptext12 62D8  
                     __ptext21 68B6                       __ptext13 62AC                       __ptext30 6B6C  
                     __ptext22 6A02                       __ptext14 6030                       __ptext31 6050  
                     __ptext23 73EE                       __ptext15 61B6                       __ptext40 6D40  
                     __ptext32 6734                       __ptext24 77AA                       __ptext16 6A76  
                     __ptext41 6190                       __ptext33 6AEE                       __ptext25 6DF4  
                     __ptext17 6F70                       __ptext50 6104                       __ptext42 659C  
                     __ptext34 6686                       __ptext26 6064                       __ptext18 6204  
                     __ptext51 6304                       __ptext43 6366                       __ptext35 63A0  
                     __ptext27 6122                       __ptext19 6556                       __ptext60 678E  
                     __ptext52 60E6                       __ptext44 61DC                       __ptext36 6074  
                     __ptext28 6990                       __ptext61 60CC                       __ptext53 66DA  
                     __ptext45 6636                       __ptext37 6086                       __ptext29 6850  
                     __ptext62 60B2                       __ptext54 65E8                       __ptext46 616A  
                     __ptext38 6036                       __ptext63 6144                       __ptext55 6256  
                     __ptext47 67EC                       __ptext39 6280                       __ptext64 72E2  
                     __ptext56 622C                       __ptext48 63DA                       __ptext65 6334  
                     __ptext57 64D0                       __ptext49 7114                       __ptext66 6452  
                     __ptext58 7B62                       __ptext67 7914                       __ptext59 602A  
             __size_of_soWrite 004E                  ?_cleanScreean 0053               __size_of_pwmInit 001A  
                    setPixel@i 0067                      setPixel@x 0069                      setPixel@y 0061  
                     _last_key 003D                  __size_of_main 009E                    ??_checkFood 006A  
                     _menu_opt 003B           __end_of_sw_song_size 7FAC         __size_of_kpReadKeyDown 0026  
           __end_of_menuUpdate 72E2                    ??_delayMili 0055                       _setPixel 7114  
                 ??_serialInit 0053                   ??_serialRead 0053          __size_of_PulseEnClock 002A  
                 ??_serialSend 0053                    ??_gameStart 0067                       _playlist 0080  
      __end_of_pacman_duration 7F8C                    delayMicro@a 0053                   soWrite@value 0059  
              _tetris_duration 7DF7                    _random_seed 0072          __size_of_pwmFrequency 0026  
                     _song_idx 0036                       _pushByte 66DA         __size_of_displayScreen 0054  
                    pwmSet@val 005D                    ??_lcdString 0063                       _sw_notes 7F15  
      __size_of_mixerGetOutput 0004                   ??_timerReset 0055                       _stopNote 6204  
          __end_of_updateSnake 7114                    ??_kpReadKey 0053                timerReset@tempo 0053  
                  _mixerUpdate 6F70                   ??_pushNibble 005E                 lcdPosition@col 0063  
                ?_digitalWrite 0053                 ??_cleanScreean 006A                    ??_readInput 0063  
          __end_of_sw_duration 7F15             __end_of_serialInit 60E6             __end_of_serialRead 62D8  
           __end_of_serialSend 60B2                    _replaceFood 61DC                   _PulseEnClock 6256  
           __end_of_notes_freq 7DED              digitalWrite@value 0055               ___lwmod@dividend 005D  
                  ??_mixerInit 0063                  menuUpdate@key 006E             __end_of_timerReset 6144  
                  ??_mixerStop 0063                   _pwmFrequency 6144                    _resetPoints 6366  
               _checkCollision 6B6C                       soWrite@i 005B        __size_of_mixerSetOutput 0008  
                  ??_timerInit 0053                    ??_timerWait 0053             __end_of_pushNibble 61B6  
                 ?_digitalRead 0053  __size_of_readSerialController 002C                    ??_startNote 0063  
                _kpReadKeyDown 61B6                ___lwmod@divisor 005F                    kpDebounce@i 005F  
              ___lwmod@counter 0061                 ??_digitalWrite 0057                   ___aldiv@sign 005C  
                _displayScreen 6686                   ?_lcdPosition 0061                digitalWrite@pin 0053  
       __end_of_checkCollision 6BF2                   _tetris_notes 7E5A        __end_of_tetris_duration 7E5A  
                  _tetris_song 00D4                    _updateSnake 7042  
